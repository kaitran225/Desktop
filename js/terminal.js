$(function () {
  var index = 0;
  var codeIndex = 0;
  const lines = 16;
  const typeSpeed = 15;
  var timeOutSpeed = 50;
  const code = [
    "(function (global, factory) {",
    '  typeof exports === "object" && typeof module !== "undefined"',
    "    ? factory(exports)",
    '    : typeof define === "function" && define.amd',
    '    ? define(["exports"], factory)',
    "    : ((global =",
    '        typeof globalThis !== "undefined" ? globalThis : global || self),',
    "      factory((global.THREE = {})));",
    "})(this, function (exports) {",
    '  "use strict";',
    "",
    '  const REVISION = "149";',
    "  const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };",
    "  const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };",
    "",
    '  const GLSL1 = "100";',
    '  const GLSL3 = "300 es";',
    "",
    "  const _SRGBAFormat = 1035; // fallback for WebGL 1",
    "",
    "  /**",
    "   * https://github.com/mrdoob/eventdispatcher.js/",
    "   */",
    "",
    "  class EventDispatcher {",
    "    addEventListener(type, listener) {",
    "      if (this._listeners === undefined) this._listeners = {};",
    "",
    "      const listeners = this._listeners;",
    "",
    "      if (listeners[type] === undefined) {",
    "        listeners[type] = [];",
    "      }",
    "",
    "      if (listeners[type].indexOf(listener) === -1) {",
    "        listeners[type].push(listener);",
    "      }",
    "    }",
    "",
    "    hasEventListener(type, listener) {",
    "      if (this._listeners === undefined) return false;",
    "",
    "      const listeners = this._listeners;",
    "",
    "      return (",
    "        listeners[type] !== undefined &&",
    "        listeners[type].indexOf(listener) !== -1",
    "      );",
    "    }",
    "",
    "    removeEventListener(type, listener) {",
    "      if (this._listeners === undefined) return;",
    "",
    "      const listeners = this._listeners;",
    "      const listenerArray = listeners[type];",
    "",
    "      if (listenerArray !== undefined) {",
    "        const index = listenerArray.indexOf(listener);",
    "",
    "        if (index !== -1) {",
    "          listenerArray.splice(index, 1);",
    "        }",
    "      }",
    "    }",
    "",
    "    dispatchEvent(event) {",
    "      if (this._listeners === undefined) return;",
    "",
    "      const listeners = this._listeners;",
    "      const listenerArray = listeners[event.type];",
    "",
    "      if (listenerArray !== undefined) {",
    "        event.target = this;",
    "",
    "        // Make a copy, in case listeners are removed while iterating.",
    "        const array = listenerArray.slice(0);",
    "",
    "        for (let i = 0, l = array.length; i < l; i++) {",
    "          array[i].call(this, event);",
    "        }",
    "",
    "        event.target = null;",
    "      }",
    "    }",
    "  }",
    "",
    "  const _lut = [",
    "  ];",
    "",
    "  let _seed = 1234567;",
    "",
    "  const DEG2RAD = Math.PI / 180;",
    "  const RAD2DEG = 180 / Math.PI;",
    "",
    "  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136",
    "  function generateUUID() {",
    "    const d0 = (Math.random() * 0xffffffff) | 0;",
    "    const d1 = (Math.random() * 0xffffffff) | 0;",
    "    const d2 = (Math.random() * 0xffffffff) | 0;",
    "    const d3 = (Math.random() * 0xffffffff) | 0;",
    "    const uuid =",
    "      _lut[d0 & 0xff] +",
    "      _lut[(d0 >> 8) & 0xff] +",
    "      _lut[(d0 >> 16) & 0xff] +",
    "      _lut[(d0 >> 24) & 0xff] +",
    "      " - " +",
    "      _lut[d1 & 0xff] +",
    "      _lut[(d1 >> 8) & 0xff] +",
    "      " - " +",
    "      _lut[((d1 >> 16) & 0x0f) | 0x40] +",
    "      _lut[(d1 >> 24) & 0xff] +",
    "      " - " +",
    "      _lut[(d2 & 0x3f) | 0x80] +",
    "      _lut[(d2 >> 8) & 0xff] +",
    "      " - " +",
    "      _lut[(d2 >> 16) & 0xff] +",
    "      _lut[(d2 >> 24) & 0xff] +",
    "      _lut[d3 & 0xff] +",
    "      _lut[(d3 >> 8) & 0xff] +",
    "      _lut[(d3 >> 16) & 0xff] +",
    "      _lut[(d3 >> 24) & 0xff];",
    "",
    "    // .toLowerCase() here flattens concatenated strings to save heap memory space.",
    "    return uuid.toLowerCase();",
    "  }",
    "",
    "  function clamp(value, min, max) {",
    "    return Math.max(min, Math.min(max, value));",
    "  }",
    "",
    "  // compute euclidean modulo of m % n",
    "  // https://en.wikipedia.org/wiki/Modulo_operation",
    "  function euclideanModulo(n, m) {",
    "    return ((n % m) + m) % m;",
    "  }",
    "",
    "  // Linear mapping from range <a1, a2> to range <b1, b2>",
    "  function mapLinear(x, a1, a2, b1, b2) {",
    "    return b1 + ((x - a1) * (b2 - b1)) / (a2 - a1);",
    "  }",
    "",
    "  // https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/",
    "  function inverseLerp(x, y, value) {",
    "    if (x !== y) {",
    "      return (value - x) / (y - x);",
    "    } else {",
    "      return 0;",
    "    }",
    "  }",
    "",
    "  // https://en.wikipedia.org/wiki/Linear_interpolation",
    "  function lerp(x, y, t) {",
    "    return (1 - t) * x + t * y;",
    "  }",
    "",
    "  // http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/",
    "  function damp(x, y, lambda, dt) {",
    "    return lerp(x, y, 1 - Math.exp(-lambda * dt));",
    "  }",
    "",
    "  // https://www.desmos.com/calculator/vcsjnyz7x4",
    "  function pingpong(x, length = 1) {",
    "    return length - Math.abs(euclideanModulo(x, length * 2) - length);",
    "  }",
    "",
    "  // http://en.wikipedia.org/wiki/Smoothstep",
    "  function smoothstep(x, min, max) {",
    "    if (x <= min) return 0;",
    "    if (x >= max) return 1;",
    "",
    "    x = (x - min) / (max - min);",
    "",
    "    return x * x * (3 - 2 * x);",
    "  }",
    "",
    "  function smootherstep(x, min, max) {",
    "    if (x <= min) return 0;",
    "    if (x >= max) return 1;",
    "",
    "    x = (x - min) / (max - min);",
    "",
    "    return x * x * x * (x * (x * 6 - 15) + 10);",
    "  }",
    "",
    "  // Random integer from <low, high> interval",
    "  function randInt(low, high) {",
    "    return low + Math.floor(Math.random() * (high - low + 1));",
    "  }",
    "",
    "  // Random float from <low, high> interval",
    "  function randFloat(low, high) {",
    "    return low + Math.random() * (high - low);",
    "  }",
    "",
    "  // Random float from <-range/2, range/2> interval",
    "  function randFloatSpread(range) {",
    "    return range * (0.5 - Math.random());",
    "  }",
    "",
    "  // Deterministic pseudo-random float in the interval [ 0, 1 ]",
    "  function seededRandom(s) {",
    "    if (s !== undefined) _seed = s;",
    "",
    "    // Mulberry32 generator",
    "",
    "    let t = (_seed += 0x6d2b79f5);",
    "",
    "    t = Math.imul(t ^ (t >>> 15), t | 1);",
    "",
    "    t ^= t + Math.imul(t ^ (t >>> 7), t | 61);",
    "",
    "    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;",
    "  }",
    "",
    "  function degToRad(degrees) {",
    "    return degrees * DEG2RAD;",
    "  }",
    "",
    "  function radToDeg(radians) {",
    "    return radians * RAD2DEG;",
    "  }",
    "",
    "  function isPowerOfTwo(value) {",
    "    return (value & (value - 1)) === 0 && value !== 0;",
    "  }",
    "",
    "  function ceilPowerOfTwo(value) {",
    "    return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));",
    "  }",
    "",
    "  function floorPowerOfTwo(value) {",
    "    return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));",
    "  }",
    "",
    "  function setQuaternionFromProperEuler(q, a, b, c, order) {",
    "    // Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles",
    "",
    "    // rotations are applied to the axes in the order specified by 'order'",
    "    // rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'",
    "    // angles are in radians",
    "",
    "    const cos = Math.cos;",
    "    const sin = Math.sin;",
    "",
    "    const c2 = cos(b / 2);",
    "    const s2 = sin(b / 2);",
    "",
    "    const c13 = cos((a + c) / 2);",
    "    const s13 = sin((a + c) / 2);",
    "",
    "    const c1_3 = cos((a - c) / 2);",
    "    const s1_3 = sin((a - c) / 2);",
    "",
    "    const c3_1 = cos((c - a) / 2);",
    "    const s3_1 = sin((c - a) / 2);",
    "",
    "    switch (order) {",
    '      case "XYX":',
    "        q.set(c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13);",
    "        break;",
    "",
    '      case "YZY":',
    "        q.set(s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13);",
    "        break;",
    "",
    '      case "ZXZ":',
    "        q.set(s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13);",
    "        break;",
    "",
    '      case "XZX":',
    "        q.set(c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13);",
    "        break;",
    "",
    '      case "YXY":',
    "        q.set(s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13);",
    "        break;",
    "",
    '      case "ZYZ":',
    "        q.set(s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13);",
    "        break;",
    "",
    "      default:",
    "        console.warn(",
    '          "THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " +',
    "            order",
    "        );",
    "    }",
    "  }",
    "",
    "  function denormalize(value, array) {",
    "    switch (array.constructor) {",
    "      case Float32Array:",
    "        return value;",
    "",
    "      case Uint16Array:",
    "        return value / 65535.0;",
    "",
    "      case Uint8Array:",
    "        return value / 255.0;",
    "",
    "      case Int16Array:",
    "        return Math.max(value / 32767.0, -1.0);",
    "",
    "      case Int8Array:",
    "        return Math.max(value / 127.0, -1.0);",
    "",
    "      default:",
    '        throw new Error("Invalid component type.");',
    "    }",
    "  }",
    "",
    "  function normalize(value, array) {",
    "    switch (array.constructor) {",
    "      case Float32Array:",
    "        return value;",
    "",
    "      case Uint16Array:",
    "        return Math.round(value * 65535.0);",
    "",
    "      case Uint8Array:",
    "        return Math.round(value * 255.0);",
    "",
    "      case Int16Array:",
    "        return Math.round(value * 32767.0);",
    "",
    "      case Int8Array:",
    "        return Math.round(value * 127.0);",
    "",
    "      default:",
    '        throw new Error("Invalid component type.");',
    "    }",
    "  }",
    "",
    "  var MathUtils = /*#__PURE__*/ Object.freeze({",
    "    __proto__: null,",
    "    DEG2RAD: DEG2RAD,",
    "    RAD2DEG: RAD2DEG,",
    "    ceilPowerOfTwo: ceilPowerOfTwo,",
    "    clamp: clamp,",
    "    damp: damp,",
    "    degToRad: degToRad,",
    "    denormalize: denormalize,",
    "    euclideanModulo: euclideanModulo,",
    "    floorPowerOfTwo: floorPowerOfTwo,",
    "    generateUUID: generateUUID,",
    "    inverseLerp: inverseLerp,",
    "    isPowerOfTwo: isPowerOfTwo,",
    "    lerp: lerp,",
    "    mapLinear: mapLinear,",
    "    normalize: normalize,",
    "    pingpong: pingpong,",
    "    radToDeg: radToDeg,",
    "    randFloat: randFloat,",
    "    randFloatSpread: randFloatSpread,",
    "    randInt: randInt,",
    "    seededRandom: seededRandom,",
    "    setQuaternionFromProperEuler: setQuaternionFromProperEuler,",
    "    smootherstep: smootherstep,",
    "    smoothstep: smoothstep,",
    "  });",
    "",
    "  class Vector2 {",
    "    constructor(x = 0, y = 0) {",
    "      Vector2.prototype.isVector2 = true;",
    "",
    "      this.x = x;",
    "      this.y = y;",
    "    }",
    "",
    "    get width() {",
    "      return this.x;",
    "    }",
    "",
    "    set width(value) {",
    "      this.x = value;",
    "    }",
    "",
    "    get height() {",
    "      return this.y;",
    "    }",
    "",
    "    set height(value) {",
    "      this.y = value;",
    "    }",
    "",
    "    set(x, y) {",
    "      this.x = x;",
    "      this.y = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    setScalar(scalar) {",
    "      this.x = scalar;",
    "      this.y = scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    setX(x) {",
    "      this.x = x;",
    "",
    "      return this;",
    "    }",
    "",
    "    setY(y) {",
    "      this.y = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    setComponent(index, value) {",
    "      switch (index) {",
    "        case 0:",
    "          this.x = value;",
    "          break;",
    "        case 1:",
    "          this.y = value;",
    "          break;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    getComponent(index) {",
    "      switch (index) {",
    "        case 0:",
    "          return this.x;",
    "        case 1:",
    "          return this.y;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this.x, this.y);",
    "    }",
    "",
    "    copy(v) {",
    "      this.x = v.x;",
    "      this.y = v.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    add(v) {",
    "      this.x += v.x;",
    "      this.y += v.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScalar(s) {",
    "      this.x += s;",
    "      this.y += s;",
    "",
    "      return this;",
    "    }",
    "",
    "    addVectors(a, b) {",
    "      this.x = a.x + b.x;",
    "      this.y = a.y + b.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScaledVector(v, s) {",
    "      this.x += v.x * s;",
    "      this.y += v.y * s;",
    "",
    "      return this;",
    "    }",
    "",
    "    sub(v) {",
    "      this.x -= v.x;",
    "      this.y -= v.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    subScalar(s) {",
    "      this.x -= s;",
    "      this.y -= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    subVectors(a, b) {",
    "      this.x = a.x - b.x;",
    "      this.y = a.y - b.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(v) {",
    "      this.x *= v.x;",
    "      this.y *= v.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(scalar) {",
    "      this.x *= scalar;",
    "      this.y *= scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    divide(v) {",
    "      this.x /= v.x;",
    "      this.y /= v.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    divideScalar(scalar) {",
    "      return this.multiplyScalar(1 / scalar);",
    "    }",
    "",
    "    applyMatrix3(m) {",
    "      const x = this.x,",
    "        y = this.y;",
    "      const e = m.elements;",
    "",
    "      this.x = e[0] * x + e[3] * y + e[6];",
    "      this.y = e[1] * x + e[4] * y + e[7];",
    "",
    "      return this;",
    "    }",
    "",
    "    min(v) {",
    "      this.x = Math.min(this.x, v.x);",
    "      this.y = Math.min(this.y, v.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    max(v) {",
    "      this.x = Math.max(this.x, v.x);",
    "      this.y = Math.max(this.y, v.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    clamp(min, max) {",
    "      // assumes min < max, componentwise",
    "",
    "      this.x = Math.max(min.x, Math.min(max.x, this.x));",
    "      this.y = Math.max(min.y, Math.min(max.y, this.y));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampScalar(minVal, maxVal) {",
    "      this.x = Math.max(minVal, Math.min(maxVal, this.x));",
    "      this.y = Math.max(minVal, Math.min(maxVal, this.y));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampLength(min, max) {",
    "      const length = this.length();",
    "",
    "      return this.divideScalar(length || 1).multiplyScalar(",
    "        Math.max(min, Math.min(max, length))",
    "      );",
    "    }",
    "",
    "    floor() {",
    "      this.x = Math.floor(this.x);",
    "      this.y = Math.floor(this.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    ceil() {",
    "      this.x = Math.ceil(this.x);",
    "      this.y = Math.ceil(this.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    round() {",
    "      this.x = Math.round(this.x);",
    "      this.y = Math.round(this.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    roundToZero() {",
    "      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);",
    "      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);",
    "",
    "      return this;",
    "    }",
    "",
    "    negate() {",
    "      this.x = -this.x;",
    "      this.y = -this.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    dot(v) {",
    "      return this.x * v.x + this.y * v.y;",
    "    }",
    "",
    "    cross(v) {",
    "      return this.x * v.y - this.y * v.x;",
    "    }",
    "",
    "    lengthSq() {",
    "      return this.x * this.x + this.y * this.y;",
    "    }",
    "",
    "    length() {",
    "      return Math.sqrt(this.x * this.x + this.y * this.y);",
    "    }",
    "",
    "    manhattanLength() {",
    "      return Math.abs(this.x) + Math.abs(this.y);",
    "    }",
    "",
    "    normalize() {",
    "      return this.divideScalar(this.length() || 1);",
    "    }",
    "",
    "    angle() {",
    "      // computes the angle in radians with respect to the positive x-axis",
    "",
    "      const angle = Math.atan2(-this.y, -this.x) + Math.PI;",
    "",
    "      return angle;",
    "    }",
    "",
    "    distanceTo(v) {",
    "      return Math.sqrt(this.distanceToSquared(v));",
    "    }",
    "",
    "    distanceToSquared(v) {",
    "      const dx = this.x - v.x,",
    "        dy = this.y - v.y;",
    "      return dx * dx + dy * dy;",
    "    }",
    "",
    "    manhattanDistanceTo(v) {",
    "      return Math.abs(this.x - v.x) + Math.abs(this.y - v.y);",
    "    }",
    "",
    "    setLength(length) {",
    "      return this.normalize().multiplyScalar(length);",
    "    }",
    "",
    "    lerp(v, alpha) {",
    "      this.x += (v.x - this.x) * alpha;",
    "      this.y += (v.y - this.y) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerpVectors(v1, v2, alpha) {",
    "      this.x = v1.x + (v2.x - v1.x) * alpha;",
    "      this.y = v1.y + (v2.y - v1.y) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(v) {",
    "      return v.x === this.x && v.y === this.y;",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      this.x = array[offset];",
    "      this.y = array[offset + 1];",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this.x;",
    "      array[offset + 1] = this.y;",
    "",
    "      return array;",
    "    }",
    "",
    "    fromBufferAttribute(attribute, index) {",
    "      this.x = attribute.getX(index);",
    "      this.y = attribute.getY(index);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateAround(center, angle) {",
    "      const c = Math.cos(angle),",
    "        s = Math.sin(angle);",
    "",
    "      const x = this.x - center.x;",
    "      const y = this.y - center.y;",
    "",
    "      this.x = x * c - y * s + center.x;",
    "      this.y = x * s + y * c + center.y;",
    "",
    "      return this;",
    "    }",
    "",
    "    random() {",
    "      this.x = Math.random();",
    "      this.y = Math.random();",
    "",
    "      return this;",
    "    }",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this.x;",
    "      yield this.y;",
    "    }",
    "  }",
    "",
    "  class Matrix3 {",
    "    constructor() {",
    "      Matrix3.prototype.isMatrix3 = true;",
    "",
    "      this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1];",
    "    }",
    "",
    "    set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {",
    "      const te = this.elements;",
    "",
    "      te[0] = n11;",
    "      te[1] = n21;",
    "      te[2] = n31;",
    "      te[3] = n12;",
    "      te[4] = n22;",
    "      te[5] = n32;",
    "      te[6] = n13;",
    "      te[7] = n23;",
    "      te[8] = n33;",
    "",
    "      return this;",
    "    }",
    "",
    "    identity() {",
    "      this.set(1, 0, 0, 0, 1, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(m) {",
    "      const te = this.elements;",
    "      const me = m.elements;",
    "",
    "      te[0] = me[0];",
    "      te[1] = me[1];",
    "      te[2] = me[2];",
    "      te[3] = me[3];",
    "      te[4] = me[4];",
    "      te[5] = me[5];",
    "      te[6] = me[6];",
    "      te[7] = me[7];",
    "      te[8] = me[8];",
    "",
    "      return this;",
    "    }",
    "",
    "    extractBasis(xAxis, yAxis, zAxis) {",
    "      xAxis.setFromMatrix3Column(this, 0);",
    "      yAxis.setFromMatrix3Column(this, 1);",
    "      zAxis.setFromMatrix3Column(this, 2);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromMatrix4(m) {",
    "      const me = m.elements;",
    "",
    "      this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10]);",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(m) {",
    "      return this.multiplyMatrices(this, m);",
    "    }",
    "",
    "    premultiply(m) {",
    "      return this.multiplyMatrices(m, this);",
    "    }",
    "",
    "    multiplyMatrices(a, b) {",
    "      const ae = a.elements;",
    "      const be = b.elements;",
    "      const te = this.elements;",
    "",
    "      const a11 = ae[0],",
    "        a12 = ae[3],",
    "        a13 = ae[6];",
    "      const a21 = ae[1],",
    "        a22 = ae[4],",
    "        a23 = ae[7];",
    "      const a31 = ae[2],",
    "        a32 = ae[5],",
    "        a33 = ae[8];",
    "",
    "      const b11 = be[0],",
    "        b12 = be[3],",
    "        b13 = be[6];",
    "      const b21 = be[1],",
    "        b22 = be[4],",
    "        b23 = be[7];",
    "      const b31 = be[2],",
    "        b32 = be[5],",
    "        b33 = be[8];",
    "",
    "      te[0] = a11 * b11 + a12 * b21 + a13 * b31;",
    "      te[3] = a11 * b12 + a12 * b22 + a13 * b32;",
    "      te[6] = a11 * b13 + a12 * b23 + a13 * b33;",
    "",
    "      te[1] = a21 * b11 + a22 * b21 + a23 * b31;",
    "      te[4] = a21 * b12 + a22 * b22 + a23 * b32;",
    "      te[7] = a21 * b13 + a22 * b23 + a23 * b33;",
    "",
    "      te[2] = a31 * b11 + a32 * b21 + a33 * b31;",
    "      te[5] = a31 * b12 + a32 * b22 + a33 * b32;",
    "      te[8] = a31 * b13 + a32 * b23 + a33 * b33;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(s) {",
    "      const te = this.elements;",
    "",
    "      te[0] *= s;",
    "      te[3] *= s;",
    "      te[6] *= s;",
    "      te[1] *= s;",
    "      te[4] *= s;",
    "      te[7] *= s;",
    "      te[2] *= s;",
    "      te[5] *= s;",
    "      te[8] *= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    determinant() {",
    "      const te = this.elements;",
    "",
    "      const a = te[0],",
    "        b = te[1],",
    "        c = te[2],",
    "        d = te[3],",
    "        e = te[4],",
    "        f = te[5],",
    "        g = te[6],",
    "        h = te[7],",
    "        i = te[8];",
    "",
    "      return (",
    "        a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g",
    "      );",
    "    }",
    "",
    "    invert() {",
    "      const te = this.elements,",
    "        n11 = te[0],",
    "        n21 = te[1],",
    "        n31 = te[2],",
    "        n12 = te[3],",
    "        n22 = te[4],",
    "        n32 = te[5],",
    "        n13 = te[6],",
    "        n23 = te[7],",
    "        n33 = te[8],",
    "        t11 = n33 * n22 - n32 * n23,",
    "        t12 = n32 * n13 - n33 * n12,",
    "        t13 = n23 * n12 - n22 * n13,",
    "        det = n11 * t11 + n21 * t12 + n31 * t13;",
    "",
    "      if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);",
    "",
    "      const detInv = 1 / det;",
    "",
    "      te[0] = t11 * detInv;",
    "      te[1] = (n31 * n23 - n33 * n21) * detInv;",
    "      te[2] = (n32 * n21 - n31 * n22) * detInv;",
    "",
    "      te[3] = t12 * detInv;",
    "      te[4] = (n33 * n11 - n31 * n13) * detInv;",
    "      te[5] = (n31 * n12 - n32 * n11) * detInv;",
    "",
    "      te[6] = t13 * detInv;",
    "      te[7] = (n21 * n13 - n23 * n11) * detInv;",
    "      te[8] = (n22 * n11 - n21 * n12) * detInv;",
    "",
    "      return this;",
    "    }",
    "",
    "    transpose() {",
    "      let tmp;",
    "      const m = this.elements;",
    "",
    "      tmp = m[1];",
    "      m[1] = m[3];",
    "      m[3] = tmp;",
    "      tmp = m[2];",
    "      m[2] = m[6];",
    "      m[6] = tmp;",
    "      tmp = m[5];",
    "      m[5] = m[7];",
    "      m[7] = tmp;",
    "",
    "      return this;",
    "    }",
    "",
    "    getNormalMatrix(matrix4) {",
    "      return this.setFromMatrix4(matrix4).invert().transpose();",
    "    }",
    "",
    "    transposeIntoArray(r) {",
    "      const m = this.elements;",
    "",
    "      r[0] = m[0];",
    "      r[1] = m[3];",
    "      r[2] = m[6];",
    "      r[3] = m[1];",
    "      r[4] = m[4];",
    "      r[5] = m[7];",
    "      r[6] = m[2];",
    "      r[7] = m[5];",
    "      r[8] = m[8];",
    "",
    "      return this;",
    "    }",
    "",
    "    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {",
    "      const c = Math.cos(rotation);",
    "      const s = Math.sin(rotation);",
    "",
    "      this.set(",
    "        sx * c,",
    "        sx * s,",
    "        -sx * (c * cx + s * cy) + cx + tx,",
    "        -sy * s,",
    "        sy * c,",
    "        -sy * (-s * cx + c * cy) + cy + ty,",
    "        0,",
    "        0,",
    "        1",
    "      );",
    "",
    "      return this;",
    "    }",
    "",
    "    //",
    "",
    "    scale(sx, sy) {",
    "      this.premultiply(_m3.makeScale(sx, sy));",
    "",
    "      return this;",
    "    }",
    "",
    "    rotate(theta) {",
    "      this.premultiply(_m3.makeRotation(-theta));",
    "",
    "      return this;",
    "    }",
    "",
    "    translate(tx, ty) {",
    "      this.premultiply(_m3.makeTranslation(tx, ty));",
    "",
    "      return this;",
    "    }",
    "",
    "    // for 2D Transforms",
    "",
    "    makeTranslation(x, y) {",
    "      this.set(1, 0, x, 0, 1, y, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotation(theta) {",
    "      // counterclockwise",
    "",
    "      const c = Math.cos(theta);",
    "      const s = Math.sin(theta);",
    "",
    "      this.set(c, -s, 0, s, c, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeScale(x, y) {",
    "      this.set(x, 0, 0, 0, y, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    //",
    "",
    "    equals(matrix) {",
    "      const te = this.elements;",
    "      const me = matrix.elements;",
    "",
    "      for (let i = 0; i < 9; i++) {",
    "        if (te[i] !== me[i]) return false;",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      for (let i = 0; i < 9; i++) {",
    "        this.elements[i] = array[i + offset];",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      const te = this.elements;",
    "",
    "      array[offset] = te[0];",
    "      array[offset + 1] = te[1];",
    "      array[offset + 2] = te[2];",
    "",
    "      array[offset + 3] = te[3];",
    "      array[offset + 4] = te[4];",
    "      array[offset + 5] = te[5];",
    "",
    "      array[offset + 6] = te[6];",
    "      array[offset + 7] = te[7];",
    "      array[offset + 8] = te[8];",
    "",
    "      return array;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().fromArray(this.elements);",
    "    }",
    "  }",
    "",
    "  const _m3 = /*@__PURE__*/ new Matrix3();",
    "",
    "  function arrayNeedsUint32(array) {",
    "    // assumes larger values usually on last",
    "",
    "    for (let i = array.length - 1; i >= 0; --i) {",
    "      if (array[i] >= 65535) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565",
    "    }",
    "",
    "    return false;",
    "  }",
    "",
    "  const TYPED_ARRAYS = {",
    "    Int8Array: Int8Array,",
    "    Uint8Array: Uint8Array,",
    "    Uint8ClampedArray: Uint8ClampedArray,",
    "    Int16Array: Int16Array,",
    "    Uint16Array: Uint16Array,",
    "    Int32Array: Int32Array,",
    "    Uint32Array: Uint32Array,",
    "    Float32Array: Float32Array,",
    "    Float64Array: Float64Array,",
    "  };",
    "",
    "  function getTypedArray(type, buffer) {",
    "    return new TYPED_ARRAYS[type](buffer);",
    "  }",
    "",
    "  function createElementNS(name) {",
    '    return document.createElementNS("http://www.w3.org/1999/xhtml", name);',
    "  }",
    "",
    "  function SRGBToLinear(c) {",
    "    return c < 0.04045",
    "      ? c * 0.0773993808",
    "      : Math.pow(c * 0.9478672986 + 0.0521327014, 2.4);",
    "  }",
    "",
    "  function LinearToSRGB(c) {",
    "    return c < 0.0031308 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;",
    "  }",
    "",
    "  // JavaScript RGB-to-RGB transforms, defined as",
    "  // FN[InputColorSpace][OutputColorSpace] callback functions.",
    "  const FN = {",
    "    [SRGBColorSpace]: { [LinearSRGBColorSpace]: SRGBToLinear },",
    "    [LinearSRGBColorSpace]: { [SRGBColorSpace]: LinearToSRGB },",
    "  };",
    "",
    "  const ColorManagement = {",
    "    legacyMode: true,",
    "",
    "    get workingColorSpace() {",
    "      return LinearSRGBColorSpace;",
    "    },",
    "",
    "    set workingColorSpace(colorSpace) {",
    '      console.warn("THREE.ColorManagement: .workingColorSpace is readonly.");',
    "    },",
    "",
    "    convert: function (color, sourceColorSpace, targetColorSpace) {",
    "      if (",
    "        this.legacyMode ||",
    "        sourceColorSpace === targetColorSpace ||",
    "        !sourceColorSpace ||",
    "        !targetColorSpace",
    "      ) {",
    "        return color;",
    "      }",
    "",
    "      if (",
    "        FN[sourceColorSpace] &&",
    "        FN[sourceColorSpace][targetColorSpace] !== undefined",
    "      ) {",
    "        const fn = FN[sourceColorSpace][targetColorSpace];",
    "",
    "        color.r = fn(color.r);",
    "        color.g = fn(color.g);",
    "        color.b = fn(color.b);",
    "",
    "        return color;",
    "      }",
    "",
    '      throw new Error("Unsupported color space conversion.");',
    "    },",
    "",
    "    fromWorkingColorSpace: function (color, targetColorSpace) {",
    "      return this.convert(color, this.workingColorSpace, targetColorSpace);",
    "    },",
    "",
    "    toWorkingColorSpace: function (color, sourceColorSpace) {",
    "      return this.convert(color, sourceColorSpace, this.workingColorSpace);",
    "    },",
    "  };",
    "",
    "  const _colorKeywords = {",
    "    aliceblue: 0xf0f8ff,",
    "    antiquewhite: 0xfaebd7,",
    "    aqua: 0x00ffff,",
    "    aquamarine: 0x7fffd4,",
    "    azure: 0xf0ffff,",
    "    beige: 0xf5f5dc,",
    "    bisque: 0xffe4c4,",
    "    black: 0x000000,",
    "    blanchedalmond: 0xffebcd,",
    "    blue: 0x0000ff,",
    "    blueviolet: 0x8a2be2,",
    "    brown: 0xa52a2a,",
    "    burlywood: 0xdeb887,",
    "    cadetblue: 0x5f9ea0,",
    "    chartreuse: 0x7fff00,",
    "    chocolate: 0xd2691e,",
    "    coral: 0xff7f50,",
    "    cornflowerblue: 0x6495ed,",
    "    cornsilk: 0xfff8dc,",
    "    crimson: 0xdc143c,",
    "    cyan: 0x00ffff,",
    "    darkblue: 0x00008b,",
    "    darkcyan: 0x008b8b,",
    "    darkgoldenrod: 0xb8860b,",
    "    darkgray: 0xa9a9a9,",
    "    darkgreen: 0x006400,",
    "    darkgrey: 0xa9a9a9,",
    "    darkkhaki: 0xbdb76b,",
    "    darkmagenta: 0x8b008b,",
    "    darkolivegreen: 0x556b2f,",
    "    darkorange: 0xff8c00,",
    "    darkorchid: 0x9932cc,",
    "    darkred: 0x8b0000,",
    "    darksalmon: 0xe9967a,",
    "    darkseagreen: 0x8fbc8f,",
    "    darkslateblue: 0x483d8b,",
    "    darkslategray: 0x2f4f4f,",
    "    darkslategrey: 0x2f4f4f,",
    "    darkturquoise: 0x00ced1,",
    "    darkviolet: 0x9400d3,",
    "    deeppink: 0xff1493,",
    "    deepskyblue: 0x00bfff,",
    "    dimgray: 0x696969,",
    "    dimgrey: 0x696969,",
    "    dodgerblue: 0x1e90ff,",
    "    firebrick: 0xb22222,",
    "    floralwhite: 0xfffaf0,",
    "    forestgreen: 0x228b22,",
    "    fuchsia: 0xff00ff,",
    "    gainsboro: 0xdcdcdc,",
    "    ghostwhite: 0xf8f8ff,",
    "    gold: 0xffd700,",
    "    goldenrod: 0xdaa520,",
    "    gray: 0x808080,",
    "    green: 0x008000,",
    "    greenyellow: 0xadff2f,",
    "    grey: 0x808080,",
    "    honeydew: 0xf0fff0,",
    "    hotpink: 0xff69b4,",
    "    indianred: 0xcd5c5c,",
    "    indigo: 0x4b0082,",
    "    ivory: 0xfffff0,",
    "    khaki: 0xf0e68c,",
    "    lavender: 0xe6e6fa,",
    "    lavenderblush: 0xfff0f5,",
    "    lawngreen: 0x7cfc00,",
    "    lemonchiffon: 0xfffacd,",
    "    lightblue: 0xadd8e6,",
    "    lightcoral: 0xf08080,",
    "    lightcyan: 0xe0ffff,",
    "    lightgoldenrodyellow: 0xfafad2,",
    "    lightgray: 0xd3d3d3,",
    "    lightgreen: 0x90ee90,",
    "    lightgrey: 0xd3d3d3,",
    "    lightpink: 0xffb6c1,",
    "    lightsalmon: 0xffa07a,",
    "    lightseagreen: 0x20b2aa,",
    "    lightskyblue: 0x87cefa,",
    "    lightslategray: 0x778899,",
    "    lightslategrey: 0x778899,",
    "    lightsteelblue: 0xb0c4de,",
    "    lightyellow: 0xffffe0,",
    "    lime: 0x00ff00,",
    "    limegreen: 0x32cd32,",
    "    linen: 0xfaf0e6,",
    "    magenta: 0xff00ff,",
    "    maroon: 0x800000,",
    "    mediumaquamarine: 0x66cdaa,",
    "    mediumblue: 0x0000cd,",
    "    mediumorchid: 0xba55d3,",
    "    mediumpurple: 0x9370db,",
    "    mediumseagreen: 0x3cb371,",
    "    mediumslateblue: 0x7b68ee,",
    "    mediumspringgreen: 0x00fa9a,",
    "    mediumturquoise: 0x48d1cc,",
    "    mediumvioletred: 0xc71585,",
    "    midnightblue: 0x191970,",
    "    mintcream: 0xf5fffa,",
    "    mistyrose: 0xffe4e1,",
    "    moccasin: 0xffe4b5,",
    "    navajowhite: 0xffdead,",
    "    navy: 0x000080,",
    "    oldlace: 0xfdf5e6,",
    "    olive: 0x808000,",
    "    olivedrab: 0x6b8e23,",
    "    orange: 0xffa500,",
    "    orangered: 0xff4500,",
    "    orchid: 0xda70d6,",
    "    palegoldenrod: 0xeee8aa,",
    "    palegreen: 0x98fb98,",
    "    paleturquoise: 0xafeeee,",
    "    palevioletred: 0xdb7093,",
    "    papayawhip: 0xffefd5,",
    "    peachpuff: 0xffdab9,",
    "    peru: 0xcd853f,",
    "    pink: 0xffc0cb,",
    "    plum: 0xdda0dd,",
    "    powderblue: 0xb0e0e6,",
    "    purple: 0x800080,",
    "    rebeccapurple: 0x663399,",
    "    red: 0xff0000,",
    "    rosybrown: 0xbc8f8f,",
    "    royalblue: 0x4169e1,",
    "    saddlebrown: 0x8b4513,",
    "    salmon: 0xfa8072,",
    "    sandybrown: 0xf4a460,",
    "    seagreen: 0x2e8b57,",
    "    seashell: 0xfff5ee,",
    "    sienna: 0xa0522d,",
    "    silver: 0xc0c0c0,",
    "    skyblue: 0x87ceeb,",
    "    slateblue: 0x6a5acd,",
    "    slategray: 0x708090,",
    "    slategrey: 0x708090,",
    "    snow: 0xfffafa,",
    "    springgreen: 0x00ff7f,",
    "    steelblue: 0x4682b4,",
    "    tan: 0xd2b48c,",
    "    teal: 0x008080,",
    "    thistle: 0xd8bfd8,",
    "    tomato: 0xff6347,",
    "    turquoise: 0x40e0d0,",
    "    violet: 0xee82ee,",
    "    wheat: 0xf5deb3,",
    "    white: 0xffffff,",
    "    whitesmoke: 0xf5f5f5,",
    "    yellow: 0xffff00,",
    "    yellowgreen: 0x9acd32,",
    "  };",
    "",
    "  const _rgb$1 = { r: 0, g: 0, b: 0 };",
    "  const _hslA = { h: 0, s: 0, l: 0 };",
    "  const _hslB = { h: 0, s: 0, l: 0 };",
    "",
    "  function hue2rgb(p, q, t) {",
    "    if (t < 0) t += 1;",
    "    if (t > 1) t -= 1;",
    "    if (t < 1 / 6) return p + (q - p) * 6 * t;",
    "    if (t < 1 / 2) return q;",
    "    if (t < 2 / 3) return p + (q - p) * 6 * (2 / 3 - t);",
    "    return p;",
    "  }",
    "",
    "  function toComponents(source, target) {",
    "    target.r = source.r;",
    "    target.g = source.g;",
    "    target.b = source.b;",
    "",
    "    return target;",
    "  }",
    "",
    "  class Color {",
    "    constructor(r, g, b) {",
    "      this.isColor = true;",
    "",
    "      this.r = 1;",
    "      this.g = 1;",
    "      this.b = 1;",
    "",
    "      if (g === undefined && b === undefined) {",
    "        // r is THREE.Color, hex or string",
    "        return this.set(r);",
    "      }",
    "",
    "      return this.setRGB(r, g, b);",
    "    }",
    "",
    "    set(value) {",
    "      if (value && value.isColor) {",
    "        this.copy(value);",
    '      } else if (typeof value === "number") {',
    "        this.setHex(value);",
    '      } else if (typeof value === "string") {',
    "        this.setStyle(value);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    setScalar(scalar) {",
    "      this.r = scalar;",
    "      this.g = scalar;",
    "      this.b = scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    setHex(hex, colorSpace = SRGBColorSpace) {",
    "      hex = Math.floor(hex);",
    "",
    "      this.r = ((hex >> 16) & 255) / 255;",
    "      this.g = ((hex >> 8) & 255) / 255;",
    "      this.b = (hex & 255) / 255;",
    "",
    "      ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "      return this;",
    "    }",
    "",
    "    setRGB(r, g, b, colorSpace = ColorManagement.workingColorSpace) {",
    "      this.r = r;",
    "      this.g = g;",
    "      this.b = b;",
    "",
    "      ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "      return this;",
    "    }",
    "",
    "    setHSL(h, s, l, colorSpace = ColorManagement.workingColorSpace) {",
    "      // h,s,l ranges are in 0.0 - 1.0",
    "      h = euclideanModulo(h, 1);",
    "      s = clamp(s, 0, 1);",
    "      l = clamp(l, 0, 1);",
    "",
    "      if (s === 0) {",
    "        this.r = this.g = this.b = l;",
    "      } else {",
    "        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;",
    "        const q = 2 * l - p;",
    "",
    "        this.r = hue2rgb(q, p, h + 1 / 3);",
    "        this.g = hue2rgb(q, p, h);",
    "        this.b = hue2rgb(q, p, h - 1 / 3);",
    "      }",
    "",
    "      ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "      return this;",
    "    }",
    "",
    "    setStyle(style, colorSpace = SRGBColorSpace) {",
    "      function handleAlpha(string) {",
    "        if (string === undefined) return;",
    "",
    "        if (parseFloat(string) < 1) {",
    "          console.warn(",
    '            "THREE.Color: Alpha component of " + style + " will be ignored."',
    "          );",
    "        }",
    "      }",
    "",
    "      let m;",
    "",
    "      if ((m = /^((?:rgb|hsl)a?)(([^)]*))/.exec(style))) {",
    "        // rgb / hsl",
    "",
    "        let color;",
    "        const name = m[1];",
    "        const components = m[2];",
    "",
    "        switch (name) {",
    '          case "rgb":',
    '          case "rgba":',
    "            if (",
    "              (color =",
    "                /^s*(d+)s*,s*(d+)s*,s*(d+)s*(?:,s*(d*.?d+)s*)?$/.exec(",
    "                  components",
    "                ))",
    "            ) {",
    "              // rgb(255,0,0) rgba(255,0,0,0.5)",
    "              this.r = Math.min(255, parseInt(color[1], 10)) / 255;",
    "              this.g = Math.min(255, parseInt(color[2], 10)) / 255;",
    "              this.b = Math.min(255, parseInt(color[3], 10)) / 255;",
    "",
    "              ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "              handleAlpha(color[4]);",
    "",
    "              return this;",
    "            }",
    "",
    "            if (",
    "              (color =",
    "                /^s*(d+)%s*,s*(d+)%s*,s*(d+)%s*(?:,s*(d*.?d+)s*)?$/.exec(",
    "                  components",
    "                ))",
    "            ) {",
    "              // rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)",
    "              this.r = Math.min(100, parseInt(color[1], 10)) / 100;",
    "              this.g = Math.min(100, parseInt(color[2], 10)) / 100;",
    "              this.b = Math.min(100, parseInt(color[3], 10)) / 100;",
    "",
    "              ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "              handleAlpha(color[4]);",
    "",
    "              return this;",
    "            }",
    "",
    "            break;",
    "",
    '          case "hsl":',
    '          case "hsla":',
    "            if (",
    "              (color =",
    "                /^s*(d*.?d+)s*,s*(d*.?d+)%s*,s*(d*.?d+)%s*(?:,s*(d*.?d+)s*)?$/.exec(",
    "                  components",
    "                ))",
    "            ) {",
    "              // hsl(120,50%,50%) hsla(120,50%,50%,0.5)",
    "              const h = parseFloat(color[1]) / 360;",
    "              const s = parseFloat(color[2]) / 100;",
    "              const l = parseFloat(color[3]) / 100;",
    "",
    "              handleAlpha(color[4]);",
    "",
    "              return this.setHSL(h, s, l, colorSpace);",
    "            }",
    "",
    "            break;",
    "        }",
    "      } else if ((m = /^#([A-Fa-fd]+)$/.exec(style))) {",
    "        // hex color",
    "",
    "        const hex = m[1];",
    "        const size = hex.length;",
    "",
    "        if (size === 3) {",
    "          // #ff0",
    "          this.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255;",
    "          this.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255;",
    "          this.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255;",
    "",
    "          ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "          return this;",
    "        } else if (size === 6) {",
    "          // #ff0000",
    "          this.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255;",
    "          this.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255;",
    "          this.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255;",
    "",
    "          ColorManagement.toWorkingColorSpace(this, colorSpace);",
    "",
    "          return this;",
    "        }",
    "      }",
    "",
    "      if (style && style.length > 0) {",
    "        return this.setColorName(style, colorSpace);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    setColorName(style, colorSpace = SRGBColorSpace) {",
    "      // color keywords",
    "      const hex = _colorKeywords[style.toLowerCase()];",
    "",
    "      if (hex !== undefined) {",
    "        // red",
    "        this.setHex(hex, colorSpace);",
    "      } else {",
    "        // unknown color",
    '        console.warn("THREE.Color: Unknown color " + style);',
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this.r, this.g, this.b);",
    "    }",
    "",
    "    copy(color) {",
    "      this.r = color.r;",
    "      this.g = color.g;",
    "      this.b = color.b;",
    "",
    "      return this;",
    "    }",
    "",
    "    copySRGBToLinear(color) {",
    "      this.r = SRGBToLinear(color.r);",
    "      this.g = SRGBToLinear(color.g);",
    "      this.b = SRGBToLinear(color.b);",
    "",
    "      return this;",
    "    }",
    "",
    "    copyLinearToSRGB(color) {",
    "      this.r = LinearToSRGB(color.r);",
    "      this.g = LinearToSRGB(color.g);",
    "      this.b = LinearToSRGB(color.b);",
    "",
    "      return this;",
    "    }",
    "",
    "    convertSRGBToLinear() {",
    "      this.copySRGBToLinear(this);",
    "",
    "      return this;",
    "    }",
    "",
    "    convertLinearToSRGB() {",
    "      this.copyLinearToSRGB(this);",
    "",
    "      return this;",
    "    }",
    "",
    "    getHex(colorSpace = SRGBColorSpace) {",
    "      ColorManagement.fromWorkingColorSpace(",
    "        toComponents(this, _rgb$1),",
    "        colorSpace",
    "      );",
    "",
    "      return (",
    "        (clamp(_rgb$1.r * 255, 0, 255) << 16) ^",
    "        (clamp(_rgb$1.g * 255, 0, 255) << 8) ^",
    "        (clamp(_rgb$1.b * 255, 0, 255) << 0)",
    "      );",
    "    }",
    "",
    "    getHexString(colorSpace = SRGBColorSpace) {",
    '      return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);',
    "    }",
    "",
    "    getHSL(target, colorSpace = ColorManagement.workingColorSpace) {",
    "      // h,s,l ranges are in 0.0 - 1.0",
    "",
    "      ColorManagement.fromWorkingColorSpace(",
    "        toComponents(this, _rgb$1),",
    "        colorSpace",
    "      );",
    "",
    "      const r = _rgb$1.r,",
    "        g = _rgb$1.g,",
    "        b = _rgb$1.b;",
    "",
    "      const max = Math.max(r, g, b);",
    "      const min = Math.min(r, g, b);",
    "",
    "      let hue, saturation;",
    "      const lightness = (min + max) / 2.0;",
    "",
    "      if (min === max) {",
    "        hue = 0;",
    "        saturation = 0;",
    "      } else {",
    "        const delta = max - min;",
    "",
    "        saturation =",
    "          lightness <= 0.5 ? delta / (max + min) : delta / (2 - max - min);",
    "",
    "        switch (max) {",
    "          case r:",
    "            hue = (g - b) / delta + (g < b ? 6 : 0);",
    "            break;",
    "          case g:",
    "            hue = (b - r) / delta + 2;",
    "            break;",
    "          case b:",
    "            hue = (r - g) / delta + 4;",
    "            break;",
    "        }",
    "",
    "        hue /= 6;",
    "      }",
    "",
    "      target.h = hue;",
    "      target.s = saturation;",
    "      target.l = lightness;",
    "",
    "      return target;",
    "    }",
    "",
    "    getRGB(target, colorSpace = ColorManagement.workingColorSpace) {",
    "      ColorManagement.fromWorkingColorSpace(",
    "        toComponents(this, _rgb$1),",
    "        colorSpace",
    "      );",
    "",
    "      target.r = _rgb$1.r;",
    "      target.g = _rgb$1.g;",
    "      target.b = _rgb$1.b;",
    "",
    "      return target;",
    "    }",
    "",
    "    getStyle(colorSpace = SRGBColorSpace) {",
    "      ColorManagement.fromWorkingColorSpace(",
    "        toComponents(this, _rgb$1),",
    "        colorSpace",
    "      );",
    "",
    "      if (colorSpace !== SRGBColorSpace) {",
    "        // Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).",
    "        return `color(${colorSpace} ${_rgb$1.r} ${_rgb$1.g} ${_rgb$1.b})`;",
    "      }",
    "",
    "      return `rgb(${",
    "        (_rgb$1.r * 255) | 0",
    "      },${(_rgb$1.g * 255) | 0},${(_rgb$1.b * 255) | 0})`;",
    "    }",
    "",
    "    offsetHSL(h, s, l) {",
    "      this.getHSL(_hslA);",
    "",
    "      _hslA.h += h;",
    "      _hslA.s += s;",
    "      _hslA.l += l;",
    "",
    "      this.setHSL(_hslA.h, _hslA.s, _hslA.l);",
    "",
    "      return this;",
    "    }",
    "",
    "    add(color) {",
    "      this.r += color.r;",
    "      this.g += color.g;",
    "      this.b += color.b;",
    "",
    "      return this;",
    "    }",
    "",
    "    addColors(color1, color2) {",
    "      this.r = color1.r + color2.r;",
    "      this.g = color1.g + color2.g;",
    "      this.b = color1.b + color2.b;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScalar(s) {",
    "      this.r += s;",
    "      this.g += s;",
    "      this.b += s;",
    "",
    "      return this;",
    "    }",
    "",
    "    sub(color) {",
    "      this.r = Math.max(0, this.r - color.r);",
    "      this.g = Math.max(0, this.g - color.g);",
    "      this.b = Math.max(0, this.b - color.b);",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(color) {",
    "      this.r *= color.r;",
    "      this.g *= color.g;",
    "      this.b *= color.b;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(s) {",
    "      this.r *= s;",
    "      this.g *= s;",
    "      this.b *= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerp(color, alpha) {",
    "      this.r += (color.r - this.r) * alpha;",
    "      this.g += (color.g - this.g) * alpha;",
    "      this.b += (color.b - this.b) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerpColors(color1, color2, alpha) {",
    "      this.r = color1.r + (color2.r - color1.r) * alpha;",
    "      this.g = color1.g + (color2.g - color1.g) * alpha;",
    "      this.b = color1.b + (color2.b - color1.b) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerpHSL(color, alpha) {",
    "      this.getHSL(_hslA);",
    "      color.getHSL(_hslB);",
    "",
    "      const h = lerp(_hslA.h, _hslB.h, alpha);",
    "      const s = lerp(_hslA.s, _hslB.s, alpha);",
    "      const l = lerp(_hslA.l, _hslB.l, alpha);",
    "",
    "      this.setHSL(h, s, l);",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(c) {",
    "      return c.r === this.r && c.g === this.g && c.b === this.b;",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      this.r = array[offset];",
    "      this.g = array[offset + 1];",
    "      this.b = array[offset + 2];",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this.r;",
    "      array[offset + 1] = this.g;",
    "      array[offset + 2] = this.b;",
    "",
    "      return array;",
    "    }",
    "",
    "    fromBufferAttribute(attribute, index) {",
    "      this.r = attribute.getX(index);",
    "      this.g = attribute.getY(index);",
    "      this.b = attribute.getZ(index);",
    "",
    "      return this;",
    "    }",
    "",
    "    toJSON() {",
    "      return this.getHex();",
    "    }",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this.r;",
    "      yield this.g;",
    "      yield this.b;",
    "    }",
    "  }",
    "",
    "  Color.NAMES = _colorKeywords;",
    "",
    "  let _canvas;",
    "",
    "  class ImageUtils {",
    "    static getDataURL(image) {",
    "      if (/^data:/i.test(image.src)) {",
    "        return image.src;",
    "      }",
    "",
    '      if (typeof HTMLCanvasElement == "undefined") {',
    "        return image.src;",
    "      }",
    "",
    "      let canvas;",
    "",
    "      if (image instanceof HTMLCanvasElement) {",
    "        canvas = image;",
    "      } else {",
    '        if (_canvas === undefined) _canvas = createElementNS("canvas");',
    "",
    "        _canvas.width = image.width;",
    "        _canvas.height = image.height;",
    "",
    '        const context = _canvas.getContext("2d");',
    "",
    "        if (image instanceof ImageData) {",
    "          context.putImageData(image, 0, 0);",
    "        } else {",
    "          context.drawImage(image, 0, 0, image.width, image.height);",
    "        }",
    "",
    "        canvas = _canvas;",
    "      }",
    "",
    "      if (canvas.width > 2048 || canvas.height > 2048) {",
    "        console.warn(",
    '          "THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",',
    "          image",
    "        );",
    "",
    '        return canvas.toDataURL("image/jpeg", 0.6);',
    "      } else {",
    '        return canvas.toDataURL("image/png");',
    "      }",
    "    }",
    "",
    "    static sRGBToLinear(image) {",
    "      if (",
    '        (typeof HTMLImageElement !== "undefined" &&',
    "          image instanceof HTMLImageElement) ||",
    '        (typeof HTMLCanvasElement !== "undefined" &&',
    "          image instanceof HTMLCanvasElement) ||",
    '        (typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap)',
    "      ) {",
    '        const canvas = createElementNS("canvas");',
    "",
    "        canvas.width = image.width;",
    "        canvas.height = image.height;",
    "",
    '        const context = canvas.getContext("2d");',
    "        context.drawImage(image, 0, 0, image.width, image.height);",
    "",
    "        const imageData = context.getImageData(0, 0, image.width, image.height);",
    "        const data = imageData.data;",
    "",
    "        for (let i = 0; i < data.length; i++) {",
    "          data[i] = SRGBToLinear(data[i] / 255) * 255;",
    "        }",
    "",
    "        context.putImageData(imageData, 0, 0);",
    "",
    "        return canvas;",
    "      } else if (image.data) {",
    "        const data = image.data.slice(0);",
    "",
    "        for (let i = 0; i < data.length; i++) {",
    "          if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {",
    "            data[i] = Math.floor(SRGBToLinear(data[i] / 255) * 255);",
    "          } else {",
    "            // assuming float",
    "",
    "            data[i] = SRGBToLinear(data[i]);",
    "          }",
    "        }",
    "",
    "        return {",
    "          data: data,",
    "          width: image.width,",
    "          height: image.height,",
    "        };",
    "      } else {",
    "        console.warn(",
    '          "THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."',
    "        );",
    "        return image;",
    "      }",
    "    }",
    "  }",
    "",
    "  class Source {",
    "    constructor(data = null) {",
    "      this.isSource = true;",
    "",
    "      this.uuid = generateUUID();",
    "",
    "      this.data = data;",
    "",
    "      this.version = 0;",
    "    }",
    "",
    "    set needsUpdate(value) {",
    "      if (value === true) this.version++;",
    "    }",
    "",
    "    toJSON(meta) {",
    '      const isRootObject = meta === undefined || typeof meta === "string";',
    "",
    "      if (!isRootObject && meta.images[this.uuid] !== undefined) {",
    "        return meta.images[this.uuid];",
    "      }",
    "",
    "      const output = {",
    "        uuid: this.uuid,",
    '        url: "",',
    "      };",
    "",
    "      const data = this.data;",
    "",
    "      if (data !== null) {",
    "        let url;",
    "",
    "        if (Array.isArray(data)) {",
    "          // cube texture",
    "",
    "          url = [];",
    "",
    "          for (let i = 0, l = data.length; i < l; i++) {",
    "            if (data[i].isDataTexture) {",
    "              url.push(serializeImage(data[i].image));",
    "            } else {",
    "              url.push(serializeImage(data[i]));",
    "            }",
    "          }",
    "        } else {",
    "          // texture",
    "",
    "          url = serializeImage(data);",
    "        }",
    "",
    "        output.url = url;",
    "      }",
    "",
    "      if (!isRootObject) {",
    "        meta.images[this.uuid] = output;",
    "      }",
    "",
    "      return output;",
    "    }",
    "  }",
    "",
    "  function serializeImage(image) {",
    "    if (",
    '      (typeof HTMLImageElement !== "undefined" &&',
    "        image instanceof HTMLImageElement) ||",
    '      (typeof HTMLCanvasElement !== "undefined" &&',
    "        image instanceof HTMLCanvasElement) ||",
    '      (typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap)',
    "    ) {",
    "      // default images",
    "",
    "      return ImageUtils.getDataURL(image);",
    "    } else {",
    "      if (image.data) {",
    "        // images of DataTexture",
    "",
    "        return {",
    "          data: Array.from(image.data),",
    "          width: image.width,",
    "          height: image.height,",
    "          type: image.data.constructor.name,",
    "        };",
    "      } else {",
    '        console.warn("THREE.Texture: Unable to serialize Texture.");',
    "        return {};",
    "      }",
    "    }",
    "  }",
    "",
    "  let textureId = 0;",
    "",
    "  class Texture extends EventDispatcher {",
    "    constructor(",
    "      image = Texture.DEFAULT_IMAGE,",
    "      mapping = Texture.DEFAULT_MAPPING,",
    "      wrapS = ClampToEdgeWrapping,",
    "      wrapT = ClampToEdgeWrapping,",
    "      magFilter = LinearFilter,",
    "      minFilter = LinearMipmapLinearFilter,",
    "      format = RGBAFormat,",
    "      type = UnsignedByteType,",
    "      anisotropy = Texture.DEFAULT_ANISOTROPY,",
    "      encoding = LinearEncoding",
    "    ) {",
    "      super();",
    "",
    "      this.isTexture = true;",
    "",
    '      Object.defineProperty(this, "id", { value: textureId++ });',
    "",
    "      this.uuid = generateUUID();",
    "",
    '      this.name = "";',
    "",
    "      this.source = new Source(image);",
    "      this.mipmaps = [];",
    "",
    "      this.mapping = mapping;",
    "",
    "      this.wrapS = wrapS;",
    "      this.wrapT = wrapT;",
    "",
    "      this.magFilter = magFilter;",
    "      this.minFilter = minFilter;",
    "",
    "      this.anisotropy = anisotropy;",
    "",
    "      this.format = format;",
    "      this.internalFormat = null;",
    "      this.type = type;",
    "",
    "      this.offset = new Vector2(0, 0);",
    "      this.repeat = new Vector2(1, 1);",
    "      this.center = new Vector2(0, 0);",
    "      this.rotation = 0;",
    "",
    "      this.matrixAutoUpdate = true;",
    "      this.matrix = new Matrix3();",
    "",
    "      this.generateMipmaps = true;",
    "      this.premultiplyAlpha = false;",
    "      this.flipY = true;",
    "      this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)",
    "",
    "      // Values of encoding !== THREE.LinearEncoding only supported on map, envMap and emissiveMap.",
    "      //",
    "      // Also changing the encoding after already used by a Material will not automatically make the Material",
    "      // update. You need to explicitly call Material.needsUpdate to trigger it to recompile.",
    "      this.encoding = encoding;",
    "",
    "      this.userData = {};",
    "",
    "      this.version = 0;",
    "      this.onUpdate = null;",
    "",
    "      this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not",
    "      this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)",
    "    }",
    "",
    "    get image() {",
    "      return this.source.data;",
    "    }",
    "",
    "    set image(value) {",
    "      this.source.data = value;",
    "    }",
    "",
    "    updateMatrix() {",
    "      this.matrix.setUvTransform(",
    "        this.offset.x,",
    "        this.offset.y,",
    "        this.repeat.x,",
    "        this.repeat.y,",
    "        this.rotation,",
    "        this.center.x,",
    "        this.center.y",
    "      );",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(source) {",
    "      this.name = source.name;",
    "",
    "      this.source = source.source;",
    "      this.mipmaps = source.mipmaps.slice(0);",
    "",
    "      this.mapping = source.mapping;",
    "",
    "      this.wrapS = source.wrapS;",
    "      this.wrapT = source.wrapT;",
    "",
    "      this.magFilter = source.magFilter;",
    "      this.minFilter = source.minFilter;",
    "",
    "      this.anisotropy = source.anisotropy;",
    "",
    "      this.format = source.format;",
    "      this.internalFormat = source.internalFormat;",
    "      this.type = source.type;",
    "",
    "      this.offset.copy(source.offset);",
    "      this.repeat.copy(source.repeat);",
    "      this.center.copy(source.center);",
    "      this.rotation = source.rotation;",
    "",
    "      this.matrixAutoUpdate = source.matrixAutoUpdate;",
    "      this.matrix.copy(source.matrix);",
    "",
    "      this.generateMipmaps = source.generateMipmaps;",
    "      this.premultiplyAlpha = source.premultiplyAlpha;",
    "      this.flipY = source.flipY;",
    "      this.unpackAlignment = source.unpackAlignment;",
    "      this.encoding = source.encoding;",
    "",
    "      this.userData = JSON.parse(JSON.stringify(source.userData));",
    "",
    "      this.needsUpdate = true;",
    "",
    "      return this;",
    "    }",
    "",
    "    toJSON(meta) {",
    '      const isRootObject = meta === undefined || typeof meta === "string";',
    "",
    "      if (!isRootObject && meta.textures[this.uuid] !== undefined) {",
    "        return meta.textures[this.uuid];",
    "      }",
    "",
    "      const output = {",
    "        metadata: {",
    "          version: 4.5,",
    '          type: "Texture",',
    '          generator: "Texture.toJSON",',
    "        },",
    "",
    "        uuid: this.uuid,",
    "        name: this.name,",
    "",
    "        image: this.source.toJSON(meta).uuid,",
    "",
    "        mapping: this.mapping,",
    "",
    "        repeat: [this.repeat.x, this.repeat.y],",
    "        offset: [this.offset.x, this.offset.y],",
    "        center: [this.center.x, this.center.y],",
    "        rotation: this.rotation,",
    "",
    "        wrap: [this.wrapS, this.wrapT],",
    "",
    "        format: this.format,",
    "        type: this.type,",
    "        encoding: this.encoding,",
    "",
    "        minFilter: this.minFilter,",
    "        magFilter: this.magFilter,",
    "        anisotropy: this.anisotropy,",
    "",
    "        flipY: this.flipY,",
    "",
    "        generateMipmaps: this.generateMipmaps,",
    "        premultiplyAlpha: this.premultiplyAlpha,",
    "        unpackAlignment: this.unpackAlignment,",
    "      };",
    "",
    "      if (Object.keys(this.userData).length > 0)",
    "        output.userData = this.userData;",
    "",
    "      if (!isRootObject) {",
    "        meta.textures[this.uuid] = output;",
    "      }",
    "",
    "      return output;",
    "    }",
    "",
    "    dispose() {",
    '      this.dispatchEvent({ type: "dispose" });',
    "    }",
    "",
    "    transformUv(uv) {",
    "      if (this.mapping !== UVMapping) return uv;",
    "",
    "      uv.applyMatrix3(this.matrix);",
    "",
    "      if (uv.x < 0 || uv.x > 1) {",
    "        switch (this.wrapS) {",
    "          case RepeatWrapping:",
    "            uv.x = uv.x - Math.floor(uv.x);",
    "            break;",
    "",
    "          case ClampToEdgeWrapping:",
    "            uv.x = uv.x < 0 ? 0 : 1;",
    "            break;",
    "",
    "          case MirroredRepeatWrapping:",
    "            if (Math.abs(Math.floor(uv.x) % 2) === 1) {",
    "              uv.x = Math.ceil(uv.x) - uv.x;",
    "            } else {",
    "              uv.x = uv.x - Math.floor(uv.x);",
    "            }",
    "",
    "            break;",
    "        }",
    "      }",
    "",
    "      if (uv.y < 0 || uv.y > 1) {",
    "        switch (this.wrapT) {",
    "          case RepeatWrapping:",
    "            uv.y = uv.y - Math.floor(uv.y);",
    "            break;",
    "",
    "          case ClampToEdgeWrapping:",
    "            uv.y = uv.y < 0 ? 0 : 1;",
    "            break;",
    "",
    "          case MirroredRepeatWrapping:",
    "            if (Math.abs(Math.floor(uv.y) % 2) === 1) {",
    "              uv.y = Math.ceil(uv.y) - uv.y;",
    "            } else {",
    "              uv.y = uv.y - Math.floor(uv.y);",
    "            }",
    "",
    "            break;",
    "        }",
    "      }",
    "",
    "      if (this.flipY) {",
    "        uv.y = 1 - uv.y;",
    "      }",
    "",
    "      return uv;",
    "    }",
    "",
    "    set needsUpdate(value) {",
    "      if (value === true) {",
    "        this.version++;",
    "        this.source.needsUpdate = true;",
    "      }",
    "    }",
    "  }",
    "",
    "  Texture.DEFAULT_IMAGE = null;",
    "  Texture.DEFAULT_MAPPING = UVMapping;",
    "  Texture.DEFAULT_ANISOTROPY = 1;",
    "",
    "  class Vector4 {",
    "    constructor(x = 0, y = 0, z = 0, w = 1) {",
    "      Vector4.prototype.isVector4 = true;",
    "",
    "      this.x = x;",
    "      this.y = y;",
    "      this.z = z;",
    "      this.w = w;",
    "    }",
    "",
    "    get width() {",
    "      return this.z;",
    "    }",
    "",
    "    set width(value) {",
    "      this.z = value;",
    "    }",
    "",
    "    get height() {",
    "      return this.w;",
    "    }",
    "",
    "    set height(value) {",
    "      this.w = value;",
    "    }",
    "",
    "    set(x, y, z, w) {",
    "      this.x = x;",
    "      this.y = y;",
    "      this.z = z;",
    "      this.w = w;",
    "",
    "      return this;",
    "    }",
    "",
    "    setScalar(scalar) {",
    "      this.x = scalar;",
    "      this.y = scalar;",
    "      this.z = scalar;",
    "      this.w = scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    setX(x) {",
    "      this.x = x;",
    "",
    "      return this;",
    "    }",
    "",
    "    setY(y) {",
    "      this.y = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    setZ(z) {",
    "      this.z = z;",
    "",
    "      return this;",
    "    }",
    "",
    "    setW(w) {",
    "      this.w = w;",
    "",
    "      return this;",
    "    }",
    "",
    "    setComponent(index, value) {",
    "      switch (index) {",
    "        case 0:",
    "          this.x = value;",
    "          break;",
    "        case 1:",
    "          this.y = value;",
    "          break;",
    "        case 2:",
    "          this.z = value;",
    "          break;",
    "        case 3:",
    "          this.w = value;",
    "          break;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    getComponent(index) {",
    "      switch (index) {",
    "        case 0:",
    "          return this.x;",
    "        case 1:",
    "          return this.y;",
    "        case 2:",
    "          return this.z;",
    "        case 3:",
    "          return this.w;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this.x, this.y, this.z, this.w);",
    "    }",
    "",
    "    copy(v) {",
    "      this.x = v.x;",
    "      this.y = v.y;",
    "      this.z = v.z;",
    "      this.w = v.w !== undefined ? v.w : 1;",
    "",
    "      return this;",
    "    }",
    "",
    "    add(v) {",
    "      this.x += v.x;",
    "      this.y += v.y;",
    "      this.z += v.z;",
    "      this.w += v.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScalar(s) {",
    "      this.x += s;",
    "      this.y += s;",
    "      this.z += s;",
    "      this.w += s;",
    "",
    "      return this;",
    "    }",
    "",
    "    addVectors(a, b) {",
    "      this.x = a.x + b.x;",
    "      this.y = a.y + b.y;",
    "      this.z = a.z + b.z;",
    "      this.w = a.w + b.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScaledVector(v, s) {",
    "      this.x += v.x * s;",
    "      this.y += v.y * s;",
    "      this.z += v.z * s;",
    "      this.w += v.w * s;",
    "",
    "      return this;",
    "    }",
    "",
    "    sub(v) {",
    "      this.x -= v.x;",
    "      this.y -= v.y;",
    "      this.z -= v.z;",
    "      this.w -= v.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    subScalar(s) {",
    "      this.x -= s;",
    "      this.y -= s;",
    "      this.z -= s;",
    "      this.w -= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    subVectors(a, b) {",
    "      this.x = a.x - b.x;",
    "      this.y = a.y - b.y;",
    "      this.z = a.z - b.z;",
    "      this.w = a.w - b.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(v) {",
    "      this.x *= v.x;",
    "      this.y *= v.y;",
    "      this.z *= v.z;",
    "      this.w *= v.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(scalar) {",
    "      this.x *= scalar;",
    "      this.y *= scalar;",
    "      this.z *= scalar;",
    "      this.w *= scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    applyMatrix4(m) {",
    "      const x = this.x,",
    "        y = this.y,",
    "        z = this.z,",
    "        w = this.w;",
    "      const e = m.elements;",
    "",
    "      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;",
    "      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;",
    "      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;",
    "      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;",
    "",
    "      return this;",
    "    }",
    "",
    "    divideScalar(scalar) {",
    "      return this.multiplyScalar(1 / scalar);",
    "    }",
    "",
    "    setAxisAngleFromQuaternion(q) {",
    "      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm",
    "",
    "      // q is assumed to be normalized",
    "",
    "      this.w = 2 * Math.acos(q.w);",
    "",
    "      const s = Math.sqrt(1 - q.w * q.w);",
    "",
    "      if (s < 0.0001) {",
    "        this.x = 1;",
    "        this.y = 0;",
    "        this.z = 0;",
    "      } else {",
    "        this.x = q.x / s;",
    "        this.y = q.y / s;",
    "        this.z = q.z / s;",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    setAxisAngleFromRotationMatrix(m) {",
    "      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm",
    "",
    "      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)",
    "",
    "      let angle, x, y, z; // variables for result",
    "      const epsilon = 0.01, // margin to allow for rounding errors",
    "        epsilon2 = 0.1, // margin to distinguish between 0 and 180 degrees",
    "        te = m.elements,",
    "        m11 = te[0],",
    "        m12 = te[4],",
    "        m13 = te[8],",
    "        m21 = te[1],",
    "        m22 = te[5],",
    "        m23 = te[9],",
    "        m31 = te[2],",
    "        m32 = te[6],",
    "        m33 = te[10];",
    "",
    "      if (",
    "        Math.abs(m12 - m21) < epsilon &&",
    "        Math.abs(m13 - m31) < epsilon &&",
    "        Math.abs(m23 - m32) < epsilon",
    "      ) {",
    "        // singularity found",
    "        // first check for identity matrix which must have +1 for all terms",
    "        // in leading diagonal and zero in other terms",
    "",
    "        if (",
    "          Math.abs(m12 + m21) < epsilon2 &&",
    "          Math.abs(m13 + m31) < epsilon2 &&",
    "          Math.abs(m23 + m32) < epsilon2 &&",
    "          Math.abs(m11 + m22 + m33 - 3) < epsilon2",
    "        ) {",
    "          // this singularity is identity matrix so angle = 0",
    "",
    "          this.set(1, 0, 0, 0);",
    "",
    "          return this; // zero angle, arbitrary axis",
    "        }",
    "",
    "        // otherwise this singularity is angle = 180",
    "",
    "        angle = Math.PI;",
    "",
    "        const xx = (m11 + 1) / 2;",
    "        const yy = (m22 + 1) / 2;",
    "        const zz = (m33 + 1) / 2;",
    "        const xy = (m12 + m21) / 4;",
    "        const xz = (m13 + m31) / 4;",
    "        const yz = (m23 + m32) / 4;",
    "",
    "        if (xx > yy && xx > zz) {",
    "          // m11 is the largest diagonal term",
    "",
    "          if (xx < epsilon) {",
    "            x = 0;",
    "            y = 0.707106781;",
    "            z = 0.707106781;",
    "          } else {",
    "            x = Math.sqrt(xx);",
    "            y = xy / x;",
    "            z = xz / x;",
    "          }",
    "        } else if (yy > zz) {",
    "          // m22 is the largest diagonal term",
    "",
    "          if (yy < epsilon) {",
    "            x = 0.707106781;",
    "            y = 0;",
    "            z = 0.707106781;",
    "          } else {",
    "            y = Math.sqrt(yy);",
    "            x = xy / y;",
    "            z = yz / y;",
    "          }",
    "        } else {",
    "          // m33 is the largest diagonal term so base result on this",
    "",
    "          if (zz < epsilon) {",
    "            x = 0.707106781;",
    "            y = 0.707106781;",
    "            z = 0;",
    "          } else {",
    "            z = Math.sqrt(zz);",
    "            x = xz / z;",
    "            y = yz / z;",
    "          }",
    "        }",
    "",
    "        this.set(x, y, z, angle);",
    "",
    "        return this; // return 180 deg rotation",
    "      }",
    "",
    "      // as we have reached here there are no singularities so we can handle normally",
    "",
    "      let s = Math.sqrt(",
    "        (m32 - m23) * (m32 - m23) +",
    "          (m13 - m31) * (m13 - m31) +",
    "          (m21 - m12) * (m21 - m12)",
    "      ); // used to normalize",
    "",
    "      if (Math.abs(s) < 0.001) s = 1;",
    "",
    "      // prevent divide by zero, should not happen if matrix is orthogonal and should be",
    "      // caught by singularity test above, but I've left it in just in case",
    "",
    "      this.x = (m32 - m23) / s;",
    "      this.y = (m13 - m31) / s;",
    "      this.z = (m21 - m12) / s;",
    "      this.w = Math.acos((m11 + m22 + m33 - 1) / 2);",
    "",
    "      return this;",
    "    }",
    "",
    "    min(v) {",
    "      this.x = Math.min(this.x, v.x);",
    "      this.y = Math.min(this.y, v.y);",
    "      this.z = Math.min(this.z, v.z);",
    "      this.w = Math.min(this.w, v.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    max(v) {",
    "      this.x = Math.max(this.x, v.x);",
    "      this.y = Math.max(this.y, v.y);",
    "      this.z = Math.max(this.z, v.z);",
    "      this.w = Math.max(this.w, v.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    clamp(min, max) {",
    "      // assumes min < max, componentwise",
    "",
    "      this.x = Math.max(min.x, Math.min(max.x, this.x));",
    "      this.y = Math.max(min.y, Math.min(max.y, this.y));",
    "      this.z = Math.max(min.z, Math.min(max.z, this.z));",
    "      this.w = Math.max(min.w, Math.min(max.w, this.w));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampScalar(minVal, maxVal) {",
    "      this.x = Math.max(minVal, Math.min(maxVal, this.x));",
    "      this.y = Math.max(minVal, Math.min(maxVal, this.y));",
    "      this.z = Math.max(minVal, Math.min(maxVal, this.z));",
    "      this.w = Math.max(minVal, Math.min(maxVal, this.w));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampLength(min, max) {",
    "      const length = this.length();",
    "",
    "      return this.divideScalar(length || 1).multiplyScalar(",
    "        Math.max(min, Math.min(max, length))",
    "      );",
    "    }",
    "",
    "    floor() {",
    "      this.x = Math.floor(this.x);",
    "      this.y = Math.floor(this.y);",
    "      this.z = Math.floor(this.z);",
    "      this.w = Math.floor(this.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    ceil() {",
    "      this.x = Math.ceil(this.x);",
    "      this.y = Math.ceil(this.y);",
    "      this.z = Math.ceil(this.z);",
    "      this.w = Math.ceil(this.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    round() {",
    "      this.x = Math.round(this.x);",
    "      this.y = Math.round(this.y);",
    "      this.z = Math.round(this.z);",
    "      this.w = Math.round(this.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    roundToZero() {",
    "      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);",
    "      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);",
    "      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);",
    "      this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w);",
    "",
    "      return this;",
    "    }",
    "",
    "    negate() {",
    "      this.x = -this.x;",
    "      this.y = -this.y;",
    "      this.z = -this.z;",
    "      this.w = -this.w;",
    "",
    "      return this;",
    "    }",
    "",
    "    dot(v) {",
    "      return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;",
    "    }",
    "",
    "    lengthSq() {",
    "      return (",
    "        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w",
    "      );",
    "    }",
    "",
    "    length() {",
    "      return Math.sqrt(",
    "        this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w",
    "      );",
    "    }",
    "",
    "    manhattanLength() {",
    "      return (",
    "        Math.abs(this.x) +",
    "        Math.abs(this.y) +",
    "        Math.abs(this.z) +",
    "        Math.abs(this.w)",
    "      );",
    "    }",
    "",
    "    normalize() {",
    "      return this.divideScalar(this.length() || 1);",
    "    }",
    "",
    "    setLength(length) {",
    "      return this.normalize().multiplyScalar(length);",
    "    }",
    "",
    "    lerp(v, alpha) {",
    "      this.x += (v.x - this.x) * alpha;",
    "      this.y += (v.y - this.y) * alpha;",
    "      this.z += (v.z - this.z) * alpha;",
    "      this.w += (v.w - this.w) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerpVectors(v1, v2, alpha) {",
    "      this.x = v1.x + (v2.x - v1.x) * alpha;",
    "      this.y = v1.y + (v2.y - v1.y) * alpha;",
    "      this.z = v1.z + (v2.z - v1.z) * alpha;",
    "      this.w = v1.w + (v2.w - v1.w) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(v) {",
    "      return (",
    "        v.x === this.x && v.y === this.y && v.z === this.z && v.w === this.w",
    "      );",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      this.x = array[offset];",
    "      this.y = array[offset + 1];",
    "      this.z = array[offset + 2];",
    "      this.w = array[offset + 3];",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this.x;",
    "      array[offset + 1] = this.y;",
    "      array[offset + 2] = this.z;",
    "      array[offset + 3] = this.w;",
    "",
    "      return array;",
    "    }",
    "",
    "    fromBufferAttribute(attribute, index) {",
    "      this.x = attribute.getX(index);",
    "      this.y = attribute.getY(index);",
    "      this.z = attribute.getZ(index);",
    "      this.w = attribute.getW(index);",
    "",
    "      return this;",
    "    }",
    "",
    "    random() {",
    "      this.x = Math.random();",
    "      this.y = Math.random();",
    "      this.z = Math.random();",
    "      this.w = Math.random();",
    "",
    "      return this;",
    "    }",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this.x;",
    "      yield this.y;",
    "      yield this.z;",
    "      yield this.w;",
    "    }",
    "  }",
    "",
    "  /*",
    "	 In options, we can specify:",
    "	 * Texture parameters for an auto-generated target texture",
    "	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers",
    "	*/",
    "  class WebGLRenderTarget extends EventDispatcher {",
    "    constructor(width = 1, height = 1, options = {}) {",
    "      super();",
    "",
    "      this.isWebGLRenderTarget = true;",
    "",
    "      this.width = width;",
    "      this.height = height;",
    "      this.depth = 1;",
    "",
    "      this.scissor = new Vector4(0, 0, width, height);",
    "      this.scissorTest = false;",
    "",
    "      this.viewport = new Vector4(0, 0, width, height);",
    "",
    "      const image = { width: width, height: height, depth: 1 };",
    "",
    "      this.texture = new Texture(",
    "        image,",
    "        options.mapping,",
    "        options.wrapS,",
    "        options.wrapT,",
    "        options.magFilter,",
    "        options.minFilter,",
    "        options.format,",
    "        options.type,",
    "        options.anisotropy,",
    "        options.encoding",
    "      );",
    "      this.texture.isRenderTargetTexture = true;",
    "",
    "      this.texture.flipY = false;",
    "      this.texture.generateMipmaps =",
    "        options.generateMipmaps !== undefined ? options.generateMipmaps : false;",
    "      this.texture.internalFormat =",
    "        options.internalFormat !== undefined ? options.internalFormat : null;",
    "      this.texture.minFilter =",
    "        options.minFilter !== undefined ? options.minFilter : LinearFilter;",
    "",
    "      this.depthBuffer =",
    "        options.depthBuffer !== undefined ? options.depthBuffer : true;",
    "      this.stencilBuffer =",
    "        options.stencilBuffer !== undefined ? options.stencilBuffer : false;",
    "",
    "      this.depthTexture =",
    "        options.depthTexture !== undefined ? options.depthTexture : null;",
    "",
    "      this.samples = options.samples !== undefined ? options.samples : 0;",
    "    }",
    "",
    "    setSize(width, height, depth = 1) {",
    "      if (",
    "        this.width !== width ||",
    "        this.height !== height ||",
    "        this.depth !== depth",
    "      ) {",
    "        this.width = width;",
    "        this.height = height;",
    "        this.depth = depth;",
    "",
    "        this.texture.image.width = width;",
    "        this.texture.image.height = height;",
    "        this.texture.image.depth = depth;",
    "",
    "        this.dispose();",
    "      }",
    "",
    "      this.viewport.set(0, 0, width, height);",
    "      this.scissor.set(0, 0, width, height);",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(source) {",
    "      this.width = source.width;",
    "      this.height = source.height;",
    "      this.depth = source.depth;",
    "",
    "      this.viewport.copy(source.viewport);",
    "",
    "      this.texture = source.texture.clone();",
    "      this.texture.isRenderTargetTexture = true;",
    "",
    "      // ensure image object is not shared, see #20328",
    "",
    "      const image = Object.assign({}, source.texture.image);",
    "      this.texture.source = new Source(image);",
    "",
    "      this.depthBuffer = source.depthBuffer;",
    "      this.stencilBuffer = source.stencilBuffer;",
    "",
    "      if (source.depthTexture !== null)",
    "        this.depthTexture = source.depthTexture.clone();",
    "",
    "      this.samples = source.samples;",
    "",
    "      return this;",
    "    }",
    "",
    "    dispose() {",
    '      this.dispatchEvent({ type: "dispose" });',
    "    }",
    "  }",
    "",
    "  class DataArrayTexture extends Texture {",
    "    constructor(data = null, width = 1, height = 1, depth = 1) {",
    "      super(null);",
    "",
    "      this.isDataArrayTexture = true;",
    "",
    "      this.image = { data, width, height, depth };",
    "",
    "      this.magFilter = NearestFilter;",
    "      this.minFilter = NearestFilter;",
    "",
    "      this.wrapR = ClampToEdgeWrapping;",
    "",
    "      this.generateMipmaps = false;",
    "      this.flipY = false;",
    "      this.unpackAlignment = 1;",
    "    }",
    "  }",
    "",
    "  class WebGLArrayRenderTarget extends WebGLRenderTarget {",
    "    constructor(width = 1, height = 1, depth = 1) {",
    "      super(width, height);",
    "",
    "      this.isWebGLArrayRenderTarget = true;",
    "",
    "      this.depth = depth;",
    "",
    "      this.texture = new DataArrayTexture(null, width, height, depth);",
    "",
    "      this.texture.isRenderTargetTexture = true;",
    "    }",
    "  }",
    "",
    "  class Data3DTexture extends Texture {",
    "    constructor(data = null, width = 1, height = 1, depth = 1) {",
    "      // We're going to add .setXXX() methods for setting properties later.",
    "      // Users can still set in DataTexture3D directly.",
    "      //",
    "      //	const texture = new THREE.DataTexture3D( data, width, height, depth );",
    "      // 	texture.anisotropy = 16;",
    "      //",
    "      // See #14839",
    "",
    "      super(null);",
    "",
    "      this.isData3DTexture = true;",
    "",
    "      this.image = { data, width, height, depth };",
    "",
    "      this.magFilter = NearestFilter;",
    "      this.minFilter = NearestFilter;",
    "",
    "      this.wrapR = ClampToEdgeWrapping;",
    "",
    "      this.generateMipmaps = false;",
    "      this.flipY = false;",
    "      this.unpackAlignment = 1;",
    "    }",
    "  }",
    "",
    "  class WebGL3DRenderTarget extends WebGLRenderTarget {",
    "    constructor(width = 1, height = 1, depth = 1) {",
    "      super(width, height);",
    "",
    "      this.isWebGL3DRenderTarget = true;",
    "",
    "      this.depth = depth;",
    "",
    "      this.texture = new Data3DTexture(null, width, height, depth);",
    "",
    "      this.texture.isRenderTargetTexture = true;",
    "    }",
    "  }",
    "",
    "  class WebGLMultipleRenderTargets extends WebGLRenderTarget {",
    "    constructor(width = 1, height = 1, count = 1, options = {}) {",
    "      super(width, height, options);",
    "",
    "      this.isWebGLMultipleRenderTargets = true;",
    "",
    "      const texture = this.texture;",
    "",
    "      this.texture = [];",
    "",
    "      for (let i = 0; i < count; i++) {",
    "        this.texture[i] = texture.clone();",
    "        this.texture[i].isRenderTargetTexture = true;",
    "      }",
    "    }",
    "",
    "    setSize(width, height, depth = 1) {",
    "      if (",
    "        this.width !== width ||",
    "        this.height !== height ||",
    "        this.depth !== depth",
    "      ) {",
    "        this.width = width;",
    "        this.height = height;",
    "        this.depth = depth;",
    "",
    "        for (let i = 0, il = this.texture.length; i < il; i++) {",
    "          this.texture[i].image.width = width;",
    "          this.texture[i].image.height = height;",
    "          this.texture[i].image.depth = depth;",
    "        }",
    "",
    "        this.dispose();",
    "      }",
    "",
    "      this.viewport.set(0, 0, width, height);",
    "      this.scissor.set(0, 0, width, height);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(source) {",
    "      this.dispose();",
    "",
    "      this.width = source.width;",
    "      this.height = source.height;",
    "      this.depth = source.depth;",
    "",
    "      this.viewport.set(0, 0, this.width, this.height);",
    "      this.scissor.set(0, 0, this.width, this.height);",
    "",
    "      this.depthBuffer = source.depthBuffer;",
    "      this.stencilBuffer = source.stencilBuffer;",
    "",
    "      if (source.depthTexture !== null)",
    "        this.depthTexture = source.depthTexture.clone();",
    "",
    "      this.texture.length = 0;",
    "",
    "      for (let i = 0, il = source.texture.length; i < il; i++) {",
    "        this.texture[i] = source.texture[i].clone();",
    "        this.texture[i].isRenderTargetTexture = true;",
    "      }",
    "",
    "      return this;",
    "    }",
    "  }",
    "",
    "  class Quaternion {",
    "    constructor(x = 0, y = 0, z = 0, w = 1) {",
    "      this.isQuaternion = true;",
    "",
    "      this._x = x;",
    "      this._y = y;",
    "      this._z = z;",
    "      this._w = w;",
    "    }",
    "",
    "    static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t) {",
    "      // fuzz-free, array-based Quaternion SLERP operation",
    "",
    "      let x0 = src0[srcOffset0 + 0],",
    "        y0 = src0[srcOffset0 + 1],",
    "        z0 = src0[srcOffset0 + 2],",
    "        w0 = src0[srcOffset0 + 3];",
    "",
    "      const x1 = src1[srcOffset1 + 0],",
    "        y1 = src1[srcOffset1 + 1],",
    "        z1 = src1[srcOffset1 + 2],",
    "        w1 = src1[srcOffset1 + 3];",
    "",
    "      if (t === 0) {",
    "        dst[dstOffset + 0] = x0;",
    "        dst[dstOffset + 1] = y0;",
    "        dst[dstOffset + 2] = z0;",
    "        dst[dstOffset + 3] = w0;",
    "        return;",
    "      }",
    "",
    "      if (t === 1) {",
    "        dst[dstOffset + 0] = x1;",
    "        dst[dstOffset + 1] = y1;",
    "        dst[dstOffset + 2] = z1;",
    "        dst[dstOffset + 3] = w1;",
    "        return;",
    "      }",
    "",
    "      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1) {",
    "        let s = 1 - t;",
    "        const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,",
    "          dir = cos >= 0 ? 1 : -1,",
    "          sqrSin = 1 - cos * cos;",
    "",
    "        // Skip the Slerp for tiny steps to avoid numeric problems:",
    "        if (sqrSin > Number.EPSILON) {",
    "          const sin = Math.sqrt(sqrSin),",
    "            len = Math.atan2(sin, cos * dir);",
    "",
    "          s = Math.sin(s * len) / sin;",
    "          t = Math.sin(t * len) / sin;",
    "        }",
    "",
    "        const tDir = t * dir;",
    "",
    "        x0 = x0 * s + x1 * tDir;",
    "        y0 = y0 * s + y1 * tDir;",
    "        z0 = z0 * s + z1 * tDir;",
    "        w0 = w0 * s + w1 * tDir;",
    "",
    "        // Normalize in case we just did a lerp:",
    "        if (s === 1 - t) {",
    "          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0);",
    "",
    "          x0 *= f;",
    "          y0 *= f;",
    "          z0 *= f;",
    "          w0 *= f;",
    "        }",
    "      }",
    "",
    "      dst[dstOffset] = x0;",
    "      dst[dstOffset + 1] = y0;",
    "      dst[dstOffset + 2] = z0;",
    "      dst[dstOffset + 3] = w0;",
    "    }",
    "",
    "    static multiplyQuaternionsFlat(",
    "      dst,",
    "      dstOffset,",
    "      src0,",
    "      srcOffset0,",
    "      src1,",
    "      srcOffset1",
    "    ) {",
    "      const x0 = src0[srcOffset0];",
    "      const y0 = src0[srcOffset0 + 1];",
    "      const z0 = src0[srcOffset0 + 2];",
    "      const w0 = src0[srcOffset0 + 3];",
    "",
    "      const x1 = src1[srcOffset1];",
    "      const y1 = src1[srcOffset1 + 1];",
    "      const z1 = src1[srcOffset1 + 2];",
    "      const w1 = src1[srcOffset1 + 3];",
    "",
    "      dst[dstOffset] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;",
    "      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;",
    "      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;",
    "      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;",
    "",
    "      return dst;",
    "    }",
    "",
    "    get x() {",
    "      return this._x;",
    "    }",
    "",
    "    set x(value) {",
    "      this._x = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get y() {",
    "      return this._y;",
    "    }",
    "",
    "    set y(value) {",
    "      this._y = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get z() {",
    "      return this._z;",
    "    }",
    "",
    "    set z(value) {",
    "      this._z = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get w() {",
    "      return this._w;",
    "    }",
    "",
    "    set w(value) {",
    "      this._w = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    set(x, y, z, w) {",
    "      this._x = x;",
    "      this._y = y;",
    "      this._z = z;",
    "      this._w = w;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this._x, this._y, this._z, this._w);",
    "    }",
    "",
    "    copy(quaternion) {",
    "      this._x = quaternion.x;",
    "      this._y = quaternion.y;",
    "      this._z = quaternion.z;",
    "      this._w = quaternion.w;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromEuler(euler, update) {",
    "      const x = euler._x,",
    "        y = euler._y,",
    "        z = euler._z,",
    "        order = euler._order;",
    "",
    "      // http://www.mathworks.com/matlabcentral/fileexchange/",
    "      // 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/",
    "      //	content/SpinCalc.m",
    "",
    "      const cos = Math.cos;",
    "      const sin = Math.sin;",
    "",
    "      const c1 = cos(x / 2);",
    "      const c2 = cos(y / 2);",
    "      const c3 = cos(z / 2);",
    "",
    "      const s1 = sin(x / 2);",
    "      const s2 = sin(y / 2);",
    "      const s3 = sin(z / 2);",
    "",
    "      switch (order) {",
    '        case "XYZ":',
    "          this._x = s1 * c2 * c3 + c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 - s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 + s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 - s1 * s2 * s3;",
    "          break;",
    "",
    '        case "YXZ":',
    "          this._x = s1 * c2 * c3 + c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 - s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 - s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 + s1 * s2 * s3;",
    "          break;",
    "",
    '        case "ZXY":',
    "          this._x = s1 * c2 * c3 - c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 + s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 + s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 - s1 * s2 * s3;",
    "          break;",
    "",
    '        case "ZYX":',
    "          this._x = s1 * c2 * c3 - c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 + s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 - s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 + s1 * s2 * s3;",
    "          break;",
    "",
    '        case "YZX":',
    "          this._x = s1 * c2 * c3 + c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 + s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 - s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 - s1 * s2 * s3;",
    "          break;",
    "",
    '        case "XZY":',
    "          this._x = s1 * c2 * c3 - c1 * s2 * s3;",
    "          this._y = c1 * s2 * c3 - s1 * c2 * s3;",
    "          this._z = c1 * c2 * s3 + s1 * s2 * c3;",
    "          this._w = c1 * c2 * c3 + s1 * s2 * s3;",
    "          break;",
    "",
    "        default:",
    "          console.warn(",
    '            "THREE.Quaternion: .setFromEuler() encountered an unknown order: " +',
    "              order",
    "          );",
    "      }",
    "",
    "      if (update !== false) this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromAxisAngle(axis, angle) {",
    "      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm",
    "",
    "      // assumes axis is normalized",
    "",
    "      const halfAngle = angle / 2,",
    "        s = Math.sin(halfAngle);",
    "",
    "      this._x = axis.x * s;",
    "      this._y = axis.y * s;",
    "      this._z = axis.z * s;",
    "      this._w = Math.cos(halfAngle);",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromRotationMatrix(m) {",
    "      // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm",
    "",
    "      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)",
    "",
    "      const te = m.elements,",
    "        m11 = te[0],",
    "        m12 = te[4],",
    "        m13 = te[8],",
    "        m21 = te[1],",
    "        m22 = te[5],",
    "        m23 = te[9],",
    "        m31 = te[2],",
    "        m32 = te[6],",
    "        m33 = te[10],",
    "        trace = m11 + m22 + m33;",
    "",
    "      if (trace > 0) {",
    "        const s = 0.5 / Math.sqrt(trace + 1.0);",
    "",
    "        this._w = 0.25 / s;",
    "        this._x = (m32 - m23) * s;",
    "        this._y = (m13 - m31) * s;",
    "        this._z = (m21 - m12) * s;",
    "      } else if (m11 > m22 && m11 > m33) {",
    "        const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);",
    "",
    "        this._w = (m32 - m23) / s;",
    "        this._x = 0.25 * s;",
    "        this._y = (m12 + m21) / s;",
    "        this._z = (m13 + m31) / s;",
    "      } else if (m22 > m33) {",
    "        const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);",
    "",
    "        this._w = (m13 - m31) / s;",
    "        this._x = (m12 + m21) / s;",
    "        this._y = 0.25 * s;",
    "        this._z = (m23 + m32) / s;",
    "      } else {",
    "        const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);",
    "",
    "        this._w = (m21 - m12) / s;",
    "        this._x = (m13 + m31) / s;",
    "        this._y = (m23 + m32) / s;",
    "        this._z = 0.25 * s;",
    "      }",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromUnitVectors(vFrom, vTo) {",
    "      // assumes direction vectors vFrom and vTo are normalized",
    "",
    "      let r = vFrom.dot(vTo) + 1;",
    "",
    "      if (r < Number.EPSILON) {",
    "        // vFrom and vTo point in opposite directions",
    "",
    "        r = 0;",
    "",
    "        if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {",
    "          this._x = -vFrom.y;",
    "          this._y = vFrom.x;",
    "          this._z = 0;",
    "          this._w = r;",
    "        } else {",
    "          this._x = 0;",
    "          this._y = -vFrom.z;",
    "          this._z = vFrom.y;",
    "          this._w = r;",
    "        }",
    "      } else {",
    "        // crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3",
    "",
    "        this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;",
    "        this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;",
    "        this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;",
    "        this._w = r;",
    "      }",
    "",
    "      return this.normalize();",
    "    }",
    "",
    "    angleTo(q) {",
    "      return 2 * Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));",
    "    }",
    "",
    "    rotateTowards(q, step) {",
    "      const angle = this.angleTo(q);",
    "",
    "      if (angle === 0) return this;",
    "",
    "      const t = Math.min(1, step / angle);",
    "",
    "      this.slerp(q, t);",
    "",
    "      return this;",
    "    }",
    "",
    "    identity() {",
    "      return this.set(0, 0, 0, 1);",
    "    }",
    "",
    "    invert() {",
    "      // quaternion is assumed to have unit length",
    "",
    "      return this.conjugate();",
    "    }",
    "",
    "    conjugate() {",
    "      this._x *= -1;",
    "      this._y *= -1;",
    "      this._z *= -1;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    dot(v) {",
    "      return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;",
    "    }",
    "",
    "    lengthSq() {",
    "      return (",
    "        this._x * this._x +",
    "        this._y * this._y +",
    "        this._z * this._z +",
    "        this._w * this._w",
    "      );",
    "    }",
    "",
    "    length() {",
    "      return Math.sqrt(",
    "        this._x * this._x +",
    "          this._y * this._y +",
    "          this._z * this._z +",
    "          this._w * this._w",
    "      );",
    "    }",
    "",
    "    normalize() {",
    "      let l = this.length();",
    "",
    "      if (l === 0) {",
    "        this._x = 0;",
    "        this._y = 0;",
    "        this._z = 0;",
    "        this._w = 1;",
    "      } else {",
    "        l = 1 / l;",
    "",
    "        this._x = this._x * l;",
    "        this._y = this._y * l;",
    "        this._z = this._z * l;",
    "        this._w = this._w * l;",
    "      }",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(q) {",
    "      return this.multiplyQuaternions(this, q);",
    "    }",
    "",
    "    premultiply(q) {",
    "      return this.multiplyQuaternions(q, this);",
    "    }",
    "",
    "    multiplyQuaternions(a, b) {",
    "      // from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm",
    "",
    "      const qax = a._x,",
    "        qay = a._y,",
    "        qaz = a._z,",
    "        qaw = a._w;",
    "      const qbx = b._x,",
    "        qby = b._y,",
    "        qbz = b._z,",
    "        qbw = b._w;",
    "",
    "      this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;",
    "      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;",
    "      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;",
    "      this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    slerp(qb, t) {",
    "      if (t === 0) return this;",
    "      if (t === 1) return this.copy(qb);",
    "",
    "      const x = this._x,",
    "        y = this._y,",
    "        z = this._z,",
    "        w = this._w;",
    "",
    "      // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/",
    "",
    "      let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;",
    "",
    "      if (cosHalfTheta < 0) {",
    "        this._w = -qb._w;",
    "        this._x = -qb._x;",
    "        this._y = -qb._y;",
    "        this._z = -qb._z;",
    "",
    "        cosHalfTheta = -cosHalfTheta;",
    "      } else {",
    "        this.copy(qb);",
    "      }",
    "",
    "      if (cosHalfTheta >= 1.0) {",
    "        this._w = w;",
    "        this._x = x;",
    "        this._y = y;",
    "        this._z = z;",
    "",
    "        return this;",
    "      }",
    "",
    "      const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;",
    "",
    "      if (sqrSinHalfTheta <= Number.EPSILON) {",
    "        const s = 1 - t;",
    "        this._w = s * w + t * this._w;",
    "        this._x = s * x + t * this._x;",
    "        this._y = s * y + t * this._y;",
    "        this._z = s * z + t * this._z;",
    "",
    "        this.normalize();",
    "        this._onChangeCallback();",
    "",
    "        return this;",
    "      }",
    "",
    "      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);",
    "      const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);",
    "      const ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta,",
    "        ratioB = Math.sin(t * halfTheta) / sinHalfTheta;",
    "",
    "      this._w = w * ratioA + this._w * ratioB;",
    "      this._x = x * ratioA + this._x * ratioB;",
    "      this._y = y * ratioA + this._y * ratioB;",
    "      this._z = z * ratioA + this._z * ratioB;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    slerpQuaternions(qa, qb, t) {",
    "      return this.copy(qa).slerp(qb, t);",
    "    }",
    "",
    "    random() {",
    "      // Derived from http://planning.cs.uiuc.edu/node198.html",
    "      // Note, this source uses w, x, y, z ordering,",
    "      // so we swap the order below.",
    "",
    "      const u1 = Math.random();",
    "      const sqrt1u1 = Math.sqrt(1 - u1);",
    "      const sqrtu1 = Math.sqrt(u1);",
    "",
    "      const u2 = 2 * Math.PI * Math.random();",
    "",
    "      const u3 = 2 * Math.PI * Math.random();",
    "",
    "      return this.set(",
    "        sqrt1u1 * Math.cos(u2),",
    "        sqrtu1 * Math.sin(u3),",
    "        sqrtu1 * Math.cos(u3),",
    "        sqrt1u1 * Math.sin(u2)",
    "      );",
    "    }",
    "",
    "    equals(quaternion) {",
    "      return (",
    "        quaternion._x === this._x &&",
    "        quaternion._y === this._y &&",
    "        quaternion._z === this._z &&",
    "        quaternion._w === this._w",
    "      );",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      this._x = array[offset];",
    "      this._y = array[offset + 1];",
    "      this._z = array[offset + 2];",
    "      this._w = array[offset + 3];",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this._x;",
    "      array[offset + 1] = this._y;",
    "      array[offset + 2] = this._z;",
    "      array[offset + 3] = this._w;",
    "",
    "      return array;",
    "    }",
    "",
    "    fromBufferAttribute(attribute, index) {",
    "      this._x = attribute.getX(index);",
    "      this._y = attribute.getY(index);",
    "      this._z = attribute.getZ(index);",
    "      this._w = attribute.getW(index);",
    "",
    "      return this;",
    "    }",
    "",
    "    _onChange(callback) {",
    "      this._onChangeCallback = callback;",
    "",
    "      return this;",
    "    }",
    "",
    "    _onChangeCallback() {}",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this._x;",
    "      yield this._y;",
    "      yield this._z;",
    "      yield this._w;",
    "    }",
    "  }",
    "",
    "  class Vector3 {",
    "    constructor(x = 0, y = 0, z = 0) {",
    "      Vector3.prototype.isVector3 = true;",
    "",
    "      this.x = x;",
    "      this.y = y;",
    "      this.z = z;",
    "    }",
    "",
    "    set(x, y, z) {",
    "      if (z === undefined) z = this.z; // sprite.scale.set(x,y)",
    "",
    "      this.x = x;",
    "      this.y = y;",
    "      this.z = z;",
    "",
    "      return this;",
    "    }",
    "",
    "    setScalar(scalar) {",
    "      this.x = scalar;",
    "      this.y = scalar;",
    "      this.z = scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    setX(x) {",
    "      this.x = x;",
    "",
    "      return this;",
    "    }",
    "",
    "    setY(y) {",
    "      this.y = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    setZ(z) {",
    "      this.z = z;",
    "",
    "      return this;",
    "    }",
    "",
    "    setComponent(index, value) {",
    "      switch (index) {",
    "        case 0:",
    "          this.x = value;",
    "          break;",
    "        case 1:",
    "          this.y = value;",
    "          break;",
    "        case 2:",
    "          this.z = value;",
    "          break;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    getComponent(index) {",
    "      switch (index) {",
    "        case 0:",
    "          return this.x;",
    "        case 1:",
    "          return this.y;",
    "        case 2:",
    "          return this.z;",
    "        default:",
    '          throw new Error("index is out of range: " + index);',
    "      }",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this.x, this.y, this.z);",
    "    }",
    "",
    "    copy(v) {",
    "      this.x = v.x;",
    "      this.y = v.y;",
    "      this.z = v.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    add(v) {",
    "      this.x += v.x;",
    "      this.y += v.y;",
    "      this.z += v.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScalar(s) {",
    "      this.x += s;",
    "      this.y += s;",
    "      this.z += s;",
    "",
    "      return this;",
    "    }",
    "",
    "    addVectors(a, b) {",
    "      this.x = a.x + b.x;",
    "      this.y = a.y + b.y;",
    "      this.z = a.z + b.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    addScaledVector(v, s) {",
    "      this.x += v.x * s;",
    "      this.y += v.y * s;",
    "      this.z += v.z * s;",
    "",
    "      return this;",
    "    }",
    "",
    "    sub(v) {",
    "      this.x -= v.x;",
    "      this.y -= v.y;",
    "      this.z -= v.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    subScalar(s) {",
    "      this.x -= s;",
    "      this.y -= s;",
    "      this.z -= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    subVectors(a, b) {",
    "      this.x = a.x - b.x;",
    "      this.y = a.y - b.y;",
    "      this.z = a.z - b.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(v) {",
    "      this.x *= v.x;",
    "      this.y *= v.y;",
    "      this.z *= v.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(scalar) {",
    "      this.x *= scalar;",
    "      this.y *= scalar;",
    "      this.z *= scalar;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyVectors(a, b) {",
    "      this.x = a.x * b.x;",
    "      this.y = a.y * b.y;",
    "      this.z = a.z * b.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    applyEuler(euler) {",
    "      return this.applyQuaternion(_quaternion$4.setFromEuler(euler));",
    "    }",
    "",
    "    applyAxisAngle(axis, angle) {",
    "      return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));",
    "    }",
    "",
    "    applyMatrix3(m) {",
    "      const x = this.x,",
    "        y = this.y,",
    "        z = this.z;",
    "      const e = m.elements;",
    "",
    "      this.x = e[0] * x + e[3] * y + e[6] * z;",
    "      this.y = e[1] * x + e[4] * y + e[7] * z;",
    "      this.z = e[2] * x + e[5] * y + e[8] * z;",
    "",
    "      return this;",
    "    }",
    "",
    "    applyNormalMatrix(m) {",
    "      return this.applyMatrix3(m).normalize();",
    "    }",
    "",
    "    applyMatrix4(m) {",
    "      const x = this.x,",
    "        y = this.y,",
    "        z = this.z;",
    "      const e = m.elements;",
    "",
    "      const w = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]);",
    "",
    "      this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * w;",
    "      this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * w;",
    "      this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * w;",
    "",
    "      return this;",
    "    }",
    "",
    "    applyQuaternion(q) {",
    "      const x = this.x,",
    "        y = this.y,",
    "        z = this.z;",
    "      const qx = q.x,",
    "        qy = q.y,",
    "        qz = q.z,",
    "        qw = q.w;",
    "",
    "      // calculate quat * vector",
    "",
    "      const ix = qw * x + qy * z - qz * y;",
    "      const iy = qw * y + qz * x - qx * z;",
    "      const iz = qw * z + qx * y - qy * x;",
    "      const iw = -qx * x - qy * y - qz * z;",
    "",
    "      // calculate result * inverse quat",
    "",
    "      this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;",
    "      this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;",
    "      this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;",
    "",
    "      return this;",
    "    }",
    "",
    "    project(camera) {",
    "      return this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(",
    "        camera.projectionMatrix",
    "      );",
    "    }",
    "",
    "    unproject(camera) {",
    "      return this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(",
    "        camera.matrixWorld",
    "      );",
    "    }",
    "",
    "    transformDirection(m) {",
    "      // input: THREE.Matrix4 affine matrix",
    "      // vector interpreted as a direction",
    "",
    "      const x = this.x,",
    "        y = this.y,",
    "        z = this.z;",
    "      const e = m.elements;",
    "",
    "      this.x = e[0] * x + e[4] * y + e[8] * z;",
    "      this.y = e[1] * x + e[5] * y + e[9] * z;",
    "      this.z = e[2] * x + e[6] * y + e[10] * z;",
    "",
    "      return this.normalize();",
    "    }",
    "",
    "    divide(v) {",
    "      this.x /= v.x;",
    "      this.y /= v.y;",
    "      this.z /= v.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    divideScalar(scalar) {",
    "      return this.multiplyScalar(1 / scalar);",
    "    }",
    "",
    "    min(v) {",
    "      this.x = Math.min(this.x, v.x);",
    "      this.y = Math.min(this.y, v.y);",
    "      this.z = Math.min(this.z, v.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    max(v) {",
    "      this.x = Math.max(this.x, v.x);",
    "      this.y = Math.max(this.y, v.y);",
    "      this.z = Math.max(this.z, v.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    clamp(min, max) {",
    "      // assumes min < max, componentwise",
    "",
    "      this.x = Math.max(min.x, Math.min(max.x, this.x));",
    "      this.y = Math.max(min.y, Math.min(max.y, this.y));",
    "      this.z = Math.max(min.z, Math.min(max.z, this.z));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampScalar(minVal, maxVal) {",
    "      this.x = Math.max(minVal, Math.min(maxVal, this.x));",
    "      this.y = Math.max(minVal, Math.min(maxVal, this.y));",
    "      this.z = Math.max(minVal, Math.min(maxVal, this.z));",
    "",
    "      return this;",
    "    }",
    "",
    "    clampLength(min, max) {",
    "      const length = this.length();",
    "",
    "      return this.divideScalar(length || 1).multiplyScalar(",
    "        Math.max(min, Math.min(max, length))",
    "      );",
    "    }",
    "",
    "    floor() {",
    "      this.x = Math.floor(this.x);",
    "      this.y = Math.floor(this.y);",
    "      this.z = Math.floor(this.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    ceil() {",
    "      this.x = Math.ceil(this.x);",
    "      this.y = Math.ceil(this.y);",
    "      this.z = Math.ceil(this.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    round() {",
    "      this.x = Math.round(this.x);",
    "      this.y = Math.round(this.y);",
    "      this.z = Math.round(this.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    roundToZero() {",
    "      this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);",
    "      this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);",
    "      this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    negate() {",
    "      this.x = -this.x;",
    "      this.y = -this.y;",
    "      this.z = -this.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    dot(v) {",
    "      return this.x * v.x + this.y * v.y + this.z * v.z;",
    "    }",
    "",
    "    // TODO lengthSquared?",
    "",
    "    lengthSq() {",
    "      return this.x * this.x + this.y * this.y + this.z * this.z;",
    "    }",
    "",
    "    length() {",
    "      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);",
    "    }",
    "",
    "    manhattanLength() {",
    "      return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);",
    "    }",
    "",
    "    normalize() {",
    "      return this.divideScalar(this.length() || 1);",
    "    }",
    "",
    "    setLength(length) {",
    "      return this.normalize().multiplyScalar(length);",
    "    }",
    "",
    "    lerp(v, alpha) {",
    "      this.x += (v.x - this.x) * alpha;",
    "      this.y += (v.y - this.y) * alpha;",
    "      this.z += (v.z - this.z) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    lerpVectors(v1, v2, alpha) {",
    "      this.x = v1.x + (v2.x - v1.x) * alpha;",
    "      this.y = v1.y + (v2.y - v1.y) * alpha;",
    "      this.z = v1.z + (v2.z - v1.z) * alpha;",
    "",
    "      return this;",
    "    }",
    "",
    "    cross(v) {",
    "      return this.crossVectors(this, v);",
    "    }",
    "",
    "    crossVectors(a, b) {",
    "      const ax = a.x,",
    "        ay = a.y,",
    "        az = a.z;",
    "      const bx = b.x,",
    "        by = b.y,",
    "        bz = b.z;",
    "",
    "      this.x = ay * bz - az * by;",
    "      this.y = az * bx - ax * bz;",
    "      this.z = ax * by - ay * bx;",
    "",
    "      return this;",
    "    }",
    "",
    "    projectOnVector(v) {",
    "      const denominator = v.lengthSq();",
    "",
    "      if (denominator === 0) return this.set(0, 0, 0);",
    "",
    "      const scalar = v.dot(this) / denominator;",
    "",
    "      return this.copy(v).multiplyScalar(scalar);",
    "    }",
    "",
    "    projectOnPlane(planeNormal) {",
    "      _vector$c.copy(this).projectOnVector(planeNormal);",
    "",
    "      return this.sub(_vector$c);",
    "    }",
    "",
    "    reflect(normal) {",
    "      // reflect incident vector off plane orthogonal to normal",
    "      // normal is assumed to have unit length",
    "",
    "      return this.sub(",
    "        _vector$c.copy(normal).multiplyScalar(2 * this.dot(normal))",
    "      );",
    "    }",
    "",
    "    angleTo(v) {",
    "      const denominator = Math.sqrt(this.lengthSq() * v.lengthSq());",
    "",
    "      if (denominator === 0) return Math.PI / 2;",
    "",
    "      const theta = this.dot(v) / denominator;",
    "",
    "      // clamp, to handle numerical problems",
    "",
    "      return Math.acos(clamp(theta, -1, 1));",
    "    }",
    "",
    "    distanceTo(v) {",
    "      return Math.sqrt(this.distanceToSquared(v));",
    "    }",
    "",
    "    distanceToSquared(v) {",
    "      const dx = this.x - v.x,",
    "        dy = this.y - v.y,",
    "        dz = this.z - v.z;",
    "",
    "      return dx * dx + dy * dy + dz * dz;",
    "    }",
    "",
    "    manhattanDistanceTo(v) {",
    "      return (",
    "        Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z)",
    "      );",
    "    }",
    "",
    "    setFromSpherical(s) {",
    "      return this.setFromSphericalCoords(s.radius, s.phi, s.theta);",
    "    }",
    "",
    "    setFromSphericalCoords(radius, phi, theta) {",
    "      const sinPhiRadius = Math.sin(phi) * radius;",
    "",
    "      this.x = sinPhiRadius * Math.sin(theta);",
    "      this.y = Math.cos(phi) * radius;",
    "      this.z = sinPhiRadius * Math.cos(theta);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromCylindrical(c) {",
    "      return this.setFromCylindricalCoords(c.radius, c.theta, c.y);",
    "    }",
    "",
    "    setFromCylindricalCoords(radius, theta, y) {",
    "      this.x = radius * Math.sin(theta);",
    "      this.y = y;",
    "      this.z = radius * Math.cos(theta);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromMatrixPosition(m) {",
    "      const e = m.elements;",
    "",
    "      this.x = e[12];",
    "      this.y = e[13];",
    "      this.z = e[14];",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromMatrixScale(m) {",
    "      const sx = this.setFromMatrixColumn(m, 0).length();",
    "      const sy = this.setFromMatrixColumn(m, 1).length();",
    "      const sz = this.setFromMatrixColumn(m, 2).length();",
    "",
    "      this.x = sx;",
    "      this.y = sy;",
    "      this.z = sz;",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromMatrixColumn(m, index) {",
    "      return this.fromArray(m.elements, index * 4);",
    "    }",
    "",
    "    setFromMatrix3Column(m, index) {",
    "      return this.fromArray(m.elements, index * 3);",
    "    }",
    "",
    "    setFromEuler(e) {",
    "      this.x = e._x;",
    "      this.y = e._y;",
    "      this.z = e._z;",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(v) {",
    "      return v.x === this.x && v.y === this.y && v.z === this.z;",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      this.x = array[offset];",
    "      this.y = array[offset + 1];",
    "      this.z = array[offset + 2];",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this.x;",
    "      array[offset + 1] = this.y;",
    "      array[offset + 2] = this.z;",
    "",
    "      return array;",
    "    }",
    "",
    "    fromBufferAttribute(attribute, index) {",
    "      this.x = attribute.getX(index);",
    "      this.y = attribute.getY(index);",
    "      this.z = attribute.getZ(index);",
    "",
    "      return this;",
    "    }",
    "",
    "    random() {",
    "      this.x = Math.random();",
    "      this.y = Math.random();",
    "      this.z = Math.random();",
    "",
    "      return this;",
    "    }",
    "",
    "    randomDirection() {",
    "      // Derived from https://mathworld.wolfram.com/SpherePointPicking.html",
    "",
    "      const u = (Math.random() - 0.5) * 2;",
    "      const t = Math.random() * Math.PI * 2;",
    "      const f = Math.sqrt(1 - u ** 2);",
    "",
    "      this.x = f * Math.cos(t);",
    "      this.y = f * Math.sin(t);",
    "      this.z = u;",
    "",
    "      return this;",
    "    }",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this.x;",
    "      yield this.y;",
    "      yield this.z;",
    "    }",
    "  }",
    "",
    "  const _vector$c = /*@__PURE__*/ new Vector3();",
    "  const _quaternion$4 = /*@__PURE__*/ new Quaternion();",
    "",
    "  class Box3 {",
    "    constructor(",
    "      min = new Vector3(+Infinity, +Infinity, +Infinity),",
    "      max = new Vector3(-Infinity, -Infinity, -Infinity)",
    "    ) {",
    "      this.isBox3 = true;",
    "",
    "      this.min = min;",
    "      this.max = max;",
    "    }",
    "",
    "    set(min, max) {",
    "      this.min.copy(min);",
    "      this.max.copy(max);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromArray(array) {",
    "      let minX = +Infinity;",
    "      let minY = +Infinity;",
    "      let minZ = +Infinity;",
    "",
    "      let maxX = -Infinity;",
    "      let maxY = -Infinity;",
    "      let maxZ = -Infinity;",
    "",
    "      for (let i = 0, l = array.length; i < l; i += 3) {",
    "        const x = array[i];",
    "        const y = array[i + 1];",
    "        const z = array[i + 2];",
    "",
    "        if (x < minX) minX = x;",
    "        if (y < minY) minY = y;",
    "        if (z < minZ) minZ = z;",
    "",
    "        if (x > maxX) maxX = x;",
    "        if (y > maxY) maxY = y;",
    "        if (z > maxZ) maxZ = z;",
    "      }",
    "",
    "      this.min.set(minX, minY, minZ);",
    "      this.max.set(maxX, maxY, maxZ);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromBufferAttribute(attribute) {",
    "      let minX = +Infinity;",
    "      let minY = +Infinity;",
    "      let minZ = +Infinity;",
    "",
    "      let maxX = -Infinity;",
    "      let maxY = -Infinity;",
    "      let maxZ = -Infinity;",
    "",
    "      for (let i = 0, l = attribute.count; i < l; i++) {",
    "        const x = attribute.getX(i);",
    "        const y = attribute.getY(i);",
    "        const z = attribute.getZ(i);",
    "",
    "        if (x < minX) minX = x;",
    "        if (y < minY) minY = y;",
    "        if (z < minZ) minZ = z;",
    "",
    "        if (x > maxX) maxX = x;",
    "        if (y > maxY) maxY = y;",
    "        if (z > maxZ) maxZ = z;",
    "      }",
    "",
    "      this.min.set(minX, minY, minZ);",
    "      this.max.set(maxX, maxY, maxZ);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromPoints(points) {",
    "      this.makeEmpty();",
    "",
    "      for (let i = 0, il = points.length; i < il; i++) {",
    "        this.expandByPoint(points[i]);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromCenterAndSize(center, size) {",
    "      const halfSize = _vector$b.copy(size).multiplyScalar(0.5);",
    "",
    "      this.min.copy(center).sub(halfSize);",
    "      this.max.copy(center).add(halfSize);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromObject(object, precise = false) {",
    "      this.makeEmpty();",
    "",
    "      return this.expandByObject(object, precise);",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(box) {",
    "      this.min.copy(box.min);",
    "      this.max.copy(box.max);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeEmpty() {",
    "      this.min.x = this.min.y = this.min.z = +Infinity;",
    "      this.max.x = this.max.y = this.max.z = -Infinity;",
    "",
    "      return this;",
    "    }",
    "",
    "    isEmpty() {",
    "      // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes",
    "",
    "      return (",
    "        this.max.x < this.min.x ||",
    "        this.max.y < this.min.y ||",
    "        this.max.z < this.min.z",
    "      );",
    "    }",
    "",
    "    getCenter(target) {",
    "      return this.isEmpty()",
    "        ? target.set(0, 0, 0)",
    "        : target.addVectors(this.min, this.max).multiplyScalar(0.5);",
    "    }",
    "",
    "    getSize(target) {",
    "      return this.isEmpty()",
    "        ? target.set(0, 0, 0)",
    "        : target.subVectors(this.max, this.min);",
    "    }",
    "",
    "    expandByPoint(point) {",
    "      this.min.min(point);",
    "      this.max.max(point);",
    "",
    "      return this;",
    "    }",
    "",
    "    expandByVector(vector) {",
    "      this.min.sub(vector);",
    "      this.max.add(vector);",
    "",
    "      return this;",
    "    }",
    "",
    "    expandByScalar(scalar) {",
    "      this.min.addScalar(-scalar);",
    "      this.max.addScalar(scalar);",
    "",
    "      return this;",
    "    }",
    "",
    "    expandByObject(object, precise = false) {",
    "      // Computes the world-axis-aligned bounding box of an object (including its children),",
    "      // accounting for both the object's, and children's, world transforms",
    "",
    "      object.updateWorldMatrix(false, false);",
    "",
    "      const geometry = object.geometry;",
    "",
    "      if (geometry !== undefined) {",
    "        if (",
    "          precise &&",
    "          geometry.attributes != undefined &&",
    "          geometry.attributes.position !== undefined",
    "        ) {",
    "          const position = geometry.attributes.position;",
    "          for (let i = 0, l = position.count; i < l; i++) {",
    "            _vector$b",
    "              .fromBufferAttribute(position, i)",
    "              .applyMatrix4(object.matrixWorld);",
    "            this.expandByPoint(_vector$b);",
    "          }",
    "        } else {",
    "          if (geometry.boundingBox === null) {",
    "            geometry.computeBoundingBox();",
    "          }",
    "",
    "          _box$3.copy(geometry.boundingBox);",
    "          _box$3.applyMatrix4(object.matrixWorld);",
    "",
    "          this.union(_box$3);",
    "        }",
    "      }",
    "",
    "      const children = object.children;",
    "",
    "      for (let i = 0, l = children.length; i < l; i++) {",
    "        this.expandByObject(children[i], precise);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    containsPoint(point) {",
    "      return point.x < this.min.x ||",
    "        point.x > this.max.x ||",
    "        point.y < this.min.y ||",
    "        point.y > this.max.y ||",
    "        point.z < this.min.z ||",
    "        point.z > this.max.z",
    "        ? false",
    "        : true;",
    "    }",
    "",
    "    containsBox(box) {",
    "      return (",
    "        this.min.x <= box.min.x &&",
    "        box.max.x <= this.max.x &&",
    "        this.min.y <= box.min.y &&",
    "        box.max.y <= this.max.y &&",
    "        this.min.z <= box.min.z &&",
    "        box.max.z <= this.max.z",
    "      );",
    "    }",
    "",
    "    getParameter(point, target) {",
    "      // This can potentially have a divide by zero if the box",
    "      // has a size dimension of 0.",
    "",
    "      return target.set(",
    "        (point.x - this.min.x) / (this.max.x - this.min.x),",
    "        (point.y - this.min.y) / (this.max.y - this.min.y),",
    "        (point.z - this.min.z) / (this.max.z - this.min.z)",
    "      );",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      // using 6 splitting planes to rule out intersections.",
    "      return box.max.x < this.min.x ||",
    "        box.min.x > this.max.x ||",
    "        box.max.y < this.min.y ||",
    "        box.min.y > this.max.y ||",
    "        box.max.z < this.min.z ||",
    "        box.min.z > this.max.z",
    "        ? false",
    "        : true;",
    "    }",
    "",
    "    intersectsSphere(sphere) {",
    "      // Find the point on the AABB closest to the sphere center.",
    "      this.clampPoint(sphere.center, _vector$b);",
    "",
    "      // If that point is inside the sphere, the AABB and sphere intersect.",
    "      return (",
    "        _vector$b.distanceToSquared(sphere.center) <=",
    "        sphere.radius * sphere.radius",
    "      );",
    "    }",
    "",
    "    intersectsPlane(plane) {",
    "      // We compute the minimum and maximum dot product values. If those values",
    "      // are on the same side (back or front) of the plane, then there is no intersection.",
    "",
    "      let min, max;",
    "",
    "      if (plane.normal.x > 0) {",
    "        min = plane.normal.x * this.min.x;",
    "        max = plane.normal.x * this.max.x;",
    "      } else {",
    "        min = plane.normal.x * this.max.x;",
    "        max = plane.normal.x * this.min.x;",
    "      }",
    "",
    "      if (plane.normal.y > 0) {",
    "        min += plane.normal.y * this.min.y;",
    "        max += plane.normal.y * this.max.y;",
    "      } else {",
    "        min += plane.normal.y * this.max.y;",
    "        max += plane.normal.y * this.min.y;",
    "      }",
    "",
    "      if (plane.normal.z > 0) {",
    "        min += plane.normal.z * this.min.z;",
    "        max += plane.normal.z * this.max.z;",
    "      } else {",
    "        min += plane.normal.z * this.max.z;",
    "        max += plane.normal.z * this.min.z;",
    "      }",
    "",
    "      return min <= -plane.constant && max >= -plane.constant;",
    "    }",
    "",
    "    intersectsTriangle(triangle) {",
    "      if (this.isEmpty()) {",
    "        return false;",
    "      }",
    "",
    "      // compute box center and extents",
    "      this.getCenter(_center);",
    "      _extents.subVectors(this.max, _center);",
    "",
    "      // translate triangle to aabb origin",
    "      _v0$2.subVectors(triangle.a, _center);",
    "      _v1$7.subVectors(triangle.b, _center);",
    "      _v2$4.subVectors(triangle.c, _center);",
    "",
    "      // compute edge vectors for triangle",
    "      _f0.subVectors(_v1$7, _v0$2);",
    "      _f1.subVectors(_v2$4, _v1$7);",
    "      _f2.subVectors(_v0$2, _v2$4);",
    "",
    "      // test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb",
    "      // make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation",
    "      // axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)",
    "      let axes = [",
    "        0,",
    "        -_f0.z,",
    "        _f0.y,",
    "        0,",
    "        -_f1.z,",
    "        _f1.y,",
    "        0,",
    "        -_f2.z,",
    "        _f2.y,",
    "        _f0.z,",
    "        0,",
    "        -_f0.x,",
    "        _f1.z,",
    "        0,",
    "        -_f1.x,",
    "        _f2.z,",
    "        0,",
    "        -_f2.x,",
    "        -_f0.y,",
    "        _f0.x,",
    "        0,",
    "        -_f1.y,",
    "        _f1.x,",
    "        0,",
    "        -_f2.y,",
    "        _f2.x,",
    "        0,",
    "      ];",
    "      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {",
    "        return false;",
    "      }",
    "",
    "      // test 3 face normals from the aabb",
    "      axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];",
    "      if (!satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents)) {",
    "        return false;",
    "      }",
    "",
    "      // finally testing the face normal of the triangle",
    "      // use already existing triangle edge vectors here",
    "      _triangleNormal.crossVectors(_f0, _f1);",
    "      axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];",
    "",
    "      return satForAxes(axes, _v0$2, _v1$7, _v2$4, _extents);",
    "    }",
    "",
    "    clampPoint(point, target) {",
    "      return target.copy(point).clamp(this.min, this.max);",
    "    }",
    "",
    "    distanceToPoint(point) {",
    "      const clampedPoint = _vector$b.copy(point).clamp(this.min, this.max);",
    "",
    "      return clampedPoint.sub(point).length();",
    "    }",
    "",
    "    getBoundingSphere(target) {",
    "      this.getCenter(target.center);",
    "",
    "      target.radius = this.getSize(_vector$b).length() * 0.5;",
    "",
    "      return target;",
    "    }",
    "",
    "    intersect(box) {",
    "      this.min.max(box.min);",
    "      this.max.min(box.max);",
    "",
    "      // ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.",
    "      if (this.isEmpty()) this.makeEmpty();",
    "",
    "      return this;",
    "    }",
    "",
    "    union(box) {",
    "      this.min.min(box.min);",
    "      this.max.max(box.max);",
    "",
    "      return this;",
    "    }",
    "",
    "    applyMatrix4(matrix) {",
    "      // transform of empty box is an empty box.",
    "      if (this.isEmpty()) return this;",
    "",
    "      // NOTE: I am using a binary pattern to specify all 2^3 combinations below",
    "      _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000",
    "      _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001",
    "      _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010",
    "      _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011",
    "      _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100",
    "      _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101",
    "      _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110",
    "      _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111",
    "",
    "      this.setFromPoints(_points);",
    "",
    "      return this;",
    "    }",
    "",
    "    translate(offset) {",
    "      this.min.add(offset);",
    "      this.max.add(offset);",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(box) {",
    "      return box.min.equals(this.min) && box.max.equals(this.max);",
    "    }",
    "  }",
    "",
    "  const _points = [",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "    /*@__PURE__*/ new Vector3(),",
    "  ];",
    "",
    "  const _vector$b = /*@__PURE__*/ new Vector3();",
    "",
    "  const _box$3 = /*@__PURE__*/ new Box3();",
    "",
    "  // triangle centered vertices",
    "",
    "  const _v0$2 = /*@__PURE__*/ new Vector3();",
    "  const _v1$7 = /*@__PURE__*/ new Vector3();",
    "  const _v2$4 = /*@__PURE__*/ new Vector3();",
    "",
    "  // triangle edge vectors",
    "",
    "  const _f0 = /*@__PURE__*/ new Vector3();",
    "  const _f1 = /*@__PURE__*/ new Vector3();",
    "  const _f2 = /*@__PURE__*/ new Vector3();",
    "",
    "  const _center = /*@__PURE__*/ new Vector3();",
    "  const _extents = /*@__PURE__*/ new Vector3();",
    "  const _triangleNormal = /*@__PURE__*/ new Vector3();",
    "  const _testAxis = /*@__PURE__*/ new Vector3();",
    "",
    "  function satForAxes(axes, v0, v1, v2, extents) {",
    "    for (let i = 0, j = axes.length - 3; i <= j; i += 3) {",
    "      _testAxis.fromArray(axes, i);",
    "      // project the aabb onto the separating axis",
    "      const r =",
    "        extents.x * Math.abs(_testAxis.x) +",
    "        extents.y * Math.abs(_testAxis.y) +",
    "        extents.z * Math.abs(_testAxis.z);",
    "      // project all 3 vertices of the triangle onto the separating axis",
    "      const p0 = v0.dot(_testAxis);",
    "      const p1 = v1.dot(_testAxis);",
    "      const p2 = v2.dot(_testAxis);",
    "      // actual test, basically see if either of the most extreme of the triangle points intersects r",
    "      if (Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {",
    "        // points of the projected triangle are outside the projected half-length of the aabb",
    "        // the axis is separating and we can exit",
    "        return false;",
    "      }",
    "    }",
    "",
    "    return true;",
    "  }",
    "",
    "  const _box$2 = /*@__PURE__*/ new Box3();",
    "  const _v1$6 = /*@__PURE__*/ new Vector3();",
    "  const _v2$3 = /*@__PURE__*/ new Vector3();",
    "",
    "  class Sphere {",
    "    constructor(center = new Vector3(), radius = -1) {",
    "      this.center = center;",
    "      this.radius = radius;",
    "    }",
    "",
    "    set(center, radius) {",
    "      this.center.copy(center);",
    "      this.radius = radius;",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromPoints(points, optionalCenter) {",
    "      const center = this.center;",
    "",
    "      if (optionalCenter !== undefined) {",
    "        center.copy(optionalCenter);",
    "      } else {",
    "        _box$2.setFromPoints(points).getCenter(center);",
    "      }",
    "",
    "      let maxRadiusSq = 0;",
    "",
    "      for (let i = 0, il = points.length; i < il; i++) {",
    "        maxRadiusSq = Math.max(",
    "          maxRadiusSq,",
    "          center.distanceToSquared(points[i])",
    "        );",
    "      }",
    "",
    "      this.radius = Math.sqrt(maxRadiusSq);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(sphere) {",
    "      this.center.copy(sphere.center);",
    "      this.radius = sphere.radius;",
    "",
    "      return this;",
    "    }",
    "",
    "    isEmpty() {",
    "      return this.radius < 0;",
    "    }",
    "",
    "    makeEmpty() {",
    "      this.center.set(0, 0, 0);",
    "      this.radius = -1;",
    "",
    "      return this;",
    "    }",
    "",
    "    containsPoint(point) {",
    "      return point.distanceToSquared(this.center) <= this.radius * this.radius;",
    "    }",
    "",
    "    distanceToPoint(point) {",
    "      return point.distanceTo(this.center) - this.radius;",
    "    }",
    "",
    "    intersectsSphere(sphere) {",
    "      const radiusSum = this.radius + sphere.radius;",
    "",
    "      return (",
    "        sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum",
    "      );",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      return box.intersectsSphere(this);",
    "    }",
    "",
    "    intersectsPlane(plane) {",
    "      return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;",
    "    }",
    "",
    "    clampPoint(point, target) {",
    "      const deltaLengthSq = this.center.distanceToSquared(point);",
    "",
    "      target.copy(point);",
    "",
    "      if (deltaLengthSq > this.radius * this.radius) {",
    "        target.sub(this.center).normalize();",
    "        target.multiplyScalar(this.radius).add(this.center);",
    "      }",
    "",
    "      return target;",
    "    }",
    "",
    "    getBoundingBox(target) {",
    "      if (this.isEmpty()) {",
    "        // Empty sphere produces empty bounding box",
    "        target.makeEmpty();",
    "        return target;",
    "      }",
    "",
    "      target.set(this.center, this.center);",
    "      target.expandByScalar(this.radius);",
    "",
    "      return target;",
    "    }",
    "",
    "    applyMatrix4(matrix) {",
    "      this.center.applyMatrix4(matrix);",
    "      this.radius = this.radius * matrix.getMaxScaleOnAxis();",
    "",
    "      return this;",
    "    }",
    "",
    "    translate(offset) {",
    "      this.center.add(offset);",
    "",
    "      return this;",
    "    }",
    "",
    "    expandByPoint(point) {",
    "      if (this.isEmpty()) {",
    "        this.center.copy(point);",
    "",
    "        this.radius = 0;",
    "",
    "        return this;",
    "      }",
    "",
    "      _v1$6.subVectors(point, this.center);",
    "",
    "      const lengthSq = _v1$6.lengthSq();",
    "",
    "      if (lengthSq > this.radius * this.radius) {",
    "        // calculate the minimal sphere",
    "",
    "        const length = Math.sqrt(lengthSq);",
    "",
    "        const delta = (length - this.radius) * 0.5;",
    "",
    "        this.center.addScaledVector(_v1$6, delta / length);",
    "",
    "        this.radius += delta;",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    union(sphere) {",
    "      if (sphere.isEmpty()) {",
    "        return this;",
    "      }",
    "",
    "      if (this.isEmpty()) {",
    "        this.copy(sphere);",
    "",
    "        return this;",
    "      }",
    "",
    "      if (this.center.equals(sphere.center) === true) {",
    "        this.radius = Math.max(this.radius, sphere.radius);",
    "      } else {",
    "        _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);",
    "",
    "        this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));",
    "",
    "        this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(sphere) {",
    "      return sphere.center.equals(this.center) && sphere.radius === this.radius;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "  }",
    "",
    "  const _vector$a = /*@__PURE__*/ new Vector3();",
    "  const _segCenter = /*@__PURE__*/ new Vector3();",
    "  const _segDir = /*@__PURE__*/ new Vector3();",
    "  const _diff = /*@__PURE__*/ new Vector3();",
    "",
    "  const _edge1 = /*@__PURE__*/ new Vector3();",
    "  const _edge2 = /*@__PURE__*/ new Vector3();",
    "  const _normal$1 = /*@__PURE__*/ new Vector3();",
    "",
    "  class Ray {",
    "    constructor(origin = new Vector3(), direction = new Vector3(0, 0, -1)) {",
    "      this.origin = origin;",
    "      this.direction = direction;",
    "    }",
    "",
    "    set(origin, direction) {",
    "      this.origin.copy(origin);",
    "      this.direction.copy(direction);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(ray) {",
    "      this.origin.copy(ray.origin);",
    "      this.direction.copy(ray.direction);",
    "",
    "      return this;",
    "    }",
    "",
    "    at(t, target) {",
    "      return target.copy(this.direction).multiplyScalar(t).add(this.origin);",
    "    }",
    "",
    "    lookAt(v) {",
    "      this.direction.copy(v).sub(this.origin).normalize();",
    "",
    "      return this;",
    "    }",
    "",
    "    recast(t) {",
    "      this.origin.copy(this.at(t, _vector$a));",
    "",
    "      return this;",
    "    }",
    "",
    "    closestPointToPoint(point, target) {",
    "      target.subVectors(point, this.origin);",
    "",
    "      const directionDistance = target.dot(this.direction);",
    "",
    "      if (directionDistance < 0) {",
    "        return target.copy(this.origin);",
    "      }",
    "",
    "      return target",
    "        .copy(this.direction)",
    "        .multiplyScalar(directionDistance)",
    "        .add(this.origin);",
    "    }",
    "",
    "    distanceToPoint(point) {",
    "      return Math.sqrt(this.distanceSqToPoint(point));",
    "    }",
    "",
    "    distanceSqToPoint(point) {",
    "      const directionDistance = _vector$a",
    "        .subVectors(point, this.origin)",
    "        .dot(this.direction);",
    "",
    "      // point behind the ray",
    "",
    "      if (directionDistance < 0) {",
    "        return this.origin.distanceToSquared(point);",
    "      }",
    "",
    "      _vector$a",
    "        .copy(this.direction)",
    "        .multiplyScalar(directionDistance)",
    "        .add(this.origin);",
    "",
    "      return _vector$a.distanceToSquared(point);",
    "    }",
    "",
    "    distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {",
    "      // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h",
    "      // It returns the min distance between the ray and the segment",
    "      // defined by v0 and v1",
    "      // It can also set two optional targets :",
    "      // - The closest point on the ray",
    "      // - The closest point on the segment",
    "",
    "      _segCenter.copy(v0).add(v1).multiplyScalar(0.5);",
    "      _segDir.copy(v1).sub(v0).normalize();",
    "      _diff.copy(this.origin).sub(_segCenter);",
    "",
    "      const segExtent = v0.distanceTo(v1) * 0.5;",
    "      const a01 = -this.direction.dot(_segDir);",
    "      const b0 = _diff.dot(this.direction);",
    "      const b1 = -_diff.dot(_segDir);",
    "      const c = _diff.lengthSq();",
    "      const det = Math.abs(1 - a01 * a01);",
    "      let s0, s1, sqrDist, extDet;",
    "",
    "      if (det > 0) {",
    "        // The ray and segment are not parallel.",
    "",
    "        s0 = a01 * b1 - b0;",
    "        s1 = a01 * b0 - b1;",
    "        extDet = segExtent * det;",
    "",
    "        if (s0 >= 0) {",
    "          if (s1 >= -extDet) {",
    "            if (s1 <= extDet) {",
    "              // region 0",
    "              // Minimum at interior points of ray and segment.",
    "",
    "              const invDet = 1 / det;",
    "              s0 *= invDet;",
    "              s1 *= invDet;",
    "              sqrDist =",
    "                s0 * (s0 + a01 * s1 + 2 * b0) +",
    "                s1 * (a01 * s0 + s1 + 2 * b1) +",
    "                c;",
    "            } else {",
    "              // region 1",
    "",
    "              s1 = segExtent;",
    "              s0 = Math.max(0, -(a01 * s1 + b0));",
    "              sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;",
    "            }",
    "          } else {",
    "            // region 5",
    "",
    "            s1 = -segExtent;",
    "            s0 = Math.max(0, -(a01 * s1 + b0));",
    "            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;",
    "          }",
    "        } else {",
    "          if (s1 <= -extDet) {",
    "            // region 4",
    "",
    "            s0 = Math.max(0, -(-a01 * segExtent + b0));",
    "            s1 =",
    "              s0 > 0",
    "                ? -segExtent",
    "                : Math.min(Math.max(-segExtent, -b1), segExtent);",
    "            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;",
    "          } else if (s1 <= extDet) {",
    "            // region 3",
    "",
    "            s0 = 0;",
    "            s1 = Math.min(Math.max(-segExtent, -b1), segExtent);",
    "            sqrDist = s1 * (s1 + 2 * b1) + c;",
    "          } else {",
    "            // region 2",
    "",
    "            s0 = Math.max(0, -(a01 * segExtent + b0));",
    "            s1 =",
    "              s0 > 0",
    "                ? segExtent",
    "                : Math.min(Math.max(-segExtent, -b1), segExtent);",
    "            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;",
    "          }",
    "        }",
    "      } else {",
    "        // Ray and segment are parallel.",
    "",
    "        s1 = a01 > 0 ? -segExtent : segExtent;",
    "        s0 = Math.max(0, -(a01 * s1 + b0));",
    "        sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c;",
    "      }",
    "",
    "      if (optionalPointOnRay) {",
    "        optionalPointOnRay",
    "          .copy(this.direction)",
    "          .multiplyScalar(s0)",
    "          .add(this.origin);",
    "      }",
    "",
    "      if (optionalPointOnSegment) {",
    "        optionalPointOnSegment.copy(_segDir).multiplyScalar(s1).add(_segCenter);",
    "      }",
    "",
    "      return sqrDist;",
    "    }",
    "",
    "    intersectSphere(sphere, target) {",
    "      _vector$a.subVectors(sphere.center, this.origin);",
    "      const tca = _vector$a.dot(this.direction);",
    "      const d2 = _vector$a.dot(_vector$a) - tca * tca;",
    "      const radius2 = sphere.radius * sphere.radius;",
    "",
    "      if (d2 > radius2) return null;",
    "",
    "      const thc = Math.sqrt(radius2 - d2);",
    "",
    "      // t0 = first intersect point - entrance on front of sphere",
    "      const t0 = tca - thc;",
    "",
    "      // t1 = second intersect point - exit point on back of sphere",
    "      const t1 = tca + thc;",
    "",
    "      // test to see if both t0 and t1 are behind the ray - if so, return null",
    "      if (t0 < 0 && t1 < 0) return null;",
    "",
    "      // test to see if t0 is behind the ray:",
    "      // if it is, the ray is inside the sphere, so return the second exit point scaled by t1,",
    "      // in order to always return an intersect point that is in front of the ray.",
    "      if (t0 < 0) return this.at(t1, target);",
    "",
    "      // else t0 is in front of the ray, so return the first collision point scaled by t0",
    "      return this.at(t0, target);",
    "    }",
    "",
    "    intersectsSphere(sphere) {",
    "      return (",
    "        this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius",
    "      );",
    "    }",
    "",
    "    distanceToPlane(plane) {",
    "      const denominator = plane.normal.dot(this.direction);",
    "",
    "      if (denominator === 0) {",
    "        // line is coplanar, return origin",
    "        if (plane.distanceToPoint(this.origin) === 0) {",
    "          return 0;",
    "        }",
    "",
    "        // Null is preferable to undefined since undefined means.... it is undefined",
    "",
    "        return null;",
    "      }",
    "",
    "      const t = -(this.origin.dot(plane.normal) + plane.constant) / denominator;",
    "",
    "      // Return if the ray never intersects the plane",
    "",
    "      return t >= 0 ? t : null;",
    "    }",
    "",
    "    intersectPlane(plane, target) {",
    "      const t = this.distanceToPlane(plane);",
    "",
    "      if (t === null) {",
    "        return null;",
    "      }",
    "",
    "      return this.at(t, target);",
    "    }",
    "",
    "    intersectsPlane(plane) {",
    "      // check if the ray lies on the plane first",
    "",
    "      const distToPoint = plane.distanceToPoint(this.origin);",
    "",
    "      if (distToPoint === 0) {",
    "        return true;",
    "      }",
    "",
    "      const denominator = plane.normal.dot(this.direction);",
    "",
    "      if (denominator * distToPoint < 0) {",
    "        return true;",
    "      }",
    "",
    "      // ray origin is behind the plane (and is pointing behind it)",
    "",
    "      return false;",
    "    }",
    "",
    "    intersectBox(box, target) {",
    "      let tmin, tmax, tymin, tymax, tzmin, tzmax;",
    "",
    "      const invdirx = 1 / this.direction.x,",
    "        invdiry = 1 / this.direction.y,",
    "        invdirz = 1 / this.direction.z;",
    "",
    "      const origin = this.origin;",
    "",
    "      if (invdirx >= 0) {",
    "        tmin = (box.min.x - origin.x) * invdirx;",
    "        tmax = (box.max.x - origin.x) * invdirx;",
    "      } else {",
    "        tmin = (box.max.x - origin.x) * invdirx;",
    "        tmax = (box.min.x - origin.x) * invdirx;",
    "      }",
    "",
    "      if (invdiry >= 0) {",
    "        tymin = (box.min.y - origin.y) * invdiry;",
    "        tymax = (box.max.y - origin.y) * invdiry;",
    "      } else {",
    "        tymin = (box.max.y - origin.y) * invdiry;",
    "        tymax = (box.min.y - origin.y) * invdiry;",
    "      }",
    "",
    "      if (tmin > tymax || tymin > tmax) return null;",
    "",
    "      if (tymin > tmin || isNaN(tmin)) tmin = tymin;",
    "",
    "      if (tymax < tmax || isNaN(tmax)) tmax = tymax;",
    "",
    "      if (invdirz >= 0) {",
    "        tzmin = (box.min.z - origin.z) * invdirz;",
    "        tzmax = (box.max.z - origin.z) * invdirz;",
    "      } else {",
    "        tzmin = (box.max.z - origin.z) * invdirz;",
    "        tzmax = (box.min.z - origin.z) * invdirz;",
    "      }",
    "",
    "      if (tmin > tzmax || tzmin > tmax) return null;",
    "",
    "      if (tzmin > tmin || tmin !== tmin) tmin = tzmin;",
    "",
    "      if (tzmax < tmax || tmax !== tmax) tmax = tzmax;",
    "",
    "      //return point closest to the ray (positive side)",
    "",
    "      if (tmax < 0) return null;",
    "",
    "      return this.at(tmin >= 0 ? tmin : tmax, target);",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      return this.intersectBox(box, _vector$a) !== null;",
    "    }",
    "",
    "    intersectTriangle(a, b, c, backfaceCulling, target) {",
    "      // Compute the offset origin, edges, and normal.",
    "",
    "      // from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h",
    "",
    "      _edge1.subVectors(b, a);",
    "      _edge2.subVectors(c, a);",
    "      _normal$1.crossVectors(_edge1, _edge2);",
    "",
    "      // Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,",
    "      // E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by",
    "      //   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))",
    "      //   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))",
    "      //   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)",
    "      let DdN = this.direction.dot(_normal$1);",
    "      let sign;",
    "",
    "      if (DdN > 0) {",
    "        if (backfaceCulling) return null;",
    "        sign = 1;",
    "      } else if (DdN < 0) {",
    "        sign = -1;",
    "        DdN = -DdN;",
    "      } else {",
    "        return null;",
    "      }",
    "",
    "      _diff.subVectors(this.origin, a);",
    "      const DdQxE2 =",
    "        sign * this.direction.dot(_edge2.crossVectors(_diff, _edge2));",
    "",
    "      // b1 < 0, no intersection",
    "      if (DdQxE2 < 0) {",
    "        return null;",
    "      }",
    "",
    "      const DdE1xQ = sign * this.direction.dot(_edge1.cross(_diff));",
    "",
    "      // b2 < 0, no intersection",
    "      if (DdE1xQ < 0) {",
    "        return null;",
    "      }",
    "",
    "      // b1+b2 > 1, no intersection",
    "      if (DdQxE2 + DdE1xQ > DdN) {",
    "        return null;",
    "      }",
    "",
    "      // Line intersects triangle, check if ray does.",
    "      const QdN = -sign * _diff.dot(_normal$1);",
    "",
    "      // t < 0, no intersection",
    "      if (QdN < 0) {",
    "        return null;",
    "      }",
    "",
    "      // Ray intersects triangle.",
    "      return this.at(QdN / DdN, target);",
    "    }",
    "",
    "    applyMatrix4(matrix4) {",
    "      this.origin.applyMatrix4(matrix4);",
    "      this.direction.transformDirection(matrix4);",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(ray) {",
    "      return (",
    "        ray.origin.equals(this.origin) && ray.direction.equals(this.direction)",
    "      );",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "  }",
    "",
    "  class Matrix4 {",
    "    constructor() {",
    "      Matrix4.prototype.isMatrix4 = true;",
    "",
    "      this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];",
    "    }",
    "",
    "    set(",
    "      n11,",
    "      n12,",
    "      n13,",
    "      n14,",
    "      n21,",
    "      n22,",
    "      n23,",
    "      n24,",
    "      n31,",
    "      n32,",
    "      n33,",
    "      n34,",
    "      n41,",
    "      n42,",
    "      n43,",
    "      n44",
    "    ) {",
    "      const te = this.elements;",
    "",
    "      te[0] = n11;",
    "      te[4] = n12;",
    "      te[8] = n13;",
    "      te[12] = n14;",
    "      te[1] = n21;",
    "      te[5] = n22;",
    "      te[9] = n23;",
    "      te[13] = n24;",
    "      te[2] = n31;",
    "      te[6] = n32;",
    "      te[10] = n33;",
    "      te[14] = n34;",
    "      te[3] = n41;",
    "      te[7] = n42;",
    "      te[11] = n43;",
    "      te[15] = n44;",
    "",
    "      return this;",
    "    }",
    "",
    "    identity() {",
    "      this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new Matrix4().fromArray(this.elements);",
    "    }",
    "",
    "    copy(m) {",
    "      const te = this.elements;",
    "      const me = m.elements;",
    "",
    "      te[0] = me[0];",
    "      te[1] = me[1];",
    "      te[2] = me[2];",
    "      te[3] = me[3];",
    "      te[4] = me[4];",
    "      te[5] = me[5];",
    "      te[6] = me[6];",
    "      te[7] = me[7];",
    "      te[8] = me[8];",
    "      te[9] = me[9];",
    "      te[10] = me[10];",
    "      te[11] = me[11];",
    "      te[12] = me[12];",
    "      te[13] = me[13];",
    "      te[14] = me[14];",
    "      te[15] = me[15];",
    "",
    "      return this;",
    "    }",
    "",
    "    copyPosition(m) {",
    "      const te = this.elements,",
    "        me = m.elements;",
    "",
    "      te[12] = me[12];",
    "      te[13] = me[13];",
    "      te[14] = me[14];",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromMatrix3(m) {",
    "      const me = m.elements;",
    "",
    "      this.set(",
    "        me[0],",
    "        me[3],",
    "        me[6],",
    "        0,",
    "        me[1],",
    "        me[4],",
    "        me[7],",
    "        0,",
    "        me[2],",
    "        me[5],",
    "        me[8],",
    "        0,",
    "        0,",
    "        0,",
    "        0,",
    "        1",
    "      );",
    "",
    "      return this;",
    "    }",
    "",
    "    extractBasis(xAxis, yAxis, zAxis) {",
    "      xAxis.setFromMatrixColumn(this, 0);",
    "      yAxis.setFromMatrixColumn(this, 1);",
    "      zAxis.setFromMatrixColumn(this, 2);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeBasis(xAxis, yAxis, zAxis) {",
    "      this.set(",
    "        xAxis.x,",
    "        yAxis.x,",
    "        zAxis.x,",
    "        0,",
    "        xAxis.y,",
    "        yAxis.y,",
    "        zAxis.y,",
    "        0,",
    "        xAxis.z,",
    "        yAxis.z,",
    "        zAxis.z,",
    "        0,",
    "        0,",
    "        0,",
    "        0,",
    "        1",
    "      );",
    "",
    "      return this;",
    "    }",
    "",
    "    extractRotation(m) {",
    "      // this method does not support reflection matrices",
    "",
    "      const te = this.elements;",
    "      const me = m.elements;",
    "",
    "      const scaleX = 1 / _v1$5.setFromMatrixColumn(m, 0).length();",
    "      const scaleY = 1 / _v1$5.setFromMatrixColumn(m, 1).length();",
    "      const scaleZ = 1 / _v1$5.setFromMatrixColumn(m, 2).length();",
    "",
    "      te[0] = me[0] * scaleX;",
    "      te[1] = me[1] * scaleX;",
    "      te[2] = me[2] * scaleX;",
    "      te[3] = 0;",
    "",
    "      te[4] = me[4] * scaleY;",
    "      te[5] = me[5] * scaleY;",
    "      te[6] = me[6] * scaleY;",
    "      te[7] = 0;",
    "",
    "      te[8] = me[8] * scaleZ;",
    "      te[9] = me[9] * scaleZ;",
    "      te[10] = me[10] * scaleZ;",
    "      te[11] = 0;",
    "",
    "      te[12] = 0;",
    "      te[13] = 0;",
    "      te[14] = 0;",
    "      te[15] = 1;",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationFromEuler(euler) {",
    "      const te = this.elements;",
    "",
    "      const x = euler.x,",
    "        y = euler.y,",
    "        z = euler.z;",
    "      const a = Math.cos(x),",
    "        b = Math.sin(x);",
    "      const c = Math.cos(y),",
    "        d = Math.sin(y);",
    "      const e = Math.cos(z),",
    "        f = Math.sin(z);",
    "",
    '      if (euler.order === "XYZ") {',
    "        const ae = a * e,",
    "          af = a * f,",
    "          be = b * e,",
    "          bf = b * f;",
    "",
    "        te[0] = c * e;",
    "        te[4] = -c * f;",
    "        te[8] = d;",
    "",
    "        te[1] = af + be * d;",
    "        te[5] = ae - bf * d;",
    "        te[9] = -b * c;",
    "",
    "        te[2] = bf - ae * d;",
    "        te[6] = be + af * d;",
    "        te[10] = a * c;",
    '      } else if (euler.order === "YXZ") {',
    "        const ce = c * e,",
    "          cf = c * f,",
    "          de = d * e,",
    "          df = d * f;",
    "",
    "        te[0] = ce + df * b;",
    "        te[4] = de * b - cf;",
    "        te[8] = a * d;",
    "",
    "        te[1] = a * f;",
    "        te[5] = a * e;",
    "        te[9] = -b;",
    "",
    "        te[2] = cf * b - de;",
    "        te[6] = df + ce * b;",
    "        te[10] = a * c;",
    '      } else if (euler.order === "ZXY") {',
    "        const ce = c * e,",
    "          cf = c * f,",
    "          de = d * e,",
    "          df = d * f;",
    "",
    "        te[0] = ce - df * b;",
    "        te[4] = -a * f;",
    "        te[8] = de + cf * b;",
    "",
    "        te[1] = cf + de * b;",
    "        te[5] = a * e;",
    "        te[9] = df - ce * b;",
    "",
    "        te[2] = -a * d;",
    "        te[6] = b;",
    "        te[10] = a * c;",
    '      } else if (euler.order === "ZYX") {',
    "        const ae = a * e,",
    "          af = a * f,",
    "          be = b * e,",
    "          bf = b * f;",
    "",
    "        te[0] = c * e;",
    "        te[4] = be * d - af;",
    "        te[8] = ae * d + bf;",
    "",
    "        te[1] = c * f;",
    "        te[5] = bf * d + ae;",
    "        te[9] = af * d - be;",
    "",
    "        te[2] = -d;",
    "        te[6] = b * c;",
    "        te[10] = a * c;",
    '      } else if (euler.order === "YZX") {',
    "        const ac = a * c,",
    "          ad = a * d,",
    "          bc = b * c,",
    "          bd = b * d;",
    "",
    "        te[0] = c * e;",
    "        te[4] = bd - ac * f;",
    "        te[8] = bc * f + ad;",
    "",
    "        te[1] = f;",
    "        te[5] = a * e;",
    "        te[9] = -b * e;",
    "",
    "        te[2] = -d * e;",
    "        te[6] = ad * f + bc;",
    "        te[10] = ac - bd * f;",
    '      } else if (euler.order === "XZY") {',
    "        const ac = a * c,",
    "          ad = a * d,",
    "          bc = b * c,",
    "          bd = b * d;",
    "",
    "        te[0] = c * e;",
    "        te[4] = -f;",
    "        te[8] = d * e;",
    "",
    "        te[1] = ac * f + bd;",
    "        te[5] = a * e;",
    "        te[9] = ad * f - bc;",
    "",
    "        te[2] = bc * f - ad;",
    "        te[6] = b * e;",
    "        te[10] = bd * f + ac;",
    "      }",
    "",
    "      // bottom row",
    "      te[3] = 0;",
    "      te[7] = 0;",
    "      te[11] = 0;",
    "",
    "      // last column",
    "      te[12] = 0;",
    "      te[13] = 0;",
    "      te[14] = 0;",
    "      te[15] = 1;",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationFromQuaternion(q) {",
    "      return this.compose(_zero, q, _one);",
    "    }",
    "",
    "    lookAt(eye, target, up) {",
    "      const te = this.elements;",
    "",
    "      _z.subVectors(eye, target);",
    "",
    "      if (_z.lengthSq() === 0) {",
    "        // eye and target are in the same position",
    "",
    "        _z.z = 1;",
    "      }",
    "",
    "      _z.normalize();",
    "      _x.crossVectors(up, _z);",
    "",
    "      if (_x.lengthSq() === 0) {",
    "        // up and z are parallel",
    "",
    "        if (Math.abs(up.z) === 1) {",
    "          _z.x += 0.0001;",
    "        } else {",
    "          _z.z += 0.0001;",
    "        }",
    "",
    "        _z.normalize();",
    "        _x.crossVectors(up, _z);",
    "      }",
    "",
    "      _x.normalize();",
    "      _y.crossVectors(_z, _x);",
    "",
    "      te[0] = _x.x;",
    "      te[4] = _y.x;",
    "      te[8] = _z.x;",
    "      te[1] = _x.y;",
    "      te[5] = _y.y;",
    "      te[9] = _z.y;",
    "      te[2] = _x.z;",
    "      te[6] = _y.z;",
    "      te[10] = _z.z;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiply(m) {",
    "      return this.multiplyMatrices(this, m);",
    "    }",
    "",
    "    premultiply(m) {",
    "      return this.multiplyMatrices(m, this);",
    "    }",
    "",
    "    multiplyMatrices(a, b) {",
    "      const ae = a.elements;",
    "      const be = b.elements;",
    "      const te = this.elements;",
    "",
    "      const a11 = ae[0],",
    "        a12 = ae[4],",
    "        a13 = ae[8],",
    "        a14 = ae[12];",
    "      const a21 = ae[1],",
    "        a22 = ae[5],",
    "        a23 = ae[9],",
    "        a24 = ae[13];",
    "      const a31 = ae[2],",
    "        a32 = ae[6],",
    "        a33 = ae[10],",
    "        a34 = ae[14];",
    "      const a41 = ae[3],",
    "        a42 = ae[7],",
    "        a43 = ae[11],",
    "        a44 = ae[15];",
    "",
    "      const b11 = be[0],",
    "        b12 = be[4],",
    "        b13 = be[8],",
    "        b14 = be[12];",
    "      const b21 = be[1],",
    "        b22 = be[5],",
    "        b23 = be[9],",
    "        b24 = be[13];",
    "      const b31 = be[2],",
    "        b32 = be[6],",
    "        b33 = be[10],",
    "        b34 = be[14];",
    "      const b41 = be[3],",
    "        b42 = be[7],",
    "        b43 = be[11],",
    "        b44 = be[15];",
    "",
    "      te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;",
    "      te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;",
    "      te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;",
    "      te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;",
    "",
    "      te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;",
    "      te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;",
    "      te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;",
    "      te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;",
    "",
    "      te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;",
    "      te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;",
    "      te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;",
    "      te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;",
    "",
    "      te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;",
    "      te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;",
    "      te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;",
    "      te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;",
    "",
    "      return this;",
    "    }",
    "",
    "    multiplyScalar(s) {",
    "      const te = this.elements;",
    "",
    "      te[0] *= s;",
    "      te[4] *= s;",
    "      te[8] *= s;",
    "      te[12] *= s;",
    "      te[1] *= s;",
    "      te[5] *= s;",
    "      te[9] *= s;",
    "      te[13] *= s;",
    "      te[2] *= s;",
    "      te[6] *= s;",
    "      te[10] *= s;",
    "      te[14] *= s;",
    "      te[3] *= s;",
    "      te[7] *= s;",
    "      te[11] *= s;",
    "      te[15] *= s;",
    "",
    "      return this;",
    "    }",
    "",
    "    determinant() {",
    "      const te = this.elements;",
    "",
    "      const n11 = te[0],",
    "        n12 = te[4],",
    "        n13 = te[8],",
    "        n14 = te[12];",
    "      const n21 = te[1],",
    "        n22 = te[5],",
    "        n23 = te[9],",
    "        n24 = te[13];",
    "      const n31 = te[2],",
    "        n32 = te[6],",
    "        n33 = te[10],",
    "        n34 = te[14];",
    "      const n41 = te[3],",
    "        n42 = te[7],",
    "        n43 = te[11],",
    "        n44 = te[15];",
    "",
    "      //TODO: make this more efficient",
    "      //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )",
    "",
    "      return (",
    "        n41 *",
    "          (+n14 * n23 * n32 -",
    "            n13 * n24 * n32 -",
    "            n14 * n22 * n33 +",
    "            n12 * n24 * n33 +",
    "            n13 * n22 * n34 -",
    "            n12 * n23 * n34) +",
    "        n42 *",
    "          (+n11 * n23 * n34 -",
    "            n11 * n24 * n33 +",
    "            n14 * n21 * n33 -",
    "            n13 * n21 * n34 +",
    "            n13 * n24 * n31 -",
    "            n14 * n23 * n31) +",
    "        n43 *",
    "          (+n11 * n24 * n32 -",
    "            n11 * n22 * n34 -",
    "            n14 * n21 * n32 +",
    "            n12 * n21 * n34 +",
    "            n14 * n22 * n31 -",
    "            n12 * n24 * n31) +",
    "        n44 *",
    "          (-n13 * n22 * n31 -",
    "            n11 * n23 * n32 +",
    "            n11 * n22 * n33 +",
    "            n13 * n21 * n32 -",
    "            n12 * n21 * n33 +",
    "            n12 * n23 * n31)",
    "      );",
    "    }",
    "",
    "    transpose() {",
    "      const te = this.elements;",
    "      let tmp;",
    "",
    "      tmp = te[1];",
    "      te[1] = te[4];",
    "      te[4] = tmp;",
    "      tmp = te[2];",
    "      te[2] = te[8];",
    "      te[8] = tmp;",
    "      tmp = te[6];",
    "      te[6] = te[9];",
    "      te[9] = tmp;",
    "",
    "      tmp = te[3];",
    "      te[3] = te[12];",
    "      te[12] = tmp;",
    "      tmp = te[7];",
    "      te[7] = te[13];",
    "      te[13] = tmp;",
    "      tmp = te[11];",
    "      te[11] = te[14];",
    "      te[14] = tmp;",
    "",
    "      return this;",
    "    }",
    "",
    "    setPosition(x, y, z) {",
    "      const te = this.elements;",
    "",
    "      if (x.isVector3) {",
    "        te[12] = x.x;",
    "        te[13] = x.y;",
    "        te[14] = x.z;",
    "      } else {",
    "        te[12] = x;",
    "        te[13] = y;",
    "        te[14] = z;",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    invert() {",
    "      // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm",
    "      const te = this.elements,",
    "        n11 = te[0],",
    "        n21 = te[1],",
    "        n31 = te[2],",
    "        n41 = te[3],",
    "        n12 = te[4],",
    "        n22 = te[5],",
    "        n32 = te[6],",
    "        n42 = te[7],",
    "        n13 = te[8],",
    "        n23 = te[9],",
    "        n33 = te[10],",
    "        n43 = te[11],",
    "        n14 = te[12],",
    "        n24 = te[13],",
    "        n34 = te[14],",
    "        n44 = te[15],",
    "        t11 =",
    "          n23 * n34 * n42 -",
    "          n24 * n33 * n42 +",
    "          n24 * n32 * n43 -",
    "          n22 * n34 * n43 -",
    "          n23 * n32 * n44 +",
    "          n22 * n33 * n44,",
    "        t12 =",
    "          n14 * n33 * n42 -",
    "          n13 * n34 * n42 -",
    "          n14 * n32 * n43 +",
    "          n12 * n34 * n43 +",
    "          n13 * n32 * n44 -",
    "          n12 * n33 * n44,",
    "        t13 =",
    "          n13 * n24 * n42 -",
    "          n14 * n23 * n42 +",
    "          n14 * n22 * n43 -",
    "          n12 * n24 * n43 -",
    "          n13 * n22 * n44 +",
    "          n12 * n23 * n44,",
    "        t14 =",
    "          n14 * n23 * n32 -",
    "          n13 * n24 * n32 -",
    "          n14 * n22 * n33 +",
    "          n12 * n24 * n33 +",
    "          n13 * n22 * n34 -",
    "          n12 * n23 * n34;",
    "",
    "      const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;",
    "",
    "      if (det === 0)",
    "        return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);",
    "",
    "      const detInv = 1 / det;",
    "",
    "      te[0] = t11 * detInv;",
    "      te[1] =",
    "        (n24 * n33 * n41 -",
    "          n23 * n34 * n41 -",
    "          n24 * n31 * n43 +",
    "          n21 * n34 * n43 +",
    "          n23 * n31 * n44 -",
    "          n21 * n33 * n44) *",
    "        detInv;",
    "      te[2] =",
    "        (n22 * n34 * n41 -",
    "          n24 * n32 * n41 +",
    "          n24 * n31 * n42 -",
    "          n21 * n34 * n42 -",
    "          n22 * n31 * n44 +",
    "          n21 * n32 * n44) *",
    "        detInv;",
    "      te[3] =",
    "        (n23 * n32 * n41 -",
    "          n22 * n33 * n41 -",
    "          n23 * n31 * n42 +",
    "          n21 * n33 * n42 +",
    "          n22 * n31 * n43 -",
    "          n21 * n32 * n43) *",
    "        detInv;",
    "",
    "      te[4] = t12 * detInv;",
    "      te[5] =",
    "        (n13 * n34 * n41 -",
    "          n14 * n33 * n41 +",
    "          n14 * n31 * n43 -",
    "          n11 * n34 * n43 -",
    "          n13 * n31 * n44 +",
    "          n11 * n33 * n44) *",
    "        detInv;",
    "      te[6] =",
    "        (n14 * n32 * n41 -",
    "          n12 * n34 * n41 -",
    "          n14 * n31 * n42 +",
    "          n11 * n34 * n42 +",
    "          n12 * n31 * n44 -",
    "          n11 * n32 * n44) *",
    "        detInv;",
    "      te[7] =",
    "        (n12 * n33 * n41 -",
    "          n13 * n32 * n41 +",
    "          n13 * n31 * n42 -",
    "          n11 * n33 * n42 -",
    "          n12 * n31 * n43 +",
    "          n11 * n32 * n43) *",
    "        detInv;",
    "",
    "      te[8] = t13 * detInv;",
    "      te[9] =",
    "        (n14 * n23 * n41 -",
    "          n13 * n24 * n41 -",
    "          n14 * n21 * n43 +",
    "          n11 * n24 * n43 +",
    "          n13 * n21 * n44 -",
    "          n11 * n23 * n44) *",
    "        detInv;",
    "      te[10] =",
    "        (n12 * n24 * n41 -",
    "          n14 * n22 * n41 +",
    "          n14 * n21 * n42 -",
    "          n11 * n24 * n42 -",
    "          n12 * n21 * n44 +",
    "          n11 * n22 * n44) *",
    "        detInv;",
    "      te[11] =",
    "        (n13 * n22 * n41 -",
    "          n12 * n23 * n41 -",
    "          n13 * n21 * n42 +",
    "          n11 * n23 * n42 +",
    "          n12 * n21 * n43 -",
    "          n11 * n22 * n43) *",
    "        detInv;",
    "",
    "      te[12] = t14 * detInv;",
    "      te[13] =",
    "        (n13 * n24 * n31 -",
    "          n14 * n23 * n31 +",
    "          n14 * n21 * n33 -",
    "          n11 * n24 * n33 -",
    "          n13 * n21 * n34 +",
    "          n11 * n23 * n34) *",
    "        detInv;",
    "      te[14] =",
    "        (n14 * n22 * n31 -",
    "          n12 * n24 * n31 -",
    "          n14 * n21 * n32 +",
    "          n11 * n24 * n32 +",
    "          n12 * n21 * n34 -",
    "          n11 * n22 * n34) *",
    "        detInv;",
    "      te[15] =",
    "        (n12 * n23 * n31 -",
    "          n13 * n22 * n31 +",
    "          n13 * n21 * n32 -",
    "          n11 * n23 * n32 -",
    "          n12 * n21 * n33 +",
    "          n11 * n22 * n33) *",
    "        detInv;",
    "",
    "      return this;",
    "    }",
    "",
    "    scale(v) {",
    "      const te = this.elements;",
    "      const x = v.x,",
    "        y = v.y,",
    "        z = v.z;",
    "",
    "      te[0] *= x;",
    "      te[4] *= y;",
    "      te[8] *= z;",
    "      te[1] *= x;",
    "      te[5] *= y;",
    "      te[9] *= z;",
    "      te[2] *= x;",
    "      te[6] *= y;",
    "      te[10] *= z;",
    "      te[3] *= x;",
    "      te[7] *= y;",
    "      te[11] *= z;",
    "",
    "      return this;",
    "    }",
    "",
    "    getMaxScaleOnAxis() {",
    "      const te = this.elements;",
    "",
    "      const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];",
    "      const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];",
    "      const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];",
    "",
    "      return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));",
    "    }",
    "",
    "    makeTranslation(x, y, z) {",
    "      this.set(1, 0, 0, x, 0, 1, 0, y, 0, 0, 1, z, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationX(theta) {",
    "      const c = Math.cos(theta),",
    "        s = Math.sin(theta);",
    "",
    "      this.set(1, 0, 0, 0, 0, c, -s, 0, 0, s, c, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationY(theta) {",
    "      const c = Math.cos(theta),",
    "        s = Math.sin(theta);",
    "",
    "      this.set(c, 0, s, 0, 0, 1, 0, 0, -s, 0, c, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationZ(theta) {",
    "      const c = Math.cos(theta),",
    "        s = Math.sin(theta);",
    "",
    "      this.set(c, -s, 0, 0, s, c, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeRotationAxis(axis, angle) {",
    "      // Based on http://www.gamedev.net/reference/articles/article1199.asp",
    "",
    "      const c = Math.cos(angle);",
    "      const s = Math.sin(angle);",
    "      const t = 1 - c;",
    "      const x = axis.x,",
    "        y = axis.y,",
    "        z = axis.z;",
    "      const tx = t * x,",
    "        ty = t * y;",
    "",
    "      this.set(",
    "        tx * x + c,",
    "        tx * y - s * z,",
    "        tx * z + s * y,",
    "        0,",
    "        tx * y + s * z,",
    "        ty * y + c,",
    "        ty * z - s * x,",
    "        0,",
    "        tx * z - s * y,",
    "        ty * z + s * x,",
    "        t * z * z + c,",
    "        0,",
    "        0,",
    "        0,",
    "        0,",
    "        1",
    "      );",
    "",
    "      return this;",
    "    }",
    "",
    "    makeScale(x, y, z) {",
    "      this.set(x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    makeShear(xy, xz, yx, yz, zx, zy) {",
    "      this.set(1, yx, zx, 0, xy, 1, zy, 0, xz, yz, 1, 0, 0, 0, 0, 1);",
    "",
    "      return this;",
    "    }",
    "",
    "    compose(position, quaternion, scale) {",
    "      const te = this.elements;",
    "",
    "      const x = quaternion._x,",
    "        y = quaternion._y,",
    "        z = quaternion._z,",
    "        w = quaternion._w;",
    "      const x2 = x + x,",
    "        y2 = y + y,",
    "        z2 = z + z;",
    "      const xx = x * x2,",
    "        xy = x * y2,",
    "        xz = x * z2;",
    "      const yy = y * y2,",
    "        yz = y * z2,",
    "        zz = z * z2;",
    "      const wx = w * x2,",
    "        wy = w * y2,",
    "        wz = w * z2;",
    "",
    "      const sx = scale.x,",
    "        sy = scale.y,",
    "        sz = scale.z;",
    "",
    "      te[0] = (1 - (yy + zz)) * sx;",
    "      te[1] = (xy + wz) * sx;",
    "      te[2] = (xz - wy) * sx;",
    "      te[3] = 0;",
    "",
    "      te[4] = (xy - wz) * sy;",
    "      te[5] = (1 - (xx + zz)) * sy;",
    "      te[6] = (yz + wx) * sy;",
    "      te[7] = 0;",
    "",
    "      te[8] = (xz + wy) * sz;",
    "      te[9] = (yz - wx) * sz;",
    "      te[10] = (1 - (xx + yy)) * sz;",
    "      te[11] = 0;",
    "",
    "      te[12] = position.x;",
    "      te[13] = position.y;",
    "      te[14] = position.z;",
    "      te[15] = 1;",
    "",
    "      return this;",
    "    }",
    "",
    "    decompose(position, quaternion, scale) {",
    "      const te = this.elements;",
    "",
    "      let sx = _v1$5.set(te[0], te[1], te[2]).length();",
    "      const sy = _v1$5.set(te[4], te[5], te[6]).length();",
    "      const sz = _v1$5.set(te[8], te[9], te[10]).length();",
    "",
    "      // if determine is negative, we need to invert one scale",
    "      const det = this.determinant();",
    "      if (det < 0) sx = -sx;",
    "",
    "      position.x = te[12];",
    "      position.y = te[13];",
    "      position.z = te[14];",
    "",
    "      // scale the rotation part",
    "      _m1$2.copy(this);",
    "",
    "      const invSX = 1 / sx;",
    "      const invSY = 1 / sy;",
    "      const invSZ = 1 / sz;",
    "",
    "      _m1$2.elements[0] *= invSX;",
    "      _m1$2.elements[1] *= invSX;",
    "      _m1$2.elements[2] *= invSX;",
    "",
    "      _m1$2.elements[4] *= invSY;",
    "      _m1$2.elements[5] *= invSY;",
    "      _m1$2.elements[6] *= invSY;",
    "",
    "      _m1$2.elements[8] *= invSZ;",
    "      _m1$2.elements[9] *= invSZ;",
    "      _m1$2.elements[10] *= invSZ;",
    "",
    "      quaternion.setFromRotationMatrix(_m1$2);",
    "",
    "      scale.x = sx;",
    "      scale.y = sy;",
    "      scale.z = sz;",
    "",
    "      return this;",
    "    }",
    "",
    "    makePerspective(left, right, top, bottom, near, far) {",
    "      const te = this.elements;",
    "      const x = (2 * near) / (right - left);",
    "      const y = (2 * near) / (top - bottom);",
    "",
    "      const a = (right + left) / (right - left);",
    "      const b = (top + bottom) / (top - bottom);",
    "      const c = -(far + near) / (far - near);",
    "      const d = (-2 * far * near) / (far - near);",
    "",
    "      te[0] = x;",
    "      te[4] = 0;",
    "      te[8] = a;",
    "      te[12] = 0;",
    "      te[1] = 0;",
    "      te[5] = y;",
    "      te[9] = b;",
    "      te[13] = 0;",
    "      te[2] = 0;",
    "      te[6] = 0;",
    "      te[10] = c;",
    "      te[14] = d;",
    "      te[3] = 0;",
    "      te[7] = 0;",
    "      te[11] = -1;",
    "      te[15] = 0;",
    "",
    "      return this;",
    "    }",
    "",
    "    makeOrthographic(left, right, top, bottom, near, far) {",
    "      const te = this.elements;",
    "      const w = 1.0 / (right - left);",
    "      const h = 1.0 / (top - bottom);",
    "      const p = 1.0 / (far - near);",
    "",
    "      const x = (right + left) * w;",
    "      const y = (top + bottom) * h;",
    "      const z = (far + near) * p;",
    "",
    "      te[0] = 2 * w;",
    "      te[4] = 0;",
    "      te[8] = 0;",
    "      te[12] = -x;",
    "      te[1] = 0;",
    "      te[5] = 2 * h;",
    "      te[9] = 0;",
    "      te[13] = -y;",
    "      te[2] = 0;",
    "      te[6] = 0;",
    "      te[10] = -2 * p;",
    "      te[14] = -z;",
    "      te[3] = 0;",
    "      te[7] = 0;",
    "      te[11] = 0;",
    "      te[15] = 1;",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(matrix) {",
    "      const te = this.elements;",
    "      const me = matrix.elements;",
    "",
    "      for (let i = 0; i < 16; i++) {",
    "        if (te[i] !== me[i]) return false;",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    fromArray(array, offset = 0) {",
    "      for (let i = 0; i < 16; i++) {",
    "        this.elements[i] = array[i + offset];",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      const te = this.elements;",
    "",
    "      array[offset] = te[0];",
    "      array[offset + 1] = te[1];",
    "      array[offset + 2] = te[2];",
    "      array[offset + 3] = te[3];",
    "",
    "      array[offset + 4] = te[4];",
    "      array[offset + 5] = te[5];",
    "      array[offset + 6] = te[6];",
    "      array[offset + 7] = te[7];",
    "",
    "      array[offset + 8] = te[8];",
    "      array[offset + 9] = te[9];",
    "      array[offset + 10] = te[10];",
    "      array[offset + 11] = te[11];",
    "",
    "      array[offset + 12] = te[12];",
    "      array[offset + 13] = te[13];",
    "      array[offset + 14] = te[14];",
    "      array[offset + 15] = te[15];",
    "",
    "      return array;",
    "    }",
    "  }",
    "",
    "  const _v1$5 = /*@__PURE__*/ new Vector3();",
    "  const _m1$2 = /*@__PURE__*/ new Matrix4();",
    "  const _zero = /*@__PURE__*/ new Vector3(0, 0, 0);",
    "  const _one = /*@__PURE__*/ new Vector3(1, 1, 1);",
    "  const _x = /*@__PURE__*/ new Vector3();",
    "  const _y = /*@__PURE__*/ new Vector3();",
    "  const _z = /*@__PURE__*/ new Vector3();",
    "",
    "  const _matrix$1 = /*@__PURE__*/ new Matrix4();",
    "  const _quaternion$3 = /*@__PURE__*/ new Quaternion();",
    "",
    "  class Euler {",
    "    constructor(x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER) {",
    "      this.isEuler = true;",
    "",
    "      this._x = x;",
    "      this._y = y;",
    "      this._z = z;",
    "      this._order = order;",
    "    }",
    "",
    "    get x() {",
    "      return this._x;",
    "    }",
    "",
    "    set x(value) {",
    "      this._x = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get y() {",
    "      return this._y;",
    "    }",
    "",
    "    set y(value) {",
    "      this._y = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get z() {",
    "      return this._z;",
    "    }",
    "",
    "    set z(value) {",
    "      this._z = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    get order() {",
    "      return this._order;",
    "    }",
    "",
    "    set order(value) {",
    "      this._order = value;",
    "      this._onChangeCallback();",
    "    }",
    "",
    "    set(x, y, z, order = this._order) {",
    "      this._x = x;",
    "      this._y = y;",
    "      this._z = z;",
    "      this._order = order;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this._x, this._y, this._z, this._order);",
    "    }",
    "",
    "    copy(euler) {",
    "      this._x = euler._x;",
    "      this._y = euler._y;",
    "      this._z = euler._z;",
    "      this._order = euler._order;",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromRotationMatrix(m, order = this._order, update = true) {",
    "      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)",
    "",
    "      const te = m.elements;",
    "      const m11 = te[0],",
    "        m12 = te[4],",
    "        m13 = te[8];",
    "      const m21 = te[1],",
    "        m22 = te[5],",
    "        m23 = te[9];",
    "      const m31 = te[2],",
    "        m32 = te[6],",
    "        m33 = te[10];",
    "",
    "      switch (order) {",
    '        case "XYZ":',
    "          this._y = Math.asin(clamp(m13, -1, 1));",
    "",
    "          if (Math.abs(m13) < 0.9999999) {",
    "            this._x = Math.atan2(-m23, m33);",
    "            this._z = Math.atan2(-m12, m11);",
    "          } else {",
    "            this._x = Math.atan2(m32, m22);",
    "            this._z = 0;",
    "          }",
    "",
    "          break;",
    "",
    '        case "YXZ":',
    "          this._x = Math.asin(-clamp(m23, -1, 1));",
    "",
    "          if (Math.abs(m23) < 0.9999999) {",
    "            this._y = Math.atan2(m13, m33);",
    "            this._z = Math.atan2(m21, m22);",
    "          } else {",
    "            this._y = Math.atan2(-m31, m11);",
    "            this._z = 0;",
    "          }",
    "",
    "          break;",
    "",
    '        case "ZXY":',
    "          this._x = Math.asin(clamp(m32, -1, 1));",
    "",
    "          if (Math.abs(m32) < 0.9999999) {",
    "            this._y = Math.atan2(-m31, m33);",
    "            this._z = Math.atan2(-m12, m22);",
    "          } else {",
    "            this._y = 0;",
    "            this._z = Math.atan2(m21, m11);",
    "          }",
    "",
    "          break;",
    "",
    '        case "ZYX":',
    "          this._y = Math.asin(-clamp(m31, -1, 1));",
    "",
    "          if (Math.abs(m31) < 0.9999999) {",
    "            this._x = Math.atan2(m32, m33);",
    "            this._z = Math.atan2(m21, m11);",
    "          } else {",
    "            this._x = 0;",
    "            this._z = Math.atan2(-m12, m22);",
    "          }",
    "",
    "          break;",
    "",
    '        case "YZX":',
    "          this._z = Math.asin(clamp(m21, -1, 1));",
    "",
    "          if (Math.abs(m21) < 0.9999999) {",
    "            this._x = Math.atan2(-m23, m22);",
    "            this._y = Math.atan2(-m31, m11);",
    "          } else {",
    "            this._x = 0;",
    "            this._y = Math.atan2(m13, m33);",
    "          }",
    "",
    "          break;",
    "",
    '        case "XZY":',
    "          this._z = Math.asin(-clamp(m12, -1, 1));",
    "",
    "          if (Math.abs(m12) < 0.9999999) {",
    "            this._x = Math.atan2(m32, m22);",
    "            this._y = Math.atan2(m13, m11);",
    "          } else {",
    "            this._x = Math.atan2(-m23, m33);",
    "            this._y = 0;",
    "          }",
    "",
    "          break;",
    "",
    "        default:",
    "          console.warn(",
    '            "THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " +',
    "              order",
    "          );",
    "      }",
    "",
    "      this._order = order;",
    "",
    "      if (update === true) this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromQuaternion(q, order, update) {",
    "      _matrix$1.makeRotationFromQuaternion(q);",
    "",
    "      return this.setFromRotationMatrix(_matrix$1, order, update);",
    "    }",
    "",
    "    setFromVector3(v, order = this._order) {",
    "      return this.set(v.x, v.y, v.z, order);",
    "    }",
    "",
    "    reorder(newOrder) {",
    "      // WARNING: this discards revolution information -bhouston",
    "",
    "      _quaternion$3.setFromEuler(this);",
    "",
    "      return this.setFromQuaternion(_quaternion$3, newOrder);",
    "    }",
    "",
    "    equals(euler) {",
    "      return (",
    "        euler._x === this._x &&",
    "        euler._y === this._y &&",
    "        euler._z === this._z &&",
    "        euler._order === this._order",
    "      );",
    "    }",
    "",
    "    fromArray(array) {",
    "      this._x = array[0];",
    "      this._y = array[1];",
    "      this._z = array[2];",
    "      if (array[3] !== undefined) this._order = array[3];",
    "",
    "      this._onChangeCallback();",
    "",
    "      return this;",
    "    }",
    "",
    "    toArray(array = [], offset = 0) {",
    "      array[offset] = this._x;",
    "      array[offset + 1] = this._y;",
    "      array[offset + 2] = this._z;",
    "      array[offset + 3] = this._order;",
    "",
    "      return array;",
    "    }",
    "",
    "    _onChange(callback) {",
    "      this._onChangeCallback = callback;",
    "",
    "      return this;",
    "    }",
    "",
    "    _onChangeCallback() {}",
    "",
    "    *[Symbol.iterator]() {",
    "      yield this._x;",
    "      yield this._y;",
    "      yield this._z;",
    "      yield this._order;",
    "    }",
    "  }",
    "",
    '  Euler.DEFAULT_ORDER = "XYZ";',
    "",
    "  class Layers {",
    "    constructor() {",
    "      this.mask = 1 | 0;",
    "    }",
    "",
    "    set(channel) {",
    "      this.mask = ((1 << channel) | 0) >>> 0;",
    "    }",
    "",
    "    enable(channel) {",
    "      this.mask |= (1 << channel) | 0;",
    "    }",
    "",
    "    enableAll() {",
    "      this.mask = 0xffffffff | 0;",
    "    }",
    "",
    "    toggle(channel) {",
    "      this.mask ^= (1 << channel) | 0;",
    "    }",
    "",
    "    disable(channel) {",
    "      this.mask &= ~((1 << channel) | 0);",
    "    }",
    "",
    "    disableAll() {",
    "      this.mask = 0;",
    "    }",
    "",
    "    test(layers) {",
    "      return (this.mask & layers.mask) !== 0;",
    "    }",
    "",
    "    isEnabled(channel) {",
    "      return (this.mask & ((1 << channel) | 0)) !== 0;",
    "    }",
    "  }",
    "",
    "  let _object3DId = 0;",
    "",
    "  const _v1$4 = /*@__PURE__*/ new Vector3();",
    "  const _q1 = /*@__PURE__*/ new Quaternion();",
    "  const _m1$1 = /*@__PURE__*/ new Matrix4();",
    "  const _target = /*@__PURE__*/ new Vector3();",
    "",
    "  const _position$3 = /*@__PURE__*/ new Vector3();",
    "  const _scale$2 = /*@__PURE__*/ new Vector3();",
    "  const _quaternion$2 = /*@__PURE__*/ new Quaternion();",
    "",
    "  const _xAxis = /*@__PURE__*/ new Vector3(1, 0, 0);",
    "  const _yAxis = /*@__PURE__*/ new Vector3(0, 1, 0);",
    "  const _zAxis = /*@__PURE__*/ new Vector3(0, 0, 1);",
    "",
    '  const _addedEvent = { type: "added" };',
    '  const _removedEvent = { type: "removed" };',
    "",
    "  class Object3D extends EventDispatcher {",
    "    constructor() {",
    "      super();",
    "",
    "      this.isObject3D = true;",
    "",
    '      Object.defineProperty(this, "id", { value: _object3DId++ });',
    "",
    "      this.uuid = generateUUID();",
    "",
    '      this.name = "";',
    '      this.type = "Object3D";',
    "",
    "      this.parent = null;",
    "      this.children = [];",
    "",
    "      this.up = Object3D.DEFAULT_UP.clone();",
    "",
    "      const position = new Vector3();",
    "      const rotation = new Euler();",
    "      const quaternion = new Quaternion();",
    "      const scale = new Vector3(1, 1, 1);",
    "",
    "      function onRotationChange() {",
    "        quaternion.setFromEuler(rotation, false);",
    "      }",
    "",
    "      function onQuaternionChange() {",
    "        rotation.setFromQuaternion(quaternion, undefined, false);",
    "      }",
    "",
    "      rotation._onChange(onRotationChange);",
    "      quaternion._onChange(onQuaternionChange);",
    "",
    "      Object.defineProperties(this, {",
    "        position: {",
    "          configurable: true,",
    "          enumerable: true,",
    "          value: position,",
    "        },",
    "        rotation: {",
    "          configurable: true,",
    "          enumerable: true,",
    "          value: rotation,",
    "        },",
    "        quaternion: {",
    "          configurable: true,",
    "          enumerable: true,",
    "          value: quaternion,",
    "        },",
    "        scale: {",
    "          configurable: true,",
    "          enumerable: true,",
    "          value: scale,",
    "        },",
    "        modelViewMatrix: {",
    "          value: new Matrix4(),",
    "        },",
    "        normalMatrix: {",
    "          value: new Matrix3(),",
    "        },",
    "      });",
    "",
    "      this.matrix = new Matrix4();",
    "      this.matrixWorld = new Matrix4();",
    "",
    "      this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;",
    "      this.matrixWorldNeedsUpdate = false;",
    "",
    "      this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer",
    "",
    "      this.layers = new Layers();",
    "      this.visible = true;",
    "",
    "      this.castShadow = false;",
    "      this.receiveShadow = false;",
    "",
    "      this.frustumCulled = true;",
    "      this.renderOrder = 0;",
    "",
    "      this.animations = [];",
    "",
    "      this.userData = {};",
    "    }",
    "",
    "    onBeforeRender(/* renderer, scene, camera, geometry, material, group */) {}",
    "",
    "    onAfterRender(/* renderer, scene, camera, geometry, material, group */) {}",
    "",
    "    applyMatrix4(matrix) {",
    "      if (this.matrixAutoUpdate) this.updateMatrix();",
    "",
    "      this.matrix.premultiply(matrix);",
    "",
    "      this.matrix.decompose(this.position, this.quaternion, this.scale);",
    "    }",
    "",
    "    applyQuaternion(q) {",
    "      this.quaternion.premultiply(q);",
    "",
    "      return this;",
    "    }",
    "",
    "    setRotationFromAxisAngle(axis, angle) {",
    "      // assumes axis is normalized",
    "",
    "      this.quaternion.setFromAxisAngle(axis, angle);",
    "    }",
    "",
    "    setRotationFromEuler(euler) {",
    "      this.quaternion.setFromEuler(euler, true);",
    "    }",
    "",
    "    setRotationFromMatrix(m) {",
    "      // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)",
    "",
    "      this.quaternion.setFromRotationMatrix(m);",
    "    }",
    "",
    "    setRotationFromQuaternion(q) {",
    "      // assumes q is normalized",
    "",
    "      this.quaternion.copy(q);",
    "    }",
    "",
    "    rotateOnAxis(axis, angle) {",
    "      // rotate object on axis in object space",
    "      // axis is assumed to be normalized",
    "",
    "      _q1.setFromAxisAngle(axis, angle);",
    "",
    "      this.quaternion.multiply(_q1);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateOnWorldAxis(axis, angle) {",
    "      // rotate object on axis in world space",
    "      // axis is assumed to be normalized",
    "      // method assumes no rotated parent",
    "",
    "      _q1.setFromAxisAngle(axis, angle);",
    "",
    "      this.quaternion.premultiply(_q1);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateX(angle) {",
    "      return this.rotateOnAxis(_xAxis, angle);",
    "    }",
    "",
    "    rotateY(angle) {",
    "      return this.rotateOnAxis(_yAxis, angle);",
    "    }",
    "",
    "    rotateZ(angle) {",
    "      return this.rotateOnAxis(_zAxis, angle);",
    "    }",
    "",
    "    translateOnAxis(axis, distance) {",
    "      // translate object by distance along axis in object space",
    "      // axis is assumed to be normalized",
    "",
    "      _v1$4.copy(axis).applyQuaternion(this.quaternion);",
    "",
    "      this.position.add(_v1$4.multiplyScalar(distance));",
    "",
    "      return this;",
    "    }",
    "",
    "    translateX(distance) {",
    "      return this.translateOnAxis(_xAxis, distance);",
    "    }",
    "",
    "    translateY(distance) {",
    "      return this.translateOnAxis(_yAxis, distance);",
    "    }",
    "",
    "    translateZ(distance) {",
    "      return this.translateOnAxis(_zAxis, distance);",
    "    }",
    "",
    "    localToWorld(vector) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      return vector.applyMatrix4(this.matrixWorld);",
    "    }",
    "",
    "    worldToLocal(vector) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      return vector.applyMatrix4(_m1$1.copy(this.matrixWorld).invert());",
    "    }",
    "",
    "    lookAt(x, y, z) {",
    "      // This method does not support objects having non-uniformly-scaled parent(s)",
    "",
    "      if (x.isVector3) {",
    "        _target.copy(x);",
    "      } else {",
    "        _target.set(x, y, z);",
    "      }",
    "",
    "      const parent = this.parent;",
    "",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      _position$3.setFromMatrixPosition(this.matrixWorld);",
    "",
    "      if (this.isCamera || this.isLight) {",
    "        _m1$1.lookAt(_position$3, _target, this.up);",
    "      } else {",
    "        _m1$1.lookAt(_target, _position$3, this.up);",
    "      }",
    "",
    "      this.quaternion.setFromRotationMatrix(_m1$1);",
    "",
    "      if (parent) {",
    "        _m1$1.extractRotation(parent.matrixWorld);",
    "        _q1.setFromRotationMatrix(_m1$1);",
    "        this.quaternion.premultiply(_q1.invert());",
    "      }",
    "    }",
    "",
    "    add(object) {",
    "      if (arguments.length > 1) {",
    "        for (let i = 0; i < arguments.length; i++) {",
    "          this.add(arguments[i]);",
    "        }",
    "",
    "        return this;",
    "      }",
    "",
    "      if (object === this) {",
    "        console.error(",
    '          "THREE.Object3D.add: object can\'t be added as a child of itself.",',
    "          object",
    "        );",
    "        return this;",
    "      }",
    "",
    "      if (object && object.isObject3D) {",
    "        if (object.parent !== null) {",
    "          object.parent.remove(object);",
    "        }",
    "",
    "        object.parent = this;",
    "        this.children.push(object);",
    "",
    "        object.dispatchEvent(_addedEvent);",
    "      } else {",
    "        console.error(",
    '          "THREE.Object3D.add: object not an instance of THREE.Object3D.",',
    "          object",
    "        );",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    remove(object) {",
    "      if (arguments.length > 1) {",
    "        for (let i = 0; i < arguments.length; i++) {",
    "          this.remove(arguments[i]);",
    "        }",
    "",
    "        return this;",
    "      }",
    "",
    "      const index = this.children.indexOf(object);",
    "",
    "      if (index !== -1) {",
    "        object.parent = null;",
    "        this.children.splice(index, 1);",
    "",
    "        object.dispatchEvent(_removedEvent);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    removeFromParent() {",
    "      const parent = this.parent;",
    "",
    "      if (parent !== null) {",
    "        parent.remove(this);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    clear() {",
    "      for (let i = 0; i < this.children.length; i++) {",
    "        const object = this.children[i];",
    "",
    "        object.parent = null;",
    "",
    "        object.dispatchEvent(_removedEvent);",
    "      }",
    "",
    "      this.children.length = 0;",
    "",
    "      return this;",
    "    }",
    "",
    "    attach(object) {",
    "      // adds object as a child of this, while maintaining the object's world transform",
    "",
    "      // Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)",
    "",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      _m1$1.copy(this.matrixWorld).invert();",
    "",
    "      if (object.parent !== null) {",
    "        object.parent.updateWorldMatrix(true, false);",
    "",
    "        _m1$1.multiply(object.parent.matrixWorld);",
    "      }",
    "",
    "      object.applyMatrix4(_m1$1);",
    "",
    "      this.add(object);",
    "",
    "      object.updateWorldMatrix(false, true);",
    "",
    "      return this;",
    "    }",
    "",
    "    getObjectById(id) {",
    '      return this.getObjectByProperty("id", id);',
    "    }",
    "",
    "    getObjectByName(name) {",
    '      return this.getObjectByProperty("name", name);',
    "    }",
    "",
    "    getObjectByProperty(name, value) {",
    "      if (this[name] === value) return this;",
    "",
    "      for (let i = 0, l = this.children.length; i < l; i++) {",
    "        const child = this.children[i];",
    "        const object = child.getObjectByProperty(name, value);",
    "",
    "        if (object !== undefined) {",
    "          return object;",
    "        }",
    "      }",
    "",
    "      return undefined;",
    "    }",
    "",
    "    getObjectsByProperty(name, value) {",
    "      let result = [];",
    "",
    "      if (this[name] === value) result.push(this);",
    "",
    "      for (let i = 0, l = this.children.length; i < l; i++) {",
    "        const childResult = this.children[i].getObjectsByProperty(name, value);",
    "",
    "        if (childResult.length > 0) {",
    "          result = result.concat(childResult);",
    "        }",
    "      }",
    "",
    "      return result;",
    "    }",
    "",
    "    getWorldPosition(target) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      return target.setFromMatrixPosition(this.matrixWorld);",
    "    }",
    "",
    "    getWorldQuaternion(target) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      this.matrixWorld.decompose(_position$3, target, _scale$2);",
    "",
    "      return target;",
    "    }",
    "",
    "    getWorldScale(target) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      this.matrixWorld.decompose(_position$3, _quaternion$2, target);",
    "",
    "      return target;",
    "    }",
    "",
    "    getWorldDirection(target) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      const e = this.matrixWorld.elements;",
    "",
    "      return target.set(e[8], e[9], e[10]).normalize();",
    "    }",
    "",
    "    raycast(/* raycaster, intersects */) {}",
    "",
    "    traverse(callback) {",
    "      callback(this);",
    "",
    "      const children = this.children;",
    "",
    "      for (let i = 0, l = children.length; i < l; i++) {",
    "        children[i].traverse(callback);",
    "      }",
    "    }",
    "",
    "    traverseVisible(callback) {",
    "      if (this.visible === false) return;",
    "",
    "      callback(this);",
    "",
    "      const children = this.children;",
    "",
    "      for (let i = 0, l = children.length; i < l; i++) {",
    "        children[i].traverseVisible(callback);",
    "      }",
    "    }",
    "",
    "    traverseAncestors(callback) {",
    "      const parent = this.parent;",
    "",
    "      if (parent !== null) {",
    "        callback(parent);",
    "",
    "        parent.traverseAncestors(callback);",
    "      }",
    "    }",
    "",
    "    updateMatrix() {",
    "      this.matrix.compose(this.position, this.quaternion, this.scale);",
    "",
    "      this.matrixWorldNeedsUpdate = true;",
    "    }",
    "",
    "    updateMatrixWorld(force) {",
    "      if (this.matrixAutoUpdate) this.updateMatrix();",
    "",
    "      if (this.matrixWorldNeedsUpdate || force) {",
    "        if (this.parent === null) {",
    "          this.matrixWorld.copy(this.matrix);",
    "        } else {",
    "          this.matrixWorld.multiplyMatrices(",
    "            this.parent.matrixWorld,",
    "            this.matrix",
    "          );",
    "        }",
    "",
    "        this.matrixWorldNeedsUpdate = false;",
    "",
    "        force = true;",
    "      }",
    "",
    "      // update children",
    "",
    "      const children = this.children;",
    "",
    "      for (let i = 0, l = children.length; i < l; i++) {",
    "        const child = children[i];",
    "",
    "        if (child.matrixWorldAutoUpdate === true || force === true) {",
    "          child.updateMatrixWorld(force);",
    "        }",
    "      }",
    "    }",
    "",
    "    updateWorldMatrix(updateParents, updateChildren) {",
    "      const parent = this.parent;",
    "",
    "      if (",
    "        updateParents === true &&",
    "        parent !== null &&",
    "        parent.matrixWorldAutoUpdate === true",
    "      ) {",
    "        parent.updateWorldMatrix(true, false);",
    "      }",
    "",
    "      if (this.matrixAutoUpdate) this.updateMatrix();",
    "",
    "      if (this.parent === null) {",
    "        this.matrixWorld.copy(this.matrix);",
    "      } else {",
    "        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);",
    "      }",
    "",
    "      // update children",
    "",
    "      if (updateChildren === true) {",
    "        const children = this.children;",
    "",
    "        for (let i = 0, l = children.length; i < l; i++) {",
    "          const child = children[i];",
    "",
    "          if (child.matrixWorldAutoUpdate === true) {",
    "            child.updateWorldMatrix(false, true);",
    "          }",
    "        }",
    "      }",
    "    }",
    "",
    "    toJSON(meta) {",
    "      // meta is a string when called from JSON.stringify",
    '      const isRootObject = meta === undefined || typeof meta === "string";',
    "",
    "      const output = {};",
    "",
    "      // meta is a hash used to collect geometries, materials.",
    "      // not providing it implies that this is the root object",
    "      // being serialized.",
    "      if (isRootObject) {",
    "        // initialize meta obj",
    "        meta = {",
    "          geometries: {},",
    "          materials: {},",
    "          textures: {},",
    "          images: {},",
    "          shapes: {},",
    "          skeletons: {},",
    "          animations: {},",
    "          nodes: {},",
    "        };",
    "",
    "        output.metadata = {",
    "          version: 4.5,",
    '          type: "Object",',
    '          generator: "Object3D.toJSON",',
    "        };",
    "      }",
    "",
    "      // standard Object3D serialization",
    "",
    "      const object = {};",
    "",
    "      object.uuid = this.uuid;",
    "      object.type = this.type;",
    "",
    '      if (this.name !=="") object.name = this.name;',
    "      if (this.castShadow === true) object.castShadow = true;",
    "      if (this.receiveShadow === true) object.receiveShadow = true;",
    "      if (this.visible === false) object.visible = false;",
    "      if (this.frustumCulled === false) object.frustumCulled = false;",
    "      if (this.renderOrder !== 0) object.renderOrder = this.renderOrder;",
    "      if (Object.keys(this.userData).length > 0)",
    "        object.userData = this.userData;",
    "",
    "      object.layers = this.layers.mask;",
    "      object.matrix = this.matrix.toArray();",
    "",
    "      if (this.matrixAutoUpdate === false) object.matrixAutoUpdate = false;",
    "",
    "      // object specific properties",
    "",
    "      if (this.isInstancedMesh) {",
    '        object.type = "InstancedMesh";',
    "        object.count = this.count;",
    "        object.instanceMatrix = this.instanceMatrix.toJSON();",
    "        if (this.instanceColor !== null)",
    "          object.instanceColor = this.instanceColor.toJSON();",
    "      }",
    "",
    "      //",
    "",
    "      function serialize(library, element) {",
    "        if (library[element.uuid] === undefined) {",
    "          library[element.uuid] = element.toJSON(meta);",
    "        }",
    "",
    "        return element.uuid;",
    "      }",
    "",
    "      if (this.isScene) {",
    "        if (this.background) {",
    "          if (this.background.isColor) {",
    "            object.background = this.background.toJSON();",
    "          } else if (this.background.isTexture) {",
    "            object.background = this.background.toJSON(meta).uuid;",
    "          }",
    "        }",
    "",
    "        if (",
    "          this.environment &&",
    "          this.environment.isTexture &&",
    "          this.environment.isRenderTargetTexture !== true",
    "        ) {",
    "          object.environment = this.environment.toJSON(meta).uuid;",
    "        }",
    "      } else if (this.isMesh || this.isLine || this.isPoints) {",
    "        object.geometry = serialize(meta.geometries, this.geometry);",
    "",
    "        const parameters = this.geometry.parameters;",
    "",
    "        if (parameters !== undefined && parameters.shapes !== undefined) {",
    "          const shapes = parameters.shapes;",
    "",
    "          if (Array.isArray(shapes)) {",
    "            for (let i = 0, l = shapes.length; i < l; i++) {",
    "              const shape = shapes[i];",
    "",
    "              serialize(meta.shapes, shape);",
    "            }",
    "          } else {",
    "            serialize(meta.shapes, shapes);",
    "          }",
    "        }",
    "      }",
    "",
    "      if (this.isSkinnedMesh) {",
    "        object.bindMode = this.bindMode;",
    "        object.bindMatrix = this.bindMatrix.toArray();",
    "",
    "        if (this.skeleton !== undefined) {",
    "          serialize(meta.skeletons, this.skeleton);",
    "",
    "          object.skeleton = this.skeleton.uuid;",
    "        }",
    "      }",
    "",
    "      if (this.material !== undefined) {",
    "        if (Array.isArray(this.material)) {",
    "          const uuids = [];",
    "",
    "          for (let i = 0, l = this.material.length; i < l; i++) {",
    "            uuids.push(serialize(meta.materials, this.material[i]));",
    "          }",
    "",
    "          object.material = uuids;",
    "        } else {",
    "          object.material = serialize(meta.materials, this.material);",
    "        }",
    "      }",
    "",
    "      //",
    "",
    "      if (this.children.length > 0) {",
    "        object.children = [];",
    "",
    "        for (let i = 0; i < this.children.length; i++) {",
    "          object.children.push(this.children[i].toJSON(meta).object);",
    "        }",
    "      }",
    "",
    "      //",
    "",
    "      if (this.animations.length > 0) {",
    "        object.animations = [];",
    "",
    "        for (let i = 0; i < this.animations.length; i++) {",
    "          const animation = this.animations[i];",
    "",
    "          object.animations.push(serialize(meta.animations, animation));",
    "        }",
    "      }",
    "",
    "      if (isRootObject) {",
    "        const geometries = extractFromCache(meta.geometries);",
    "        const materials = extractFromCache(meta.materials);",
    "        const textures = extractFromCache(meta.textures);",
    "        const images = extractFromCache(meta.images);",
    "        const shapes = extractFromCache(meta.shapes);",
    "        const skeletons = extractFromCache(meta.skeletons);",
    "        const animations = extractFromCache(meta.animations);",
    "        const nodes = extractFromCache(meta.nodes);",
    "",
    "        if (geometries.length > 0) output.geometries = geometries;",
    "        if (materials.length > 0) output.materials = materials;",
    "        if (textures.length > 0) output.textures = textures;",
    "        if (images.length > 0) output.images = images;",
    "        if (shapes.length > 0) output.shapes = shapes;",
    "        if (skeletons.length > 0) output.skeletons = skeletons;",
    "        if (animations.length > 0) output.animations = animations;",
    "        if (nodes.length > 0) output.nodes = nodes;",
    "      }",
    "",
    "      output.object = object;",
    "",
    "      return output;",
    "",
    "      // extract data from the cache hash",
    "      // remove metadata on each item",
    "      // and return as array",
    "      function extractFromCache(cache) {",
    "        const values = [];",
    "        for (const key in cache) {",
    "          const data = cache[key];",
    "          delete data.metadata;",
    "          values.push(data);",
    "        }",
    "",
    "        return values;",
    "      }",
    "    }",
    "",
    "    clone(recursive) {",
    "      return new this.constructor().copy(this, recursive);",
    "    }",
    "",
    "    copy(source, recursive = true) {",
    "      this.name = source.name;",
    "",
    "      this.up.copy(source.up);",
    "",
    "      this.position.copy(source.position);",
    "      this.rotation.order = source.rotation.order;",
    "      this.quaternion.copy(source.quaternion);",
    "      this.scale.copy(source.scale);",
    "",
    "      this.matrix.copy(source.matrix);",
    "      this.matrixWorld.copy(source.matrixWorld);",
    "",
    "      this.matrixAutoUpdate = source.matrixAutoUpdate;",
    "      this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;",
    "",
    "      this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;",
    "",
    "      this.layers.mask = source.layers.mask;",
    "      this.visible = source.visible;",
    "",
    "      this.castShadow = source.castShadow;",
    "      this.receiveShadow = source.receiveShadow;",
    "",
    "      this.frustumCulled = source.frustumCulled;",
    "      this.renderOrder = source.renderOrder;",
    "",
    "      this.userData = JSON.parse(JSON.stringify(source.userData));",
    "",
    "      if (recursive === true) {",
    "        for (let i = 0; i < source.children.length; i++) {",
    "          const child = source.children[i];",
    "          this.add(child.clone());",
    "        }",
    "      }",
    "",
    "      return this;",
    "    }",
    "  }",
    "",
    "  Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3(0, 1, 0);",
    "  Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;",
    "  Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;",
    "",
    "  const _v0$1 = /*@__PURE__*/ new Vector3();",
    "  const _v1$3 = /*@__PURE__*/ new Vector3();",
    "  const _v2$2 = /*@__PURE__*/ new Vector3();",
    "  const _v3$1 = /*@__PURE__*/ new Vector3();",
    "",
    "  const _vab = /*@__PURE__*/ new Vector3();",
    "  const _vac = /*@__PURE__*/ new Vector3();",
    "  const _vbc = /*@__PURE__*/ new Vector3();",
    "  const _vap = /*@__PURE__*/ new Vector3();",
    "  const _vbp = /*@__PURE__*/ new Vector3();",
    "  const _vcp = /*@__PURE__*/ new Vector3();",
    "",
    "  class Triangle {",
    "    constructor(a = new Vector3(), b = new Vector3(), c = new Vector3()) {",
    "      this.a = a;",
    "      this.b = b;",
    "      this.c = c;",
    "    }",
    "",
    "    static getNormal(a, b, c, target) {",
    "      target.subVectors(c, b);",
    "      _v0$1.subVectors(a, b);",
    "      target.cross(_v0$1);",
    "",
    "      const targetLengthSq = target.lengthSq();",
    "      if (targetLengthSq > 0) {",
    "        return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));",
    "      }",
    "",
    "      return target.set(0, 0, 0);",
    "    }",
    "",
    "    // static/instance method to calculate barycentric coordinates",
    "    // based on: http://www.blackpawn.com/texts/pointinpoly/default.html",
    "    static getBarycoord(point, a, b, c, target) {",
    "      _v0$1.subVectors(c, a);",
    "      _v1$3.subVectors(b, a);",
    "      _v2$2.subVectors(point, a);",
    "",
    "      const dot00 = _v0$1.dot(_v0$1);",
    "      const dot01 = _v0$1.dot(_v1$3);",
    "      const dot02 = _v0$1.dot(_v2$2);",
    "      const dot11 = _v1$3.dot(_v1$3);",
    "      const dot12 = _v1$3.dot(_v2$2);",
    "",
    "      const denom = dot00 * dot11 - dot01 * dot01;",
    "",
    "      // collinear or singular triangle",
    "      if (denom === 0) {",
    "        // arbitrary location outside of triangle?",
    "        // not sure if this is the best idea, maybe should be returning undefined",
    "        return target.set(-2, -1, -1);",
    "      }",
    "",
    "      const invDenom = 1 / denom;",
    "      const u = (dot11 * dot02 - dot01 * dot12) * invDenom;",
    "      const v = (dot00 * dot12 - dot01 * dot02) * invDenom;",
    "",
    "      // barycentric coordinates must always sum to 1",
    "      return target.set(1 - u - v, v, u);",
    "    }",
    "",
    "    static containsPoint(point, a, b, c) {",
    "      this.getBarycoord(point, a, b, c, _v3$1);",
    "",
    "      return _v3$1.x >= 0 && _v3$1.y >= 0 && _v3$1.x + _v3$1.y <= 1;",
    "    }",
    "",
    "    static getUV(point, p1, p2, p3, uv1, uv2, uv3, target) {",
    "      this.getBarycoord(point, p1, p2, p3, _v3$1);",
    "",
    "      target.set(0, 0);",
    "      target.addScaledVector(uv1, _v3$1.x);",
    "      target.addScaledVector(uv2, _v3$1.y);",
    "      target.addScaledVector(uv3, _v3$1.z);",
    "",
    "      return target;",
    "    }",
    "",
    "    static isFrontFacing(a, b, c, direction) {",
    "      _v0$1.subVectors(c, b);",
    "      _v1$3.subVectors(a, b);",
    "",
    "      // strictly front facing",
    "      return _v0$1.cross(_v1$3).dot(direction) < 0 ? true : false;",
    "    }",
    "",
    "    set(a, b, c) {",
    "      this.a.copy(a);",
    "      this.b.copy(b);",
    "      this.c.copy(c);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromPointsAndIndices(points, i0, i1, i2) {",
    "      this.a.copy(points[i0]);",
    "      this.b.copy(points[i1]);",
    "      this.c.copy(points[i2]);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromAttributeAndIndices(attribute, i0, i1, i2) {",
    "      this.a.fromBufferAttribute(attribute, i0);",
    "      this.b.fromBufferAttribute(attribute, i1);",
    "      this.c.fromBufferAttribute(attribute, i2);",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(triangle) {",
    "      this.a.copy(triangle.a);",
    "      this.b.copy(triangle.b);",
    "      this.c.copy(triangle.c);",
    "",
    "      return this;",
    "    }",
    "",
    "    getArea() {",
    "      _v0$1.subVectors(this.c, this.b);",
    "      _v1$3.subVectors(this.a, this.b);",
    "",
    "      return _v0$1.cross(_v1$3).length() * 0.5;",
    "    }",
    "",
    "    getMidpoint(target) {",
    "      return target",
    "        .addVectors(this.a, this.b)",
    "        .add(this.c)",
    "        .multiplyScalar(1 / 3);",
    "    }",
    "",
    "    getNormal(target) {",
    "      return Triangle.getNormal(this.a, this.b, this.c, target);",
    "    }",
    "",
    "    getPlane(target) {",
    "      return target.setFromCoplanarPoints(this.a, this.b, this.c);",
    "    }",
    "",
    "    getBarycoord(point, target) {",
    "      return Triangle.getBarycoord(point, this.a, this.b, this.c, target);",
    "    }",
    "",
    "    getUV(point, uv1, uv2, uv3, target) {",
    "      return Triangle.getUV(",
    "        point,",
    "        this.a,",
    "        this.b,",
    "        this.c,",
    "        uv1,",
    "        uv2,",
    "        uv3,",
    "        target",
    "      );",
    "    }",
    "",
    "    containsPoint(point) {",
    "      return Triangle.containsPoint(point, this.a, this.b, this.c);",
    "    }",
    "",
    "    isFrontFacing(direction) {",
    "      return Triangle.isFrontFacing(this.a, this.b, this.c, direction);",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      return box.intersectsTriangle(this);",
    "    }",
    "",
    "    closestPointToPoint(p, target) {",
    "      const a = this.a,",
    "        b = this.b,",
    "        c = this.c;",
    "      let v, w;",
    "",
    "      // algorithm thanks to Real-Time Collision Detection by Christer Ericson,",
    "      // published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,",
    "      // under the accompanying license; see chapter 5.1.5 for detailed explanation.",
    "      // basically, we're distinguishing which of the voronoi regions of the triangle",
    "      // the point lies in with the minimum amount of redundant computation.",
    "",
    "      _vab.subVectors(b, a);",
    "      _vac.subVectors(c, a);",
    "      _vap.subVectors(p, a);",
    "      const d1 = _vab.dot(_vap);",
    "      const d2 = _vac.dot(_vap);",
    "      if (d1 <= 0 && d2 <= 0) {",
    "        // vertex region of A; barycentric coords (1, 0, 0)",
    "        return target.copy(a);",
    "      }",
    "",
    "      _vbp.subVectors(p, b);",
    "      const d3 = _vab.dot(_vbp);",
    "      const d4 = _vac.dot(_vbp);",
    "      if (d3 >= 0 && d4 <= d3) {",
    "        // vertex region of B; barycentric coords (0, 1, 0)",
    "        return target.copy(b);",
    "      }",
    "",
    "      const vc = d1 * d4 - d3 * d2;",
    "      if (vc <= 0 && d1 >= 0 && d3 <= 0) {",
    "        v = d1 / (d1 - d3);",
    "        // edge region of AB; barycentric coords (1-v, v, 0)",
    "        return target.copy(a).addScaledVector(_vab, v);",
    "      }",
    "",
    "      _vcp.subVectors(p, c);",
    "      const d5 = _vab.dot(_vcp);",
    "      const d6 = _vac.dot(_vcp);",
    "      if (d6 >= 0 && d5 <= d6) {",
    "        // vertex region of C; barycentric coords (0, 0, 1)",
    "        return target.copy(c);",
    "      }",
    "",
    "      const vb = d5 * d2 - d1 * d6;",
    "      if (vb <= 0 && d2 >= 0 && d6 <= 0) {",
    "        w = d2 / (d2 - d6);",
    "        // edge region of AC; barycentric coords (1-w, 0, w)",
    "        return target.copy(a).addScaledVector(_vac, w);",
    "      }",
    "",
    "      const va = d3 * d6 - d5 * d4;",
    "      if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {",
    "        _vbc.subVectors(c, b);",
    "        w = (d4 - d3) / (d4 - d3 + (d5 - d6));",
    "        // edge region of BC; barycentric coords (0, 1-w, w)",
    "        return target.copy(b).addScaledVector(_vbc, w); // edge region of BC",
    "      }",
    "",
    "      // face region",
    "      const denom = 1 / (va + vb + vc);",
    "      // u = va * denom",
    "      v = vb * denom;",
    "      w = vc * denom;",
    "",
    "      return target.copy(a).addScaledVector(_vab, v).addScaledVector(_vac, w);",
    "    }",
    "",
    "    equals(triangle) {",
    "      return (",
    "        triangle.a.equals(this.a) &&",
    "        triangle.b.equals(this.b) &&",
    "        triangle.c.equals(this.c)",
    "      );",
    "    }",
    "  }",
    "",
    "  let materialId = 0;",
    "",
    "  class Material extends EventDispatcher {",
    "    constructor() {",
    "      super();",
    "",
    "      this.isMaterial = true;",
    "",
    '      Object.defineProperty(this, "id", { value: materialId++ });',
    "",
    "      this.uuid = generateUUID();",
    "",
    '      this.name = "";',
    '      this.type = "Material";',
    "",
    "      this.blending = NormalBlending;",
    "      this.side = FrontSide;",
    "      this.vertexColors = false;",
    "",
    "      this.opacity = 1;",
    "      this.transparent = false;",
    "",
    "      this.blendSrc = SrcAlphaFactor;",
    "      this.blendDst = OneMinusSrcAlphaFactor;",
    "      this.blendEquation = AddEquation;",
    "      this.blendSrcAlpha = null;",
    "      this.blendDstAlpha = null;",
    "      this.blendEquationAlpha = null;",
    "",
    "      this.depthFunc = LessEqualDepth;",
    "      this.depthTest = true;",
    "      this.depthWrite = true;",
    "",
    "      this.stencilWriteMask = 0xff;",
    "      this.stencilFunc = AlwaysStencilFunc;",
    "      this.stencilRef = 0;",
    "      this.stencilFuncMask = 0xff;",
    "      this.stencilFail = KeepStencilOp;",
    "      this.stencilZFail = KeepStencilOp;",
    "      this.stencilZPass = KeepStencilOp;",
    "      this.stencilWrite = false;",
    "",
    "      this.clippingPlanes = null;",
    "      this.clipIntersection = false;",
    "      this.clipShadows = false;",
    "",
    "      this.shadowSide = null;",
    "",
    "      this.colorWrite = true;",
    "",
    "      this.precision = null; // override the renderer's default precision for this material",
    "",
    "      this.polygonOffset = false;",
    "      this.polygonOffsetFactor = 0;",
    "      this.polygonOffsetUnits = 0;",
    "",
    "      this.dithering = false;",
    "",
    "      this.alphaToCoverage = false;",
    "      this.premultipliedAlpha = false;",
    "      this.forceSinglePass = false;",
    "",
    "      this.visible = true;",
    "",
    "      this.toneMapped = true;",
    "",
    "      this.userData = {};",
    "",
    "      this.version = 0;",
    "",
    "      this._alphaTest = 0;",
    "    }",
    "",
    "    get alphaTest() {",
    "      return this._alphaTest;",
    "    }",
    "",
    "    set alphaTest(value) {",
    "      if (this._alphaTest > 0 !== value > 0) {",
    "        this.version++;",
    "      }",
    "",
    "      this._alphaTest = value;",
    "    }",
    "",
    "    onBuild(/* shaderobject, renderer */) {}",
    "",
    "    onBeforeRender(/* renderer, scene, camera, geometry, object, group */) {}",
    "",
    "    onBeforeCompile(/* shaderobject, renderer */) {}",
    "",
    "    customProgramCacheKey() {",
    "      return this.onBeforeCompile.toString();",
    "    }",
    "",
    "    setValues(values) {",
    "      if (values === undefined) return;",
    "",
    "      for (const key in values) {",
    "        const newValue = values[key];",
    "",
    "        if (newValue === undefined) {",
    '          console.warn("THREE.Material: \'" + key + "\' parameter is undefined.");',
    "          continue;",
    "        }",
    "",
    "        const currentValue = this[key];",
    "",
    "        if (currentValue === undefined) {",
    "          console.warn(",
    '            "THREE." +',
    "              this.type +",
    '              ": \'" +',
    "              key +",
    '              "\' is not a property of this material."',
    "          );",
    "          continue;",
    "        }",
    "",
    "        if (currentValue && currentValue.isColor) {",
    "          currentValue.set(newValue);",
    "        } else if (",
    "          currentValue &&",
    "          currentValue.isVector3 &&",
    "          newValue &&",
    "          newValue.isVector3",
    "        ) {",
    "          currentValue.copy(newValue);",
    "        } else {",
    "          this[key] = newValue;",
    "        }",
    "      }",
    "    }",
    "",
    "    toJSON(meta) {",
    '      const isRootObject = meta === undefined || typeof meta === "string";',
    "",
    "      if (isRootObject) {",
    "        meta = {",
    "          textures: {},",
    "          images: {},",
    "        };",
    "      }",
    "",
    "      const data = {",
    "        metadata: {",
    "          version: 4.5,",
    '          type: "Material",',
    '          generator: "Material.toJSON",',
    "        },",
    "      };",
    "",
    "      // standard Material serialization",
    "      data.uuid = this.uuid;",
    "      data.type = this.type;",
    "",
    '      if (this.name !== "\\\\\\\\\\\\\\\\\\\\\\\\") data.name = this.name;',
    "",
    "      if (this.color && this.color.isColor) data.color = this.color.getHex();",
    "",
    "      if (this.roughness !== undefined) data.roughness = this.roughness;",
    "      if (this.metalness !== undefined) data.metalness = this.metalness;",
    "",
    "      if (this.sheen !== undefined) data.sheen = this.sheen;",
    "      if (this.sheenColor && this.sheenColor.isColor)",
    "        data.sheenColor = this.sheenColor.getHex();",
    "      if (this.sheenRoughness !== undefined)",
    "        data.sheenRoughness = this.sheenRoughness;",
    "      if (this.emissive && this.emissive.isColor)",
    "        data.emissive = this.emissive.getHex();",
    "      if (this.emissiveIntensity && this.emissiveIntensity !== 1)",
    "        data.emissiveIntensity = this.emissiveIntensity;",
    "",
    "      if (this.specular && this.specular.isColor)",
    "        data.specular = this.specular.getHex();",
    "      if (this.specularIntensity !== undefined)",
    "        data.specularIntensity = this.specularIntensity;",
    "      if (this.specularColor && this.specularColor.isColor)",
    "        data.specularColor = this.specularColor.getHex();",
    "      if (this.shininess !== undefined) data.shininess = this.shininess;",
    "      if (this.clearcoat !== undefined) data.clearcoat = this.clearcoat;",
    "      if (this.clearcoatRoughness !== undefined)",
    "        data.clearcoatRoughness = this.clearcoatRoughness;",
    "",
    "      if (this.clearcoatMap && this.clearcoatMap.isTexture) {",
    "        data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;",
    "      }",
    "",
    "      if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {",
    "        data.clearcoatRoughnessMap =",
    "          this.clearcoatRoughnessMap.toJSON(meta).uuid;",
    "      }",
    "",
    "      if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {",
    "        data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;",
    "        data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();",
    "      }",
    "",
    "      if (this.iridescence !== undefined) data.iridescence = this.iridescence;",
    "      if (this.iridescenceIOR !== undefined)",
    "        data.iridescenceIOR = this.iridescenceIOR;",
    "      if (this.iridescenceThicknessRange !== undefined)",
    "        data.iridescenceThicknessRange = this.iridescenceThicknessRange;",
    "",
    "      if (this.iridescenceMap && this.iridescenceMap.isTexture) {",
    "        data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;",
    "      }",
    "",
    "      if (",
    "        this.iridescenceThicknessMap &&",
    "        this.iridescenceThicknessMap.isTexture",
    "      ) {",
    "        data.iridescenceThicknessMap =",
    "          this.iridescenceThicknessMap.toJSON(meta).uuid;",
    "      }",
    "",
    "      if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;",
    "      if (this.matcap && this.matcap.isTexture)",
    "        data.matcap = this.matcap.toJSON(meta).uuid;",
    "      if (this.alphaMap && this.alphaMap.isTexture)",
    "        data.alphaMap = this.alphaMap.toJSON(meta).uuid;",
    "",
    "      if (this.lightMap && this.lightMap.isTexture) {",
    "        data.lightMap = this.lightMap.toJSON(meta).uuid;",
    "        data.lightMapIntensity = this.lightMapIntensity;",
    "      }",
    "",
    "      if (this.aoMap && this.aoMap.isTexture) {",
    "        data.aoMap = this.aoMap.toJSON(meta).uuid;",
    "        data.aoMapIntensity = this.aoMapIntensity;",
    "      }",
    "",
    "      if (this.bumpMap && this.bumpMap.isTexture) {",
    "        data.bumpMap = this.bumpMap.toJSON(meta).uuid;",
    "        data.bumpScale = this.bumpScale;",
    "      }",
    "",
    "      if (this.normalMap && this.normalMap.isTexture) {",
    "        data.normalMap = this.normalMap.toJSON(meta).uuid;",
    "        data.normalMapType = this.normalMapType;",
    "        data.normalScale = this.normalScale.toArray();",
    "      }",
    "",
    "      if (this.displacementMap && this.displacementMap.isTexture) {",
    "        data.displacementMap = this.displacementMap.toJSON(meta).uuid;",
    "        data.displacementScale = this.displacementScale;",
    "        data.displacementBias = this.displacementBias;",
    "      }",
    "",
    "      if (this.roughnessMap && this.roughnessMap.isTexture)",
    "        data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;",
    "      if (this.metalnessMap && this.metalnessMap.isTexture)",
    "        data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;",
    "",
    "      if (this.emissiveMap && this.emissiveMap.isTexture)",
    "        data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;",
    "      if (this.specularMap && this.specularMap.isTexture)",
    "        data.specularMap = this.specularMap.toJSON(meta).uuid;",
    "      if (this.specularIntensityMap && this.specularIntensityMap.isTexture)",
    "        data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;",
    "      if (this.specularColorMap && this.specularColorMap.isTexture)",
    "        data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;",
    "",
    "      if (this.envMap && this.envMap.isTexture) {",
    "        data.envMap = this.envMap.toJSON(meta).uuid;",
    "",
    "        if (this.combine !== undefined) data.combine = this.combine;",
    "      }",
    "",
    "      if (this.envMapIntensity !== undefined)",
    "        data.envMapIntensity = this.envMapIntensity;",
    "      if (this.reflectivity !== undefined)",
    "        data.reflectivity = this.reflectivity;",
    "      if (this.refractionRatio !== undefined)",
    "        data.refractionRatio = this.refractionRatio;",
    "",
    "      if (this.gradientMap && this.gradientMap.isTexture) {",
    "        data.gradientMap = this.gradientMap.toJSON(meta).uuid;",
    "      }",
    "",
    "      if (this.transmission !== undefined)",
    "        data.transmission = this.transmission;",
    "      if (this.transmissionMap && this.transmissionMap.isTexture)",
    "        data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;",
    "      if (this.thickness !== undefined) data.thickness = this.thickness;",
    "      if (this.thicknessMap && this.thicknessMap.isTexture)",
    "        data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;",
    "      if (",
    "        this.attenuationDistance !== undefined &&",
    "        this.attenuationDistance !== Infinity",
    "      )",
    "        data.attenuationDistance = this.attenuationDistance;",
    "      if (this.attenuationColor !== undefined)",
    "        data.attenuationColor = this.attenuationColor.getHex();",
    "",
    "      if (this.size !== undefined) data.size = this.size;",
    "      if (this.shadowSide !== null) data.shadowSide = this.shadowSide;",
    "      if (this.sizeAttenuation !== undefined)",
    "        data.sizeAttenuation = this.sizeAttenuation;",
    "",
    "      if (this.blending !== NormalBlending) data.blending = this.blending;",
    "      if (this.side !== FrontSide) data.side = this.side;",
    "      if (this.vertexColors) data.vertexColors = true;",
    "",
    "      if (this.opacity < 1) data.opacity = this.opacity;",
    "      if (this.transparent === true) data.transparent = this.transparent;",
    "",
    "      data.depthFunc = this.depthFunc;",
    "      data.depthTest = this.depthTest;",
    "      data.depthWrite = this.depthWrite;",
    "      data.colorWrite = this.colorWrite;",
    "",
    "      data.stencilWrite = this.stencilWrite;",
    "      data.stencilWriteMask = this.stencilWriteMask;",
    "      data.stencilFunc = this.stencilFunc;",
    "      data.stencilRef = this.stencilRef;",
    "      data.stencilFuncMask = this.stencilFuncMask;",
    "      data.stencilFail = this.stencilFail;",
    "      data.stencilZFail = this.stencilZFail;",
    "      data.stencilZPass = this.stencilZPass;",
    "",
    "      // rotation (SpriteMaterial)",
    "      if (this.rotation !== undefined && this.rotation !== 0)",
    "        data.rotation = this.rotation;",
    "",
    "      if (this.polygonOffset === true) data.polygonOffset = true;",
    "      if (this.polygonOffsetFactor !== 0)",
    "        data.polygonOffsetFactor = this.polygonOffsetFactor;",
    "      if (this.polygonOffsetUnits !== 0)",
    "        data.polygonOffsetUnits = this.polygonOffsetUnits;",
    "",
    "      if (this.linewidth !== undefined && this.linewidth !== 1)",
    "        data.linewidth = this.linewidth;",
    "      if (this.dashSize !== undefined) data.dashSize = this.dashSize;",
    "      if (this.gapSize !== undefined) data.gapSize = this.gapSize;",
    "      if (this.scale !== undefined) data.scale = this.scale;",
    "",
    "      if (this.dithering === true) data.dithering = true;",
    "",
    "      if (this.alphaTest > 0) data.alphaTest = this.alphaTest;",
    "      if (this.alphaToCoverage === true)",
    "        data.alphaToCoverage = this.alphaToCoverage;",
    "      if (this.premultipliedAlpha === true)",
    "        data.premultipliedAlpha = this.premultipliedAlpha;",
    "      if (this.forceSinglePass === true)",
    "        data.forceSinglePass = this.forceSinglePass;",
    "",
    "      if (this.wireframe === true) data.wireframe = this.wireframe;",
    "      if (this.wireframeLinewidth > 1)",
    "        data.wireframeLinewidth = this.wireframeLinewidth;",
    '      if (this.wireframeLinecap !== "round")',
    "        data.wireframeLinecap = this.wireframeLinecap;",
    '      if (this.wireframeLinejoin !== "round")',
    "        data.wireframeLinejoin = this.wireframeLinejoin;",
    "",
    "      if (this.flatShading === true) data.flatShading = this.flatShading;",
    "",
    "      if (this.visible === false) data.visible = false;",
    "",
    "      if (this.toneMapped === false) data.toneMapped = false;",
    "",
    "      if (this.fog === false) data.fog = false;",
    "",
    "      if (Object.keys(this.userData).length > 0) data.userData = this.userData;",
    "",
    "      // TODO: Copied from Object3D.toJSON",
    "",
    "      function extractFromCache(cache) {",
    "        const values = [];",
    "",
    "        for (const key in cache) {",
    "          const data = cache[key];",
    "          delete data.metadata;",
    "          values.push(data);",
    "        }",
    "",
    "        return values;",
    "      }",
    "",
    "      if (isRootObject) {",
    "        const textures = extractFromCache(meta.textures);",
    "        const images = extractFromCache(meta.images);",
    "",
    "        if (textures.length > 0) data.textures = textures;",
    "        if (images.length > 0) data.images = images;",
    "      }",
    "",
    "      return data;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(source) {",
    "      this.name = source.name;",
    "",
    "      this.blending = source.blending;",
    "      this.side = source.side;",
    "      this.vertexColors = source.vertexColors;",
    "",
    "      this.opacity = source.opacity;",
    "      this.transparent = source.transparent;",
    "",
    "      this.blendSrc = source.blendSrc;",
    "      this.blendDst = source.blendDst;",
    "      this.blendEquation = source.blendEquation;",
    "      this.blendSrcAlpha = source.blendSrcAlpha;",
    "      this.blendDstAlpha = source.blendDstAlpha;",
    "      this.blendEquationAlpha = source.blendEquationAlpha;",
    "",
    "      this.depthFunc = source.depthFunc;",
    "      this.depthTest = source.depthTest;",
    "      this.depthWrite = source.depthWrite;",
    "",
    "      this.stencilWriteMask = source.stencilWriteMask;",
    "      this.stencilFunc = source.stencilFunc;",
    "      this.stencilRef = source.stencilRef;",
    "      this.stencilFuncMask = source.stencilFuncMask;",
    "      this.stencilFail = source.stencilFail;",
    "      this.stencilZFail = source.stencilZFail;",
    "      this.stencilZPass = source.stencilZPass;",
    "      this.stencilWrite = source.stencilWrite;",
    "",
    "      const srcPlanes = source.clippingPlanes;",
    "      let dstPlanes = null;",
    "",
    "      if (srcPlanes !== null) {",
    "        const n = srcPlanes.length;",
    "        dstPlanes = new Array(n);",
    "",
    "        for (let i = 0; i !== n; ++i) {",
    "          dstPlanes[i] = srcPlanes[i].clone();",
    "        }",
    "      }",
    "",
    "      this.clippingPlanes = dstPlanes;",
    "      this.clipIntersection = source.clipIntersection;",
    "      this.clipShadows = source.clipShadows;",
    "",
    "      this.shadowSide = source.shadowSide;",
    "",
    "      this.colorWrite = source.colorWrite;",
    "",
    "      this.precision = source.precision;",
    "",
    "      this.polygonOffset = source.polygonOffset;",
    "      this.polygonOffsetFactor = source.polygonOffsetFactor;",
    "      this.polygonOffsetUnits = source.polygonOffsetUnits;",
    "",
    "      this.dithering = source.dithering;",
    "",
    "      this.alphaTest = source.alphaTest;",
    "      this.alphaToCoverage = source.alphaToCoverage;",
    "      this.premultipliedAlpha = source.premultipliedAlpha;",
    "      this.forceSinglePass = source.forceSinglePass;",
    "",
    "      this.visible = source.visible;",
    "",
    "      this.toneMapped = source.toneMapped;",
    "",
    "      this.userData = JSON.parse(JSON.stringify(source.userData));",
    "",
    "      return this;",
    "    }",
    "",
    "    dispose() {",
    '      this.dispatchEvent({ type: "dispose" });',
    "    }",
    "",
    "    set needsUpdate(value) {",
    "      if (value === true) this.version++;",
    "    }",
    "  }",
    "",
    "  class MeshBasicMaterial extends Material {",
    "    constructor(parameters) {",
    "      super();",
    "",
    "      this.isMeshBasicMaterial = true;",
    "",
    '      this.type = "MeshBasicMaterial";',
    "",
    "      this.color = new Color(0xffffff); // emissive",
    "",
    "      this.map = null;",
    "",
    "      this.lightMap = null;",
    "      this.lightMapIntensity = 1.0;",
    "",
    "      this.aoMap = null;",
    "      this.aoMapIntensity = 1.0;",
    "",
    "      this.specularMap = null;",
    "",
    "      this.alphaMap = null;",
    "",
    "      this.envMap = null;",
    "      this.combine = MultiplyOperation;",
    "      this.reflectivity = 1;",
    "      this.refractionRatio = 0.98;",
    "",
    "      this.wireframe = false;",
    "      this.wireframeLinewidth = 1;",
    '      this.wireframeLinecap = "round";',
    '      this.wireframeLinejoin = "round";',
    "",
    "      this.fog = true;",
    "",
    "      this.setValues(parameters);",
    "    }",
    "",
    "    copy(source) {",
    "      super.copy(source);",
    "",
    "      this.color.copy(source.color);",
    "",
    "      this.map = source.map;",
    "",
    "      this.lightMap = source.lightMap;",
    "      this.lightMapIntensity = source.lightMapIntensity;",
    "",
    "      this.aoMap = source.aoMap;",
    "      this.aoMapIntensity = source.aoMapIntensity;",
    "",
    "      this.specularMap = source.specularMap;",
    "",
    "      this.alphaMap = source.alphaMap;",
    "",
    "      this.envMap = source.envMap;",
    "      this.combine = source.combine;",
    "      this.reflectivity = source.reflectivity;",
    "      this.refractionRatio = source.refractionRatio;",
    "",
    "      this.wireframe = source.wireframe;",
    "      this.wireframeLinewidth = source.wireframeLinewidth;",
    "      this.wireframeLinecap = source.wireframeLinecap;",
    "      this.wireframeLinejoin = source.wireframeLinejoin;",
    "",
    "      this.fog = source.fog;",
    "",
    "      return this;",
    "    }",
    "  }",
    "",
    "  const _vector$9 = /*@__PURE__*/ new Vector3();",
    "  const _vector2$1 = /*@__PURE__*/ new Vector2();",
    "",
    "  class BufferAttribute {",
    "    constructor(array, itemSize, normalized = false) {",
    "      if (Array.isArray(array)) {",
    "        throw new TypeError(",
    '          "THREE.BufferAttribute: array should be a Typed Array."',
    "        );",
    "      }",
    "",
    "      this.isBufferAttribute = true;",
    "",
    '      this.name = "";',
    "",
    "      this.array = array;",
    "      this.itemSize = itemSize;",
    "      this.count = array !== undefined ? array.length / itemSize : 0;",
    "      this.normalized = normalized;",
    "",
    "      this.usage = StaticDrawUsage;",
    "      this.updateRange = { offset: 0, count: -1 };",
    "",
    "      this.version = 0;",
    "    }",
    "",
    "    onUploadCallback() {}",
    "",
    "    set needsUpdate(value) {",
    "      if (value === true) this.version++;",
    "    }",
    "",
    "    setUsage(value) {",
    "      this.usage = value;",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(source) {",
    "      this.name = source.name;",
    "      this.array = new source.array.constructor(source.array);",
    "      this.itemSize = source.itemSize;",
    "      this.count = source.count;",
    "      this.normalized = source.normalized;",
    "",
    "      this.usage = source.usage;",
    "",
    "      return this;",
    "    }",
    "",
    "    copyAt(index1, attribute, index2) {",
    "      index1 *= this.itemSize;",
    "      index2 *= attribute.itemSize;",
    "",
    "      for (let i = 0, l = this.itemSize; i < l; i++) {",
    "        this.array[index1 + i] = attribute.array[index2 + i];",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    copyArray(array) {",
    "      this.array.set(array);",
    "",
    "      return this;",
    "    }",
    "",
    "    applyMatrix3(m) {",
    "      if (this.itemSize === 2) {",
    "        for (let i = 0, l = this.count; i < l; i++) {",
    "          _vector2$1.fromBufferAttribute(this, i);",
    "          _vector2$1.applyMatrix3(m);",
    "",
    "          this.setXY(i, _vector2$1.x, _vector2$1.y);",
    "        }",
    "      } else if (this.itemSize === 3) {",
    "        for (let i = 0, l = this.count; i < l; i++) {",
    "          _vector$9.fromBufferAttribute(this, i);",
    "          _vector$9.applyMatrix3(m);",
    "",
    "          this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);",
    "        }",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    applyMatrix4(m) {",
    "      for (let i = 0, l = this.count; i < l; i++) {",
    "        _vector$9.fromBufferAttribute(this, i);",
    "",
    "        _vector$9.applyMatrix4(m);",
    "",
    "        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    applyNormalMatrix(m) {",
    "      for (let i = 0, l = this.count; i < l; i++) {",
    "        _vector$9.fromBufferAttribute(this, i);",
    "",
    "        _vector$9.applyNormalMatrix(m);",
    "",
    "        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    transformDirection(m) {",
    "      for (let i = 0, l = this.count; i < l; i++) {",
    "        _vector$9.fromBufferAttribute(this, i);",
    "",
    "        _vector$9.transformDirection(m);",
    "",
    "        this.setXYZ(i, _vector$9.x, _vector$9.y, _vector$9.z);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    set(value, offset = 0) {",
    "      // Matching BufferAttribute constructor, do not normalize the array.",
    "      this.array.set(value, offset);",
    "",
    "      return this;",
    "    }",
    "",
    "    getX(index) {",
    "      let x = this.array[index * this.itemSize];",
    "",
    "      if (this.normalized) x = denormalize(x, this.array);",
    "",
    "      return x;",
    "    }",
    "",
    "    setX(index, x) {",
    "      if (this.normalized) x = normalize(x, this.array);",
    "",
    "      this.array[index * this.itemSize] = x;",
    "",
    "      return this;",
    "    }",
    "",
    "    getY(index) {",
    "      let y = this.array[index * this.itemSize + 1];",
    "",
    "      if (this.normalized) y = denormalize(y, this.array);",
    "",
    "      return y;",
    "    }",
    "",
    "    setY(index, y) {",
    "      if (this.normalized) y = normalize(y, this.array);",
    "",
    "      this.array[index * this.itemSize + 1] = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    getZ(index) {",
    "      let z = this.array[index * this.itemSize + 2];",
    "",
    "      if (this.normalized) z = denormalize(z, this.array);",
    "",
    "      return z;",
    "    }",
    "",
    "    setZ(index, z) {",
    "      if (this.normalized) z = normalize(z, this.array);",
    "",
    "      this.array[index * this.itemSize + 2] = z;",
    "",
    "      return this;",
    "    }",
    "",
    "    getW(index) {",
    "      let w = this.array[index * this.itemSize + 3];",
    "",
    "      if (this.normalized) w = denormalize(w, this.array);",
    "",
    "      return w;",
    "    }",
    "",
    "    setW(index, w) {",
    "      if (this.normalized) w = normalize(w, this.array);",
    "",
    "      this.array[index * this.itemSize + 3] = w;",
    "",
    "      return this;",
    "    }",
    "",
    "    setXY(index, x, y) {",
    "      index *= this.itemSize;",
    "",
    "      if (this.normalized) {",
    "        x = normalize(x, this.array);",
    "        y = normalize(y, this.array);",
    "      }",
    "",
    "      this.array[index + 0] = x;",
    "      this.array[index + 1] = y;",
    "",
    "      return this;",
    "    }",
    "",
    "    setXYZ(index, x, y, z) {",
    "      index *= this.itemSize;",
    "",
    "      if (this.normalized) {",
    "        x = normalize(x, this.array);",
    "        y = normalize(y, this.array);",
    "        z = normalize(z, this.array);",
    "      }",
    "",
    "      this.array[index + 0] = x;",
    "      this.array[index + 1] = y;",
    "      this.array[index + 2] = z;",
    "",
    "      return this;",
    "    }",
    "",
    "    setXYZW(index, x, y, z, w) {",
    "      index *= this.itemSize;",
    "",
    "      if (this.normalized) {",
    "        x = normalize(x, this.array);",
    "        y = normalize(y, this.array);",
    "        z = normalize(z, this.array);",
    "        w = normalize(w, this.array);",
    "      }",
    "",
    "      this.array[index + 0] = x;",
    "      this.array[index + 1] = y;",
    "      this.array[index + 2] = z;",
    "      this.array[index + 3] = w;",
    "",
    "      return this;",
    "    }",
    "",
    "    onUpload(callback) {",
    "      this.onUploadCallback = callback;",
    "",
    "      return this;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor(this.array, this.itemSize).copy(this);",
    "    }",
    "",
    "    toJSON() {",
    "      const data = {",
    "        itemSize: this.itemSize,",
    "        type: this.array.constructor.name,",
    "        array: Array.from(this.array),",
    "        normalized: this.normalized,",
    "      };",
    "",
    '      if (this.name !== "") data.name = this.name;',
    "      if (this.usage !== StaticDrawUsage) data.usage = this.usage;",
    "      if (this.updateRange.offset !== 0 || this.updateRange.count !== -1)",
    "        data.updateRange = this.updateRange;",
    "",
    "      return data;",
    "    }",
    "",
    "    // @deprecated",
    "",
    "    copyColorsArray() {",
    "      console.error(",
    '        "THREE.BufferAttribute: copyColorsArray() was removed in r144."',
    "      );",
    "    }",
    "",
    "    copyVector2sArray() {",
    "      console.error(",
    '        "THREE.BufferAttribute: copyVector2sArray() was removed in r144."',
    "      );",
    "    }",
    "",
    "    copyVector3sArray() {",
    "      console.error(",
    '        "THREE.BufferAttribute: copyVector3sArray() was removed in r144."',
    "      );",
    "    }",
    "",
    "    copyVector4sArray() {",
    "      console.error(",
    '        "THREE.BufferAttribute: copyVector4sArray() was removed in r144."',
    "      );",
    "    }",
    "  }",
    "",
    "  //",
    "",
    "  class Int8BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Int8Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Uint8BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Uint8Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Uint8ClampedBufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Uint8ClampedArray(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Int16BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Int16Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Uint16BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Uint16Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Int32BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Int32Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Uint32BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Uint32Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Float16BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Uint16Array(array), itemSize, normalized);",
    "",
    "      this.isFloat16BufferAttribute = true;",
    "    }",
    "  }",
    "",
    "  class Float32BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Float32Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  class Float64BufferAttribute extends BufferAttribute {",
    "    constructor(array, itemSize, normalized) {",
    "      super(new Float64Array(array), itemSize, normalized);",
    "    }",
    "  }",
    "",
    "  let _id$1 = 0;",
    "",
    "  const _m1 = /*@__PURE__*/ new Matrix4();",
    "  const _obj = /*@__PURE__*/ new Object3D();",
    "  const _offset = /*@__PURE__*/ new Vector3();",
    "  const _box$1 = /*@__PURE__*/ new Box3();",
    "  const _boxMorphTargets = /*@__PURE__*/ new Box3();",
    "  const _vector$8 = /*@__PURE__*/ new Vector3();",
    "",
    "  class BufferGeometry extends EventDispatcher {",
    "    constructor() {",
    "      super();",
    "",
    "      this.isBufferGeometry = true;",
    "",
    '      Object.defineProperty(this, "id", { value: _id$1++ });',
    "",
    "      this.uuid = generateUUID();",
    "",
    '      this.name = "";',
    '      this.type = "BufferGeometry";',
    "",
    "      this.index = null;",
    "      this.attributes = {};",
    "",
    "      this.morphAttributes = {};",
    "      this.morphTargetsRelative = false;",
    "",
    "      this.groups = [];",
    "",
    "      this.boundingBox = null;",
    "      this.boundingSphere = null;",
    "",
    "      this.drawRange = { start: 0, count: Infinity };",
    "",
    "      this.userData = {};",
    "    }",
    "",
    "    getIndex() {",
    "      return this.index;",
    "    }",
    "",
    "    setIndex(index) {",
    "      if (Array.isArray(index)) {",
    "        this.index = new (",
    "          arrayNeedsUint32(index)",
    "            ? Uint32BufferAttribute",
    "            : Uint16BufferAttribute",
    "        )(index, 1);",
    "      } else {",
    "        this.index = index;",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    getAttribute(name) {",
    "      return this.attributes[name];",
    "    }",
    "",
    "    setAttribute(name, attribute) {",
    "      this.attributes[name] = attribute;",
    "",
    "      return this;",
    "    }",
    "",
    "    deleteAttribute(name) {",
    "      delete this.attributes[name];",
    "",
    "      return this;",
    "    }",
    "",
    "    hasAttribute(name) {",
    "      return this.attributes[name] !== undefined;",
    "    }",
    "",
    "    addGroup(start, count, materialIndex = 0) {",
    "      this.groups.push({",
    "        start: start,",
    "        count: count,",
    "        materialIndex: materialIndex,",
    "      });",
    "    }",
    "",
    "    clearGroups() {",
    "      this.groups = [];",
    "    }",
    "",
    "    setDrawRange(start, count) {",
    "      this.drawRange.start = start;",
    "      this.drawRange.count = count;",
    "    }",
    "",
    "    applyMatrix4(matrix) {",
    "      const position = this.attributes.position;",
    "",
    "      if (position !== undefined) {",
    "        position.applyMatrix4(matrix);",
    "",
    "        position.needsUpdate = true;",
    "      }",
    "",
    "      const normal = this.attributes.normal;",
    "",
    "      if (normal !== undefined) {",
    "        const normalMatrix = new Matrix3().getNormalMatrix(matrix);",
    "",
    "        normal.applyNormalMatrix(normalMatrix);",
    "",
    "        normal.needsUpdate = true;",
    "      }",
    "",
    "      const tangent = this.attributes.tangent;",
    "",
    "      if (tangent !== undefined) {",
    "        tangent.transformDirection(matrix);",
    "",
    "        tangent.needsUpdate = true;",
    "      }",
    "",
    "      if (this.boundingBox !== null) {",
    "        this.computeBoundingBox();",
    "      }",
    "",
    "      if (this.boundingSphere !== null) {",
    "        this.computeBoundingSphere();",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    applyQuaternion(q) {",
    "      _m1.makeRotationFromQuaternion(q);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateX(angle) {",
    "      // rotate geometry around world x-axis",
    "",
    "      _m1.makeRotationX(angle);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateY(angle) {",
    "      // rotate geometry around world y-axis",
    "",
    "      _m1.makeRotationY(angle);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    rotateZ(angle) {",
    "      // rotate geometry around world z-axis",
    "",
    "      _m1.makeRotationZ(angle);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    translate(x, y, z) {",
    "      // translate geometry",
    "",
    "      _m1.makeTranslation(x, y, z);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    scale(x, y, z) {",
    "      // scale geometry",
    "",
    "      _m1.makeScale(x, y, z);",
    "",
    "      this.applyMatrix4(_m1);",
    "",
    "      return this;",
    "    }",
    "",
    "    lookAt(vector) {",
    "      _obj.lookAt(vector);",
    "",
    "      _obj.updateMatrix();",
    "",
    "      this.applyMatrix4(_obj.matrix);",
    "",
    "      return this;",
    "    }",
    "",
    "    center() {",
    "      this.computeBoundingBox();",
    "",
    "      this.boundingBox.getCenter(_offset).negate();",
    "",
    "      this.translate(_offset.x, _offset.y, _offset.z);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromPoints(points) {",
    "      const position = [];",
    "",
    "      for (let i = 0, l = points.length; i < l; i++) {",
    "        const point = points[i];",
    "        position.push(point.x, point.y, point.z || 0);",
    "      }",
    "",
    '      this.setAttribute("position", new Float32BufferAttribute(position, 3));',
    "",
    "      return this;",
    "    }",
    "",
    "    computeBoundingBox() {",
    "      if (this.boundingBox === null) {",
    "        this.boundingBox = new Box3();",
    "      }",
    "",
    "      const position = this.attributes.position;",
    "      const morphAttributesPosition = this.morphAttributes.position;",
    "",
    "      if (position && position.isGLBufferAttribute) {",
    "        console.error(",
    '          \'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".\',',
    "          this",
    "        );",
    "",
    "        this.boundingBox.set(",
    "          new Vector3(-Infinity, -Infinity, -Infinity),",
    "          new Vector3(+Infinity, +Infinity, +Infinity)",
    "        );",
    "",
    "        return;",
    "      }",
    "",
    "      if (position !== undefined) {",
    "        this.boundingBox.setFromBufferAttribute(position);",
    "",
    "        // process morph attributes if present",
    "",
    "        if (morphAttributesPosition) {",
    "          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {",
    "            const morphAttribute = morphAttributesPosition[i];",
    "            _box$1.setFromBufferAttribute(morphAttribute);",
    "",
    "            if (this.morphTargetsRelative) {",
    "              _vector$8.addVectors(this.boundingBox.min, _box$1.min);",
    "              this.boundingBox.expandByPoint(_vector$8);",
    "",
    "              _vector$8.addVectors(this.boundingBox.max, _box$1.max);",
    "              this.boundingBox.expandByPoint(_vector$8);",
    "            } else {",
    "              this.boundingBox.expandByPoint(_box$1.min);",
    "              this.boundingBox.expandByPoint(_box$1.max);",
    "            }",
    "          }",
    "        }",
    "      } else {",
    "        this.boundingBox.makeEmpty();",
    "      }",
    "",
    "      if (",
    "        isNaN(this.boundingBox.min.x) ||",
    "        isNaN(this.boundingBox.min.y) ||",
    "        isNaN(this.boundingBox.min.z)",
    "      ) {",
    "        console.error(",
    "          'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.',",
    "          this",
    "        );",
    "      }",
    "    }",
    "",
    "    computeBoundingSphere() {",
    "      if (this.boundingSphere === null) {",
    "        this.boundingSphere = new Sphere();",
    "      }",
    "",
    "      const position = this.attributes.position;",
    "      const morphAttributesPosition = this.morphAttributes.position;",
    "",
    "      if (position && position.isGLBufferAttribute) {",
    "        console.error(",
    '          \'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".\',',
    "          this",
    "        );",
    "",
    "        this.boundingSphere.set(new Vector3(), Infinity);",
    "",
    "        return;",
    "      }",
    "",
    "      if (position) {",
    "        // first, find the center of the bounding sphere",
    "",
    "        const center = this.boundingSphere.center;",
    "",
    "        _box$1.setFromBufferAttribute(position);",
    "",
    "        // process morph attributes if present",
    "",
    "        if (morphAttributesPosition) {",
    "          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {",
    "            const morphAttribute = morphAttributesPosition[i];",
    "            _boxMorphTargets.setFromBufferAttribute(morphAttribute);",
    "",
    "            if (this.morphTargetsRelative) {",
    "              _vector$8.addVectors(_box$1.min, _boxMorphTargets.min);",
    "              _box$1.expandByPoint(_vector$8);",
    "",
    "              _vector$8.addVectors(_box$1.max, _boxMorphTargets.max);",
    "              _box$1.expandByPoint(_vector$8);",
    "            } else {",
    "              _box$1.expandByPoint(_boxMorphTargets.min);",
    "              _box$1.expandByPoint(_boxMorphTargets.max);",
    "            }",
    "          }",
    "        }",
    "",
    "        _box$1.getCenter(center);",
    "",
    "        // second, try to find a boundingSphere with a radius smaller than the",
    "        // boundingSphere of the boundingBox: sqrt(3) smaller in the best case",
    "",
    "        let maxRadiusSq = 0;",
    "",
    "        for (let i = 0, il = position.count; i < il; i++) {",
    "          _vector$8.fromBufferAttribute(position, i);",
    "",
    "          maxRadiusSq = Math.max(",
    "            maxRadiusSq,",
    "            center.distanceToSquared(_vector$8)",
    "          );",
    "        }",
    "",
    "        // process morph attributes if present",
    "",
    "        if (morphAttributesPosition) {",
    "          for (let i = 0, il = morphAttributesPosition.length; i < il; i++) {",
    "            const morphAttribute = morphAttributesPosition[i];",
    "            const morphTargetsRelative = this.morphTargetsRelative;",
    "",
    "            for (let j = 0, jl = morphAttribute.count; j < jl; j++) {",
    "              _vector$8.fromBufferAttribute(morphAttribute, j);",
    "",
    "              if (morphTargetsRelative) {",
    "                _offset.fromBufferAttribute(position, j);",
    "                _vector$8.add(_offset);",
    "              }",
    "",
    "              maxRadiusSq = Math.max(",
    "                maxRadiusSq,",
    "                center.distanceToSquared(_vector$8)",
    "              );",
    "            }",
    "          }",
    "        }",
    "",
    "        this.boundingSphere.radius = Math.sqrt(maxRadiusSq);",
    "",
    "        if (isNaN(this.boundingSphere.radius)) {",
    "          console.error(",
    "            'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.',",
    "            this",
    "          );",
    "        }",
    "      }",
    "    }",
    "",
    "    computeTangents() {",
    "      const index = this.index;",
    "      const attributes = this.attributes;",
    "",
    "      // based on http://www.terathon.com/code/tangent.html",
    "      // (per vertex tangents)",
    "",
    "      if (",
    "        index === null ||",
    "        attributes.position === undefined ||",
    "        attributes.normal === undefined ||",
    "        attributes.uv === undefined",
    "      ) {",
    "        console.error(",
    '          "THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"',
    "        );",
    "        return;",
    "      }",
    "",
    "      const indices = index.array;",
    "      const positions = attributes.position.array;",
    "      const normals = attributes.normal.array;",
    "      const uvs = attributes.uv.array;",
    "",
    "      const nVertices = positions.length / 3;",
    "",
    '      if (this.hasAttribute("tangent") === false) {',
    "        this.setAttribute(",
    '          "tangent",',
    "          new BufferAttribute(new Float32Array(4 * nVertices), 4)",
    "        );",
    "      }",
    "",
    '      const tangents = this.getAttribute("tangent").array;',
    "",
    "      const tan1 = [],",
    "        tan2 = [];",
    "",
    "      for (let i = 0; i < nVertices; i++) {",
    "        tan1[i] = new Vector3();",
    "        tan2[i] = new Vector3();",
    "      }",
    "",
    "      const vA = new Vector3(),",
    "        vB = new Vector3(),",
    "        vC = new Vector3(),",
    "        uvA = new Vector2(),",
    "        uvB = new Vector2(),",
    "        uvC = new Vector2(),",
    "        sdir = new Vector3(),",
    "        tdir = new Vector3();",
    "",
    "      function handleTriangle(a, b, c) {",
    "        vA.fromArray(positions, a * 3);",
    "        vB.fromArray(positions, b * 3);",
    "        vC.fromArray(positions, c * 3);",
    "",
    "        uvA.fromArray(uvs, a * 2);",
    "        uvB.fromArray(uvs, b * 2);",
    "        uvC.fromArray(uvs, c * 2);",
    "",
    "        vB.sub(vA);",
    "        vC.sub(vA);",
    "",
    "        uvB.sub(uvA);",
    "        uvC.sub(uvA);",
    "",
    "        const r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);",
    "",
    "        // silently ignore degenerate uv triangles having coincident or colinear vertices",
    "",
    "        if (!isFinite(r)) return;",
    "",
    "        sdir",
    "          .copy(vB)",
    "          .multiplyScalar(uvC.y)",
    "          .addScaledVector(vC, -uvB.y)",
    "          .multiplyScalar(r);",
    "        tdir",
    "          .copy(vC)",
    "          .multiplyScalar(uvB.x)",
    "          .addScaledVector(vB, -uvC.x)",
    "          .multiplyScalar(r);",
    "",
    "        tan1[a].add(sdir);",
    "        tan1[b].add(sdir);",
    "        tan1[c].add(sdir);",
    "",
    "        tan2[a].add(tdir);",
    "        tan2[b].add(tdir);",
    "        tan2[c].add(tdir);",
    "      }",
    "",
    "      let groups = this.groups;",
    "",
    "      if (groups.length === 0) {",
    "        groups = [",
    "          {",
    "            start: 0,",
    "            count: indices.length,",
    "          },",
    "        ];",
    "      }",
    "",
    "      for (let i = 0, il = groups.length; i < il; ++i) {",
    "        const group = groups[i];",
    "",
    "        const start = group.start;",
    "        const count = group.count;",
    "",
    "        for (let j = start, jl = start + count; j < jl; j += 3) {",
    "          handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);",
    "        }",
    "      }",
    "",
    "      const tmp = new Vector3(),",
    "        tmp2 = new Vector3();",
    "      const n = new Vector3(),",
    "        n2 = new Vector3();",
    "",
    "      function handleVertex(v) {",
    "        n.fromArray(normals, v * 3);",
    "        n2.copy(n);",
    "",
    "        const t = tan1[v];",
    "",
    "        // Gram-Schmidt orthogonalize",
    "",
    "        tmp.copy(t);",
    "        tmp.sub(n.multiplyScalar(n.dot(t))).normalize();",
    "",
    "        // Calculate handedness",
    "",
    "        tmp2.crossVectors(n2, t);",
    "        const test = tmp2.dot(tan2[v]);",
    "        const w = test < 0.0 ? -1.0 : 1.0;",
    "",
    "        tangents[v * 4] = tmp.x;",
    "        tangents[v * 4 + 1] = tmp.y;",
    "        tangents[v * 4 + 2] = tmp.z;",
    "        tangents[v * 4 + 3] = w;",
    "      }",
    "",
    "      for (let i = 0, il = groups.length; i < il; ++i) {",
    "        const group = groups[i];",
    "",
    "        const start = group.start;",
    "        const count = group.count;",
    "",
    "        for (let j = start, jl = start + count; j < jl; j += 3) {",
    "          handleVertex(indices[j + 0]);",
    "          handleVertex(indices[j + 1]);",
    "          handleVertex(indices[j + 2]);",
    "        }",
    "      }",
    "    }",
    "",
    "    computeVertexNormals() {",
    "      const index = this.index;",
    '      const positionAttribute = this.getAttribute("position");',
    "",
    "      if (positionAttribute !== undefined) {",
    '        let normalAttribute = this.getAttribute("normal");',
    "",
    "        if (normalAttribute === undefined) {",
    "          normalAttribute = new BufferAttribute(",
    "            new Float32Array(positionAttribute.count * 3),",
    "            3",
    "          );",
    '          this.setAttribute("normal", normalAttribute);',
    "        } else {",
    "          // reset existing normals to zero",
    "",
    "          for (let i = 0, il = normalAttribute.count; i < il; i++) {",
    "            normalAttribute.setXYZ(i, 0, 0, 0);",
    "          }",
    "        }",
    "",
    "        const pA = new Vector3(),",
    "          pB = new Vector3(),",
    "          pC = new Vector3();",
    "        const nA = new Vector3(),",
    "          nB = new Vector3(),",
    "          nC = new Vector3();",
    "        const cb = new Vector3(),",
    "          ab = new Vector3();",
    "",
    "        // indexed elements",
    "",
    "        if (index) {",
    "          for (let i = 0, il = index.count; i < il; i += 3) {",
    "            const vA = index.getX(i + 0);",
    "            const vB = index.getX(i + 1);",
    "            const vC = index.getX(i + 2);",
    "",
    "            pA.fromBufferAttribute(positionAttribute, vA);",
    "            pB.fromBufferAttribute(positionAttribute, vB);",
    "            pC.fromBufferAttribute(positionAttribute, vC);",
    "",
    "            cb.subVectors(pC, pB);",
    "            ab.subVectors(pA, pB);",
    "            cb.cross(ab);",
    "",
    "            nA.fromBufferAttribute(normalAttribute, vA);",
    "            nB.fromBufferAttribute(normalAttribute, vB);",
    "            nC.fromBufferAttribute(normalAttribute, vC);",
    "",
    "            nA.add(cb);",
    "            nB.add(cb);",
    "            nC.add(cb);",
    "",
    "            normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);",
    "            normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);",
    "            normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);",
    "          }",
    "        } else {",
    "          // non-indexed elements (unconnected triangle soup)",
    "",
    "          for (let i = 0, il = positionAttribute.count; i < il; i += 3) {",
    "            pA.fromBufferAttribute(positionAttribute, i + 0);",
    "            pB.fromBufferAttribute(positionAttribute, i + 1);",
    "            pC.fromBufferAttribute(positionAttribute, i + 2);",
    "",
    "            cb.subVectors(pC, pB);",
    "            ab.subVectors(pA, pB);",
    "            cb.cross(ab);",
    "",
    "            normalAttribute.setXYZ(i + 0, cb.x, cb.y, cb.z);",
    "            normalAttribute.setXYZ(i + 1, cb.x, cb.y, cb.z);",
    "            normalAttribute.setXYZ(i + 2, cb.x, cb.y, cb.z);",
    "          }",
    "        }",
    "",
    "        this.normalizeNormals();",
    "",
    "        normalAttribute.needsUpdate = true;",
    "      }",
    "    }",
    "",
    "    // @deprecated since r144",
    "",
    "    merge() {",
    "      console.error(",
    '        "THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."',
    "      );",
    "      return this;",
    "    }",
    "",
    "    normalizeNormals() {",
    "      const normals = this.attributes.normal;",
    "",
    "      for (let i = 0, il = normals.count; i < il; i++) {",
    "        _vector$8.fromBufferAttribute(normals, i);",
    "",
    "        _vector$8.normalize();",
    "",
    "        normals.setXYZ(i, _vector$8.x, _vector$8.y, _vector$8.z);",
    "      }",
    "    }",
    "",
    "    toNonIndexed() {",
    "      function convertBufferAttribute(attribute, indices) {",
    "        const array = attribute.array;",
    "        const itemSize = attribute.itemSize;",
    "        const normalized = attribute.normalized;",
    "",
    "        const array2 = new array.constructor(indices.length * itemSize);",
    "",
    "        let index = 0,",
    "          index2 = 0;",
    "",
    "        for (let i = 0, l = indices.length; i < l; i++) {",
    "          if (attribute.isInterleavedBufferAttribute) {",
    "            index = indices[i] * attribute.data.stride + attribute.offset;",
    "          } else {",
    "            index = indices[i] * itemSize;",
    "          }",
    "",
    "          for (let j = 0; j < itemSize; j++) {",
    "            array2[index2++] = array[index++];",
    "          }",
    "        }",
    "",
    "        return new BufferAttribute(array2, itemSize, normalized);",
    "      }",
    "",
    "      //",
    "",
    "      if (this.index === null) {",
    "        console.warn(",
    '          "THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."',
    "        );",
    "        return this;",
    "      }",
    "",
    "      const geometry2 = new BufferGeometry();",
    "",
    "      const indices = this.index.array;",
    "      const attributes = this.attributes;",
    "",
    "      // attributes",
    "",
    "      for (const name in attributes) {",
    "        const attribute = attributes[name];",
    "",
    "        const newAttribute = convertBufferAttribute(attribute, indices);",
    "",
    "        geometry2.setAttribute(name, newAttribute);",
    "      }",
    "",
    "      // morph attributes",
    "",
    "      const morphAttributes = this.morphAttributes;",
    "",
    "      for (const name in morphAttributes) {",
    "        const morphArray = [];",
    "        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes",
    "",
    "        for (let i = 0, il = morphAttribute.length; i < il; i++) {",
    "          const attribute = morphAttribute[i];",
    "",
    "          const newAttribute = convertBufferAttribute(attribute, indices);",
    "",
    "          morphArray.push(newAttribute);",
    "        }",
    "",
    "        geometry2.morphAttributes[name] = morphArray;",
    "      }",
    "",
    "      geometry2.morphTargetsRelative = this.morphTargetsRelative;",
    "",
    "      // groups",
    "",
    "      const groups = this.groups;",
    "",
    "      for (let i = 0, l = groups.length; i < l; i++) {",
    "        const group = groups[i];",
    "        geometry2.addGroup(group.start, group.count, group.materialIndex);",
    "      }",
    "",
    "      return geometry2;",
    "    }",
    "",
    "    toJSON() {",
    "      const data = {",
    "        metadata: {",
    "          version: 4.5,",
    '          type: "BufferGeometry",',
    '          generator: "BufferGeometry.toJSON",',
    "        },",
    "      };",
    "",
    "      // standard BufferGeometry serialization",
    "",
    "      data.uuid = this.uuid;",
    "      data.type = this.type;",
    '      if (this.name !== "") data.name = this.name;',
    "      if (Object.keys(this.userData).length > 0) data.userData = this.userData;",
    "",
    "      if (this.parameters !== undefined) {",
    "        const parameters = this.parameters;",
    "",
    "        for (const key in parameters) {",
    "          if (parameters[key] !== undefined) data[key] = parameters[key];",
    "        }",
    "",
    "        return data;",
    "      }",
    "",
    "      // for simplicity the code assumes attributes are not shared across geometries, see #15811",
    "",
    "      data.data = { attributes: {} };",
    "",
    "      const index = this.index;",
    "",
    "      if (index !== null) {",
    "        data.data.index = {",
    "          type: index.array.constructor.name,",
    "          array: Array.prototype.slice.call(index.array),",
    "        };",
    "      }",
    "",
    "      const attributes = this.attributes;",
    "",
    "      for (const key in attributes) {",
    "        const attribute = attributes[key];",
    "",
    "        data.data.attributes[key] = attribute.toJSON(data.data);",
    "      }",
    "",
    "      const morphAttributes = {};",
    "      let hasMorphAttributes = false;",
    "",
    "      for (const key in this.morphAttributes) {",
    "        const attributeArray = this.morphAttributes[key];",
    "",
    "        const array = [];",
    "",
    "        for (let i = 0, il = attributeArray.length; i < il; i++) {",
    "          const attribute = attributeArray[i];",
    "",
    "          array.push(attribute.toJSON(data.data));",
    "        }",
    "",
    "        if (array.length > 0) {",
    "          morphAttributes[key] = array;",
    "",
    "          hasMorphAttributes = true;",
    "        }",
    "      }",
    "",
    "      if (hasMorphAttributes) {",
    "        data.data.morphAttributes = morphAttributes;",
    "        data.data.morphTargetsRelative = this.morphTargetsRelative;",
    "      }",
    "",
    "      const groups = this.groups;",
    "",
    "      if (groups.length > 0) {",
    "        data.data.groups = JSON.parse(JSON.stringify(groups));",
    "      }",
    "",
    "      const boundingSphere = this.boundingSphere;",
    "",
    "      if (boundingSphere !== null) {",
    "        data.data.boundingSphere = {",
    "          center: boundingSphere.center.toArray(),",
    "          radius: boundingSphere.radius,",
    "        };",
    "      }",
    "",
    "      return data;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "",
    "    copy(source) {",
    "      // reset",
    "",
    "      this.index = null;",
    "      this.attributes = {};",
    "      this.morphAttributes = {};",
    "      this.groups = [];",
    "      this.boundingBox = null;",
    "      this.boundingSphere = null;",
    "",
    "      // used for storing cloned, shared data",
    "",
    "      const data = {};",
    "",
    "      // name",
    "",
    "      this.name = source.name;",
    "",
    "      // index",
    "",
    "      const index = source.index;",
    "",
    "      if (index !== null) {",
    "        this.setIndex(index.clone(data));",
    "      }",
    "",
    "      // attributes",
    "",
    "      const attributes = source.attributes;",
    "",
    "      for (const name in attributes) {",
    "        const attribute = attributes[name];",
    "        this.setAttribute(name, attribute.clone(data));",
    "      }",
    "",
    "      // morph attributes",
    "",
    "      const morphAttributes = source.morphAttributes;",
    "",
    "      for (const name in morphAttributes) {",
    "        const array = [];",
    "        const morphAttribute = morphAttributes[name]; // morphAttribute: array of Float32BufferAttributes",
    "",
    "        for (let i = 0, l = morphAttribute.length; i < l; i++) {",
    "          array.push(morphAttribute[i].clone(data));",
    "        }",
    "",
    "        this.morphAttributes[name] = array;",
    "      }",
    "",
    "      this.morphTargetsRelative = source.morphTargetsRelative;",
    "",
    "      // groups",
    "",
    "      const groups = source.groups;",
    "",
    "      for (let i = 0, l = groups.length; i < l; i++) {",
    "        const group = groups[i];",
    "        this.addGroup(group.start, group.count, group.materialIndex);",
    "      }",
    "",
    "      // bounding box",
    "",
    "      const boundingBox = source.boundingBox;",
    "",
    "      if (boundingBox !== null) {",
    "        this.boundingBox = boundingBox.clone();",
    "      }",
    "",
    "      // bounding sphere",
    "",
    "      const boundingSphere = source.boundingSphere;",
    "",
    "      if (boundingSphere !== null) {",
    "        this.boundingSphere = boundingSphere.clone();",
    "      }",
    "",
    "      // draw range",
    "",
    "      this.drawRange.start = source.drawRange.start;",
    "      this.drawRange.count = source.drawRange.count;",
    "",
    "      // user data",
    "",
    "      this.userData = source.userData;",
    "",
    "      // geometry generator parameters",
    "",
    "      if (source.parameters !== undefined)",
    "        this.parameters = Object.assign({}, source.parameters);",
    "",
    "      return this;",
    "    }",
    "",
    "    dispose() {",
    '      this.dispatchEvent({ type: "dispose" });',
    "    }",
    "  }",
    "",
    "  const _inverseMatrix$2 = /*@__PURE__*/ new Matrix4();",
    "  const _ray$2 = /*@__PURE__*/ new Ray();",
    "  const _sphere$3 = /*@__PURE__*/ new Sphere();",
    "",
    "  const _vA$1 = /*@__PURE__*/ new Vector3();",
    "  const _vB$1 = /*@__PURE__*/ new Vector3();",
    "  const _vC$1 = /*@__PURE__*/ new Vector3();",
    "",
    "  const _tempA = /*@__PURE__*/ new Vector3();",
    "  const _morphA = /*@__PURE__*/ new Vector3();",
    "",
    "  const _uvA$1 = /*@__PURE__*/ new Vector2();",
    "  const _uvB$1 = /*@__PURE__*/ new Vector2();",
    "  const _uvC$1 = /*@__PURE__*/ new Vector2();",
    "",
    "  const _intersectionPoint = /*@__PURE__*/ new Vector3();",
    "  const _intersectionPointWorld = /*@__PURE__*/ new Vector3();",
    "",
    "  class Mesh extends Object3D {",
    "    constructor(",
    "      geometry = new BufferGeometry(),",
    "      material = new MeshBasicMaterial()",
    "    ) {",
    "      super();",
    "",
    "      this.isMesh = true;",
    "",
    '      this.type = "Mesh";',
    "",
    "      this.geometry = geometry;",
    "      this.material = material;",
    "",
    "      this.updateMorphTargets();",
    "    }",
    "",
    "    copy(source, recursive) {",
    "      super.copy(source, recursive);",
    "",
    "      if (source.morphTargetInfluences !== undefined) {",
    "        this.morphTargetInfluences = source.morphTargetInfluences.slice();",
    "      }",
    "",
    "      if (source.morphTargetDictionary !== undefined) {",
    "        this.morphTargetDictionary = Object.assign(",
    "          {},",
    "          source.morphTargetDictionary",
    "        );",
    "      }",
    "",
    "      this.material = source.material;",
    "      this.geometry = source.geometry;",
    "",
    "      return this;",
    "    }",
    "",
    "    updateMorphTargets() {",
    "      const geometry = this.geometry;",
    "",
    "      const morphAttributes = geometry.morphAttributes;",
    "      const keys = Object.keys(morphAttributes);",
    "",
    "      if (keys.length > 0) {",
    "        const morphAttribute = morphAttributes[keys[0]];",
    "",
    "        if (morphAttribute !== undefined) {",
    "          this.morphTargetInfluences = [];",
    "          this.morphTargetDictionary = {};",
    "",
    "          for (let m = 0, ml = morphAttribute.length; m < ml; m++) {",
    "            const name = morphAttribute[m].name || String(m);",
    "",
    "            this.morphTargetInfluences.push(0);",
    "            this.morphTargetDictionary[name] = m;",
    "          }",
    "        }",
    "      }",
    "    }",
    "",
    "    getVertexPosition(index, target) {",
    "      const geometry = this.geometry;",
    "      const position = geometry.attributes.position;",
    "      const morphPosition = geometry.morphAttributes.position;",
    "      const morphTargetsRelative = geometry.morphTargetsRelative;",
    "",
    "      target.fromBufferAttribute(position, index);",
    "",
    "      const morphInfluences = this.morphTargetInfluences;",
    "",
    "      if (morphPosition && morphInfluences) {",
    "        _morphA.set(0, 0, 0);",
    "",
    "        for (let i = 0, il = morphPosition.length; i < il; i++) {",
    "          const influence = morphInfluences[i];",
    "          const morphAttribute = morphPosition[i];",
    "",
    "          if (influence === 0) continue;",
    "",
    "          _tempA.fromBufferAttribute(morphAttribute, index);",
    "",
    "          if (morphTargetsRelative) {",
    "            _morphA.addScaledVector(_tempA, influence);",
    "          } else {",
    "            _morphA.addScaledVector(_tempA.sub(target), influence);",
    "          }",
    "        }",
    "",
    "        target.add(_morphA);",
    "      }",
    "",
    "      if (this.isSkinnedMesh) {",
    "        this.boneTransform(index, target);",
    "      }",
    "",
    "      return target;",
    "    }",
    "",
    "    raycast(raycaster, intersects) {",
    "      const geometry = this.geometry;",
    "      const material = this.material;",
    "      const matrixWorld = this.matrixWorld;",
    "",
    "      if (material === undefined) return;",
    "",
    "      // Checking boundingSphere distance to ray",
    "",
    "      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();",
    "",
    "      _sphere$3.copy(geometry.boundingSphere);",
    "      _sphere$3.applyMatrix4(matrixWorld);",
    "",
    "      if (raycaster.ray.intersectsSphere(_sphere$3) === false) return;",
    "",
    "      //",
    "",
    "      _inverseMatrix$2.copy(matrixWorld).invert();",
    "      _ray$2.copy(raycaster.ray).applyMatrix4(_inverseMatrix$2);",
    "",
    "      // Check boundingBox before continuing",
    "",
    "      if (geometry.boundingBox !== null) {",
    "        if (_ray$2.intersectsBox(geometry.boundingBox) === false) return;",
    "      }",
    "",
    "      let intersection;",
    "",
    "      const index = geometry.index;",
    "      const position = geometry.attributes.position;",
    "      const uv = geometry.attributes.uv;",
    "      const uv2 = geometry.attributes.uv2;",
    "      const groups = geometry.groups;",
    "      const drawRange = geometry.drawRange;",
    "",
    "      if (index !== null) {",
    "        // indexed buffer geometry",
    "",
    "        if (Array.isArray(material)) {",
    "          for (let i = 0, il = groups.length; i < il; i++) {",
    "            const group = groups[i];",
    "            const groupMaterial = material[group.materialIndex];",
    "",
    "            const start = Math.max(group.start, drawRange.start);",
    "            const end = Math.min(",
    "              index.count,",
    "              Math.min(",
    "                group.start + group.count,",
    "                drawRange.start + drawRange.count",
    "              )",
    "            );",
    "",
    "            for (let j = start, jl = end; j < jl; j += 3) {",
    "              const a = index.getX(j);",
    "              const b = index.getX(j + 1);",
    "              const c = index.getX(j + 2);",
    "",
    "              intersection = checkBufferGeometryIntersection(",
    "                this,",
    "                groupMaterial,",
    "                raycaster,",
    "                _ray$2,",
    "                uv,",
    "                uv2,",
    "                a,",
    "                b,",
    "                c",
    "              );",
    "",
    "              if (intersection) {",
    "                intersection.faceIndex = Math.floor(j / 3); // triangle number in indexed buffer semantics",
    "                intersection.face.materialIndex = group.materialIndex;",
    "                intersects.push(intersection);",
    "              }",
    "            }",
    "          }",
    "        } else {",
    "          const start = Math.max(0, drawRange.start);",
    "          const end = Math.min(index.count, drawRange.start + drawRange.count);",
    "",
    "          for (let i = start, il = end; i < il; i += 3) {",
    "            const a = index.getX(i);",
    "            const b = index.getX(i + 1);",
    "            const c = index.getX(i + 2);",
    "",
    "            intersection = checkBufferGeometryIntersection(",
    "              this,",
    "              material,",
    "              raycaster,",
    "              _ray$2,",
    "              uv,",
    "              uv2,",
    "              a,",
    "              b,",
    "              c",
    "            );",
    "",
    "            if (intersection) {",
    "              intersection.faceIndex = Math.floor(i / 3); // triangle number in indexed buffer semantics",
    "              intersects.push(intersection);",
    "            }",
    "          }",
    "        }",
    "      } else if (position !== undefined) {",
    "        // non-indexed buffer geometry",
    "",
    "        if (Array.isArray(material)) {",
    "          for (let i = 0, il = groups.length; i < il; i++) {",
    "            const group = groups[i];",
    "            const groupMaterial = material[group.materialIndex];",
    "",
    "            const start = Math.max(group.start, drawRange.start);",
    "            const end = Math.min(",
    "              position.count,",
    "              Math.min(",
    "                group.start + group.count,",
    "                drawRange.start + drawRange.count",
    "              )",
    "            );",
    "",
    "            for (let j = start, jl = end; j < jl; j += 3) {",
    "              const a = j;",
    "              const b = j + 1;",
    "              const c = j + 2;",
    "",
    "              intersection = checkBufferGeometryIntersection(",
    "                this,",
    "                groupMaterial,",
    "                raycaster,",
    "                _ray$2,",
    "                uv,",
    "                uv2,",
    "                a,",
    "                b,",
    "                c",
    "              );",
    "",
    "              if (intersection) {",
    "                intersection.faceIndex = Math.floor(j / 3); // triangle number in non-indexed buffer semantics",
    "                intersection.face.materialIndex = group.materialIndex;",
    "                intersects.push(intersection);",
    "              }",
    "            }",
    "          }",
    "        } else {",
    "          const start = Math.max(0, drawRange.start);",
    "          const end = Math.min(",
    "            position.count,",
    "            drawRange.start + drawRange.count",
    "          );",
    "",
    "          for (let i = start, il = end; i < il; i += 3) {",
    "            const a = i;",
    "            const b = i + 1;",
    "            const c = i + 2;",
    "",
    "            intersection = checkBufferGeometryIntersection(",
    "              this,",
    "              material,",
    "              raycaster,",
    "              _ray$2,",
    "              uv,",
    "              uv2,",
    "              a,",
    "              b,",
    "              c",
    "            );",
    "",
    "            if (intersection) {",
    "              intersection.faceIndex = Math.floor(i / 3); // triangle number in non-indexed buffer semantics",
    "              intersects.push(intersection);",
    "            }",
    "          }",
    "        }",
    "      }",
    "    }",
    "  }",
    "",
    "  function checkIntersection(",
    "    object,",
    "    material,",
    "    raycaster,",
    "    ray,",
    "    pA,",
    "    pB,",
    "    pC,",
    "    point",
    "  ) {",
    "    let intersect;",
    "",
    "    if (material.side === BackSide) {",
    "      intersect = ray.intersectTriangle(pC, pB, pA, true, point);",
    "    } else {",
    "      intersect = ray.intersectTriangle(",
    "        pA,",
    "        pB,",
    "        pC,",
    "        material.side === FrontSide,",
    "        point",
    "      );",
    "    }",
    "",
    "    if (intersect === null) return null;",
    "",
    "    _intersectionPointWorld.copy(point);",
    "    _intersectionPointWorld.applyMatrix4(object.matrixWorld);",
    "",
    "    const distance = raycaster.ray.origin.distanceTo(_intersectionPointWorld);",
    "",
    "    if (distance < raycaster.near || distance > raycaster.far) return null;",
    "",
    "    return {",
    "      distance: distance,",
    "      point: _intersectionPointWorld.clone(),",
    "      object: object,",
    "    };",
    "  }",
    "",
    "  function checkBufferGeometryIntersection(",
    "    object,",
    "    material,",
    "    raycaster,",
    "    ray,",
    "    uv,",
    "    uv2,",
    "    a,",
    "    b,",
    "    c",
    "  ) {",
    "    object.getVertexPosition(a, _vA$1);",
    "    object.getVertexPosition(b, _vB$1);",
    "    object.getVertexPosition(c, _vC$1);",
    "",
    "    const intersection = checkIntersection(",
    "      object,",
    "      material,",
    "      raycaster,",
    "      ray,",
    "      _vA$1,",
    "      _vB$1,",
    "      _vC$1,",
    "      _intersectionPoint",
    "    );",
    "",
    "    if (intersection) {",
    "      if (uv) {",
    "        _uvA$1.fromBufferAttribute(uv, a);",
    "        _uvB$1.fromBufferAttribute(uv, b);",
    "        _uvC$1.fromBufferAttribute(uv, c);",
    "",
    "        intersection.uv = Triangle.getUV(",
    "          _intersectionPoint,",
    "          _vA$1,",
    "          _vB$1,",
    "          _vC$1,",
    "          _uvA$1,",
    "          _uvB$1,",
    "          _uvC$1,",
    "          new Vector2()",
    "        );",
    "      }",
    "",
    "      if (uv2) {",
    "        _uvA$1.fromBufferAttribute(uv2, a);",
    "        _uvB$1.fromBufferAttribute(uv2, b);",
    "        _uvC$1.fromBufferAttribute(uv2, c);",
    "",
    "        intersection.uv2 = Triangle.getUV(",
    "          _intersectionPoint,",
    "          _vA$1,",
    "          _vB$1,",
    "          _vC$1,",
    "          _uvA$1,",
    "          _uvB$1,",
    "          _uvC$1,",
    "          new Vector2()",
    "        );",
    "      }",
    "",
    "      const face = {",
    "        a: a,",
    "        b: b,",
    "        c: c,",
    "        normal: new Vector3(),",
    "        materialIndex: 0,",
    "      };",
    "",
    "      Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);",
    "",
    "      intersection.face = face;",
    "    }",
    "",
    "    return intersection;",
    "  }",
    "",
    "  class BoxGeometry extends BufferGeometry {",
    "    constructor(",
    "      width = 1,",
    "      height = 1,",
    "      depth = 1,",
    "      widthSegments = 1,",
    "      heightSegments = 1,",
    "      depthSegments = 1",
    "    ) {",
    "      super();",
    "",
    '      this.type = "BoxGeometry";',
    "",
    "      this.parameters = {",
    "        width: width,",
    "        height: height,",
    "        depth: depth,",
    "        widthSegments: widthSegments,",
    "        heightSegments: heightSegments,",
    "        depthSegments: depthSegments,",
    "      };",
    "",
    "      const scope = this;",
    "",
    "      // segments",
    "",
    "      widthSegments = Math.floor(widthSegments);",
    "      heightSegments = Math.floor(heightSegments);",
    "      depthSegments = Math.floor(depthSegments);",
    "",
    "      // buffers",
    "",
    "      const indices = [];",
    "      const vertices = [];",
    "      const normals = [];",
    "      const uvs = [];",
    "",
    "      // helper variables",
    "",
    "      let numberOfVertices = 0;",
    "      let groupStart = 0;",
    "",
    "      // build each side of the box geometry",
    "",
    "      buildPlane(",
    '        "z",',
    '        "y",',
    '        "x",',
    "        -1,",
    "        -1,",
    "        depth,",
    "        height,",
    "        width,",
    "        depthSegments,",
    "        heightSegments,",
    "        0",
    "      ); // px",
    "      buildPlane(",

    "        1,",
    "        -1,",
    "        depth,",
    "        height,",
    "        -width,",
    "        depthSegments,",
    "        heightSegments,",
    "        1",
    "      ); // nx",
    "      buildPlane(",
    "        1,",
    "        1,",
    "        width,",
    "        depth,",
    "        height,",
    "        widthSegments,",
    "        depthSegments,",
    "        2",
    "      ); // py",
    "      buildPlane(",
    "        1,",
    "        -1,",
    "        width,",
    "        depth,",
    "        -height,",
    "        widthSegments,",
    "        depthSegments,",
    "        3",
    "      ); // ny",
    "      buildPlane(",
    "        1,",
    "        -1,",
    "        width,",
    "        height,",
    "        depth,",
    "        widthSegments,",
    "        heightSegments,",
    "        4",
    "      ); // pz",
    "      buildPlane(",
    "        -1,",
    "        -1,",
    "        width,",
    "        height,",
    "        -depth,",
    "        widthSegments,",
    "        heightSegments,",
    "        5",
    "      ); // nz",
    "",
    "      // build geometry",
    "",
    "      this.setIndex(indices);",
    '      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));',
    '      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));',
    '      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));',
    "",
    "      function buildPlane(",
    "        u,",
    "        v,",
    "        w,",
    "        udir,",
    "        vdir,",
    "        width,",
    "        height,",
    "        depth,",
    "        gridX,",
    "        gridY,",
    "        materialIndex",
    "      ) {",
    "        const segmentWidth = width / gridX;",
    "        const segmentHeight = height / gridY;",
    "",
    "        const widthHalf = width / 2;",
    "        const heightHalf = height / 2;",
    "        const depthHalf = depth / 2;",
    "",
    "        const gridX1 = gridX + 1;",
    "        const gridY1 = gridY + 1;",
    "",
    "        let vertexCounter = 0;",
    "        let groupCount = 0;",
    "",
    "        const vector = new Vector3();",
    "",
    "        // generate vertices, normals and uvs",
    "",
    "        for (let iy = 0; iy < gridY1; iy++) {",
    "          const y = iy * segmentHeight - heightHalf;",
    "",
    "          for (let ix = 0; ix < gridX1; ix++) {",
    "            const x = ix * segmentWidth - widthHalf;",
    "",
    "            // set values to correct vector component",
    "",
    "            vector[u] = x * udir;",
    "            vector[v] = y * vdir;",
    "            vector[w] = depthHalf;",
    "",
    "            // now apply vector to vertex buffer",
    "",
    "            vertices.push(vector.x, vector.y, vector.z);",
    "",
    "            // set values to correct vector component",
    "",
    "            vector[u] = 0;",
    "            vector[v] = 0;",
    "            vector[w] = depth > 0 ? 1 : -1;",
    "",
    "            // now apply vector to normal buffer",
    "",
    "            normals.push(vector.x, vector.y, vector.z);",
    "",
    "            // uvs",
    "",
    "            uvs.push(ix / gridX);",
    "            uvs.push(1 - iy / gridY);",
    "",
    "            // counters",
    "",
    "            vertexCounter += 1;",
    "          }",
    "        }",
    "",
    "        // indices",
    "",
    "        // 1. you need three indices to draw a single face",
    "        // 2. a single segment consists of two faces",
    "        // 3. so we need to generate six (2*3) indices per segment",
    "",
    "        for (let iy = 0; iy < gridY; iy++) {",
    "          for (let ix = 0; ix < gridX; ix++) {",
    "            const a = numberOfVertices + ix + gridX1 * iy;",
    "            const b = numberOfVertices + ix + gridX1 * (iy + 1);",
    "            const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);",
    "            const d = numberOfVertices + (ix + 1) + gridX1 * iy;",
    "",
    "            // faces",
    "",
    "            indices.push(a, b, d);",
    "            indices.push(b, c, d);",
    "",
    "            // increase counter",
    "",
    "            groupCount += 6;",
    "          }",
    "        }",
    "",
    "        // add a group to the geometry. this will ensure multi material support",
    "",
    "        scope.addGroup(groupStart, groupCount, materialIndex);",
    "",
    "        // calculate new start value for groups",
    "",
    "        groupStart += groupCount;",
    "",
    "        // update total number of vertices",
    "",
    "        numberOfVertices += vertexCounter;",
    "      }",
    "    }",
    "",
    "    static fromJSON(data) {",
    "      return new BoxGeometry(",
    "        data.width,",
    "        data.height,",
    "        data.depth,",
    "        data.widthSegments,",
    "        data.heightSegments,",
    "        data.depthSegments",
    "      );",
    "    }",
    "  }",
    "",
    "  /**",
    "   * Uniform Utilities",
    "   */",
    "",
    "  function cloneUniforms(src) {",
    "    const dst = {};",
    "",
    "    for (const u in src) {",
    "      dst[u] = {};",
    "",
    "      for (const p in src[u]) {",
    "        const property = src[u][p];",
    "",
    "        if (",
    "          property &&",
    "          (property.isColor ||",
    "            property.isMatrix3 ||",
    "            property.isMatrix4 ||",
    "            property.isVector2 ||",
    "            property.isVector3 ||",
    "            property.isVector4 ||",
    "            property.isTexture ||",
    "            property.isQuaternion)",
    "        ) {",
    "          dst[u][p] = property.clone();",
    "        } else if (Array.isArray(property)) {",
    "          dst[u][p] = property.slice();",
    "        } else {",
    "          dst[u][p] = property;",
    "        }",
    "      }",
    "    }",
    "",
    "    return dst;",
    "  }",
    "",
    "  function mergeUniforms(uniforms) {",
    "    const merged = {};",
    "",
    "    for (let u = 0; u < uniforms.length; u++) {",
    "      const tmp = cloneUniforms(uniforms[u]);",
    "",
    "      for (const p in tmp) {",
    "        merged[p] = tmp[p];",
    "      }",
    "    }",
    "",
    "    return merged;",
    "  }",
    "",
    "  function cloneUniformsGroups(src) {",
    "    const dst = [];",
    "",
    "    for (let u = 0; u < src.length; u++) {",
    "      dst.push(src[u].clone());",
    "    }",
    "",
    "    return dst;",
    "  }",
    "",
    "  function getUnlitUniformColorSpace(renderer) {",
    "    if (renderer.getRenderTarget() === null) {",
    "      // https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398",
    "      return renderer.outputEncoding === sRGBEncoding",
    "        ? SRGBColorSpace",
    "        : LinearSRGBColorSpace;",
    "    }",
    "",
    "    return LinearSRGBColorSpace;",
    "  }",
    "",
    "  // Legacy",
    "",
    "  const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };",
    "",
    "  var default_vertex =",
    '    "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";',
    "",
    "  var default_fragment =",
    '    "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";',
    "",
    "  class ShaderMaterial extends Material {",
    "    constructor(parameters) {",
    "      super();",
    "",
    "      this.isShaderMaterial = true;",
    "",
    '      this.type = "ShaderMaterial";',
    "",
    "      this.defines = {};",
    "      this.uniforms = {};",
    "      this.uniformsGroups = [];",
    "",
    "      this.vertexShader = default_vertex;",
    "      this.fragmentShader = default_fragment;",
    "",
    "      this.linewidth = 1;",
    "",
    "      this.wireframe = false;",
    "      this.wireframeLinewidth = 1;",
    "",
    "      this.fog = false; // set to use scene fog",
    "      this.lights = false; // set to use scene lights",
    "      this.clipping = false; // set to use user-defined clipping planes",
    "",
    "      this.extensions = {",
    "        derivatives: false, // set to use derivatives",
    "        fragDepth: false, // set to use fragment depth values",
    "        drawBuffers: false, // set to use draw buffers",
    "        shaderTextureLOD: false, // set to use shader texture LOD",
    "      };",
    "",
    "      // When rendered geometry doesn't include these attributes but the material does,",
    "      // use these default values in WebGL. This avoids errors when buffer data is missing.",
    "      this.defaultAttributeValues = {",
    "        color: [1, 1, 1],",
    "        uv: [0, 0],",
    "        uv2: [0, 0],",
    "      };",
    "",
    "      this.index0AttributeName = undefined;",
    "      this.uniformsNeedUpdate = false;",
    "",
    "      this.glslVersion = null;",
    "",
    "      if (parameters !== undefined) {",
    "        this.setValues(parameters);",
    "      }",
    "    }",
    "",
    "    copy(source) {",
    "      super.copy(source);",
    "",
    "      this.fragmentShader = source.fragmentShader;",
    "      this.vertexShader = source.vertexShader;",
    "",
    "      this.uniforms = cloneUniforms(source.uniforms);",
    "      this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);",
    "",
    "      this.defines = Object.assign({}, source.defines);",
    "",
    "      this.wireframe = source.wireframe;",
    "      this.wireframeLinewidth = source.wireframeLinewidth;",
    "",
    "      this.fog = source.fog;",
    "      this.lights = source.lights;",
    "      this.clipping = source.clipping;",
    "",
    "      this.extensions = Object.assign({}, source.extensions);",
    "",
    "      this.glslVersion = source.glslVersion;",
    "",
    "      return this;",
    "    }",
    "",
    "    toJSON(meta) {",
    "      const data = super.toJSON(meta);",
    "",
    "      data.glslVersion = this.glslVersion;",
    "      data.uniforms = {};",
    "",
    "      for (const name in this.uniforms) {",
    "        const uniform = this.uniforms[name];",
    "        const value = uniform.value;",
    "",
    "        if (value && value.isTexture) {",
    "          data.uniforms[name] = {",
    '            type: "t",',
    "            value: value.toJSON(meta).uuid,",
    "          };",
    "        } else if (value && value.isColor) {",
    "          data.uniforms[name] = {",
    '            type: "c",',
    "            value: value.getHex(),",
    "          };",
    "        } else if (value && value.isVector2) {",
    "          data.uniforms[name] = {",
    '            type: "v2",',
    "            value: value.toArray(),",
    "          };",
    "        } else if (value && value.isVector3) {",
    "          data.uniforms[name] = {",
    '            type: "v3",',
    "            value: value.toArray(),",
    "          };",
    "        } else if (value && value.isVector4) {",
    "          data.uniforms[name] = {",
    '            type: "v4",',
    "            value: value.toArray(),",
    "          };",
    "        } else if (value && value.isMatrix3) {",
    "          data.uniforms[name] = {",
    '            type: "m3",',
    "            value: value.toArray(),",
    "          };",
    "        } else if (value && value.isMatrix4) {",
    "          data.uniforms[name] = {",
    '            type: "m4",',
    "            value: value.toArray(),",
    "          };",
    "        } else {",
    "          data.uniforms[name] = {",
    "            value: value,",
    "          };",
    "",
    "          // note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far",
    "        }",
    "      }",
    "",
    "      if (Object.keys(this.defines).length > 0) data.defines = this.defines;",
    "",
    "      data.vertexShader = this.vertexShader;",
    "      data.fragmentShader = this.fragmentShader;",
    "",
    "      const extensions = {};",
    "",
    "      for (const key in this.extensions) {",
    "        if (this.extensions[key] === true) extensions[key] = true;",
    "      }",
    "",
    "      if (Object.keys(extensions).length > 0) data.extensions = extensions;",
    "",
    "      return data;",
    "    }",
    "  }",
    "",
    "  class Camera extends Object3D {",
    "    constructor() {",
    "      super();",
    "",
    "      this.isCamera = true;",
    "",
    '      this.type = "Camera";',
    "",
    "      this.matrixWorldInverse = new Matrix4();",
    "",
    "      this.projectionMatrix = new Matrix4();",
    "      this.projectionMatrixInverse = new Matrix4();",
    "    }",
    "",
    "    copy(source, recursive) {",
    "      super.copy(source, recursive);",
    "",
    "      this.matrixWorldInverse.copy(source.matrixWorldInverse);",
    "",
    "      this.projectionMatrix.copy(source.projectionMatrix);",
    "      this.projectionMatrixInverse.copy(source.projectionMatrixInverse);",
    "",
    "      return this;",
    "    }",
    "",
    "    getWorldDirection(target) {",
    "      this.updateWorldMatrix(true, false);",
    "",
    "      const e = this.matrixWorld.elements;",
    "",
    "      return target.set(-e[8], -e[9], -e[10]).normalize();",
    "    }",
    "",
    "    updateMatrixWorld(force) {",
    "      super.updateMatrixWorld(force);",
    "",
    "      this.matrixWorldInverse.copy(this.matrixWorld).invert();",
    "    }",
    "",
    "    updateWorldMatrix(updateParents, updateChildren) {",
    "      super.updateWorldMatrix(updateParents, updateChildren);",
    "",
    "      this.matrixWorldInverse.copy(this.matrixWorld).invert();",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "  }",
    "",
    "  class PerspectiveCamera extends Camera {",
    "    constructor(fov = 50, aspect = 1, near = 0.1, far = 2000) {",
    "      super();",
    "",
    "      this.isPerspectiveCamera = true;",
    "",
    '      this.type = "PerspectiveCamera";',
    "",
    "      this.fov = fov;",
    "      this.zoom = 1;",
    "",
    "      this.near = near;",
    "      this.far = far;",
    "      this.focus = 10;",
    "",
    "      this.aspect = aspect;",
    "      this.view = null;",
    "",
    "      this.filmGauge = 35; // width of the film (default in millimeters)",
    "      this.filmOffset = 0; // horizontal film offset (same unit as gauge)",
    "",
    "      this.updateProjectionMatrix();",
    "    }",
    "",
    "    copy(source, recursive) {",
    "      super.copy(source, recursive);",
    "",
    "      this.fov = source.fov;",
    "      this.zoom = source.zoom;",
    "",
    "      this.near = source.near;",
    "      this.far = source.far;",
    "      this.focus = source.focus;",
    "",
    "      this.aspect = source.aspect;",
    "      this.view = source.view === null ? null : Object.assign({}, source.view);",
    "",
    "      this.filmGauge = source.filmGauge;",
    "      this.filmOffset = source.filmOffset;",
    "",
    "      return this;",
    "    }",
    "",
    "    /**",
    "     * Sets the FOV by focal length in respect to the current .filmGauge.",
    "     *",
    "     * The default film gauge is 35, so that the focal length can be specified for",
    "     * a 35mm (full frame) camera.",
    "     *",
    "     * Values for focal length and film gauge must have the same unit.",
    "     */",
    "    setFocalLength(focalLength) {",
    "      /** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */",
    "      const vExtentSlope = (0.5 * this.getFilmHeight()) / focalLength;",
    "",
    "      this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);",
    "      this.updateProjectionMatrix();",
    "    }",
    "",
    "    /**",
    "     * Calculates the focal length from the current .fov and .filmGauge.",
    "     */",
    "    getFocalLength() {",
    "      const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);",
    "",
    "      return (0.5 * this.getFilmHeight()) / vExtentSlope;",
    "    }",
    "",
    "    getEffectiveFOV() {",
    "      return (",
    "        RAD2DEG * 2 * Math.atan(Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom)",
    "      );",
    "    }",
    "",
    "    getFilmWidth() {",
    "      // film not completely covered in portrait format (aspect < 1)",
    "      return this.filmGauge * Math.min(this.aspect, 1);",
    "    }",
    "",
    "    getFilmHeight() {",
    "      // film not completely covered in landscape format (aspect > 1)",
    "      return this.filmGauge / Math.max(this.aspect, 1);",
    "    }",
    "",
    "    /**",
    "     * Sets an offset in a larger frustum. This is useful for multi-window or",
    "     * multi-monitor/multi-machine setups.",
    "     *",
    "     * For example, if you have 3x2 monitors and each monitor is 1920x1080 and",
    "     * the monitors are in grid like this",
    "     *",
    "     *   +---+---+---+",
    "     *   | A | B | C |",
    "     *   +---+---+---+",
    "     *   | D | E | F |",
    "     *   +---+---+---+",
    "     *",
    "     * then for each monitor you would call it like this",
    "     *",
    "     *   const w = 1920;",
    "     *   const h = 1080;",
    "     *   const fullWidth = w * 3;",
    "     *   const fullHeight = h * 2;",
    "     *",
    "     *   --A--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );",
    "     *   --B--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );",
    "     *   --C--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );",
    "     *   --D--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );",
    "     *   --E--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );",
    "     *   --F--",
    "     *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );",
    "     *",
    "     *   Note there is no reason monitors have to be the same size or in a grid.",
    "     */",
    "    setViewOffset(fullWidth, fullHeight, x, y, width, height) {",
    "      this.aspect = fullWidth / fullHeight;",
    "",
    "      if (this.view === null) {",
    "        this.view = {",
    "          enabled: true,",
    "          fullWidth: 1,",
    "          fullHeight: 1,",
    "          offsetX: 0,",
    "          offsetY: 0,",
    "          width: 1,",
    "          height: 1,",
    "        };",
    "      }",
    "",
    "      this.view.enabled = true;",
    "      this.view.fullWidth = fullWidth;",
    "      this.view.fullHeight = fullHeight;",
    "      this.view.offsetX = x;",
    "      this.view.offsetY = y;",
    "      this.view.width = width;",
    "      this.view.height = height;",
    "",
    "      this.updateProjectionMatrix();",
    "    }",
    "",
    "    clearViewOffset() {",
    "      if (this.view !== null) {",
    "        this.view.enabled = false;",
    "      }",
    "",
    "      this.updateProjectionMatrix();",
    "    }",
    "",
    "    updateProjectionMatrix() {",
    "      const near = this.near;",
    "      let top = (near * Math.tan(DEG2RAD * 0.5 * this.fov)) / this.zoom;",
    "      let height = 2 * top;",
    "      let width = this.aspect * height;",
    "      let left = -0.5 * width;",
    "      const view = this.view;",
    "",
    "      if (this.view !== null && this.view.enabled) {",
    "        const fullWidth = view.fullWidth,",
    "          fullHeight = view.fullHeight;",
    "",
    "        left += (view.offsetX * width) / fullWidth;",
    "        top -= (view.offsetY * height) / fullHeight;",
    "        width *= view.width / fullWidth;",
    "        height *= view.height / fullHeight;",
    "      }",
    "",
    "      const skew = this.filmOffset;",
    "      if (skew !== 0) left += (near * skew) / this.getFilmWidth();",
    "",
    "      this.projectionMatrix.makePerspective(",
    "        left,",
    "        left + width,",
    "        top,",
    "        top - height,",
    "        near,",
    "        this.far",
    "      );",
    "",
    "      this.projectionMatrixInverse.copy(this.projectionMatrix).invert();",
    "    }",
    "",
    "    toJSON(meta) {",
    "      const data = super.toJSON(meta);",
    "",
    "      data.object.fov = this.fov;",
    "      data.object.zoom = this.zoom;",
    "",
    "      data.object.near = this.near;",
    "      data.object.far = this.far;",
    "      data.object.focus = this.focus;",
    "",
    "      data.object.aspect = this.aspect;",
    "",
    "      if (this.view !== null) data.object.view = Object.assign({}, this.view);",
    "",
    "      data.object.filmGauge = this.filmGauge;",
    "      data.object.filmOffset = this.filmOffset;",
    "",
    "      return data;",
    "    }",
    "  }",
    "",
    "  const fov = -90; // negative fov is not an error",
    "  const aspect = 1;",
    "",
    "  class CubeCamera extends Object3D {",
    "    constructor(near, far, renderTarget) {",
    "      super();",
    "",
    '      this.type = "CubeCamera";',
    "",
    "      this.renderTarget = renderTarget;",
    "",
    "      const cameraPX = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraPX.layers = this.layers;",
    "      cameraPX.up.set(0, 1, 0);",
    "      cameraPX.lookAt(1, 0, 0);",
    "      this.add(cameraPX);",
    "",
    "      const cameraNX = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraNX.layers = this.layers;",
    "      cameraNX.up.set(0, 1, 0);",
    "      cameraNX.lookAt(-1, 0, 0);",
    "      this.add(cameraNX);",
    "",
    "      const cameraPY = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraPY.layers = this.layers;",
    "      cameraPY.up.set(0, 0, -1);",
    "      cameraPY.lookAt(0, 1, 0);",
    "      this.add(cameraPY);",
    "",
    "      const cameraNY = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraNY.layers = this.layers;",
    "      cameraNY.up.set(0, 0, 1);",
    "      cameraNY.lookAt(0, -1, 0);",
    "      this.add(cameraNY);",
    "",
    "      const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraPZ.layers = this.layers;",
    "      cameraPZ.up.set(0, 1, 0);",
    "      cameraPZ.lookAt(0, 0, 1);",
    "      this.add(cameraPZ);",
    "",
    "      const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);",
    "      cameraNZ.layers = this.layers;",
    "      cameraNZ.up.set(0, 1, 0);",
    "      cameraNZ.lookAt(0, 0, -1);",
    "      this.add(cameraNZ);",
    "    }",
    "",
    "    update(renderer, scene) {",
    "      if (this.parent === null) this.updateMatrixWorld();",
    "",
    "      const renderTarget = this.renderTarget;",
    "",
    "      const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] =",
    "        this.children;",
    "",
    "      const currentRenderTarget = renderer.getRenderTarget();",
    "",
    "      const currentToneMapping = renderer.toneMapping;",
    "      const currentXrEnabled = renderer.xr.enabled;",
    "",
    "      renderer.toneMapping = NoToneMapping;",
    "      renderer.xr.enabled = false;",
    "",
    "      const generateMipmaps = renderTarget.texture.generateMipmaps;",
    "",
    "      renderTarget.texture.generateMipmaps = false;",
    "",
    "      renderer.setRenderTarget(renderTarget, 0);",
    "      renderer.render(scene, cameraPX);",
    "",
    "      renderer.setRenderTarget(renderTarget, 1);",
    "      renderer.render(scene, cameraNX);",
    "",
    "      renderer.setRenderTarget(renderTarget, 2);",
    "      renderer.render(scene, cameraPY);",
    "",
    "      renderer.setRenderTarget(renderTarget, 3);",
    "      renderer.render(scene, cameraNY);",
    "",
    "      renderer.setRenderTarget(renderTarget, 4);",
    "      renderer.render(scene, cameraPZ);",
    "",
    "      renderTarget.texture.generateMipmaps = generateMipmaps;",
    "",
    "      renderer.setRenderTarget(renderTarget, 5);",
    "      renderer.render(scene, cameraNZ);",
    "",
    "      renderer.setRenderTarget(currentRenderTarget);",
    "",
    "      renderer.toneMapping = currentToneMapping;",
    "      renderer.xr.enabled = currentXrEnabled;",
    "",
    "      renderTarget.texture.needsPMREMUpdate = true;",
    "    }",
    "  }",
    "",
    "  class CubeTexture extends Texture {",
    "    constructor(",
    "      images,",
    "      mapping,",
    "      wrapS,",
    "      wrapT,",
    "      magFilter,",
    "      minFilter,",
    "      format,",
    "      type,",
    "      anisotropy,",
    "      encoding",
    "    ) {",
    "      images = images !== undefined ? images : [];",
    "      mapping = mapping !== undefined ? mapping : CubeReflectionMapping;",
    "",
    "      super(",
    "        images,",
    "        mapping,",
    "        wrapS,",
    "        wrapT,",
    "        magFilter,",
    "        minFilter,",
    "        format,",
    "        type,",
    "        anisotropy,",
    "        encoding",
    "      );",
    "",
    "      this.isCubeTexture = true;",
    "",
    "      this.flipY = false;",
    "    }",
    "",
    "    get images() {",
    "      return this.image;",
    "    }",
    "",
    "    set images(value) {",
    "      this.image = value;",
    "    }",
    "  }",
    "",
    "  class WebGLCubeRenderTarget extends WebGLRenderTarget {",
    "    constructor(size = 1, options = {}) {",
    "      super(size, size, options);",
    "",
    "      this.isWebGLCubeRenderTarget = true;",
    "",
    "      const image = { width: size, height: size, depth: 1 };",
    "      const images = [image, image, image, image, image, image];",
    "",
    "      this.texture = new CubeTexture(",
    "        images,",
    "        options.mapping,",
    "        options.wrapS,",
    "        options.wrapT,",
    "        options.magFilter,",
    "        options.minFilter,",
    "        options.format,",
    "        options.type,",
    "        options.anisotropy,",
    "        options.encoding",
    "      );",
    "",
    "      // By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)",
    "      // in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,",
    "      // in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.",
    "",
    "      // three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped",
    "      // and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture",
    "      // as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).",
    "",
    "      this.texture.isRenderTargetTexture = true;",
    "",
    "      this.texture.generateMipmaps =",
    "        options.generateMipmaps !== undefined ? options.generateMipmaps : false;",
    "      this.texture.minFilter =",
    "        options.minFilter !== undefined ? options.minFilter : LinearFilter;",
    "    }",
    "",
    "    fromEquirectangularTexture(renderer, texture) {",
    "      this.texture.type = texture.type;",
    "      this.texture.encoding = texture.encoding;",
    "",
    "      this.texture.generateMipmaps = texture.generateMipmaps;",
    "      this.texture.minFilter = texture.minFilter;",
    "      this.texture.magFilter = texture.magFilter;",
    "",
    "      const shader = {",
    "        uniforms: {",
    "          tEquirect: { value: null },",
    "        },",
    "",
    "        vertexShader: /* glsl */ `",
    "",
    "				varying vec3 vWorldDirection;",
    "",
    "				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {",
    "",
    "					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );",
    "",
    "				}",
    "",
    "				void main() {",
    "",
    "					vWorldDirection = transformDirection( position, modelMatrix );",
    "",
    "					#include <begin_vertex>",
    "					#include <project_vertex>",
    "",
    "				}",
    "			`,",
    "",
    "        fragmentShader: /* glsl */ `",
    "",
    "				uniform sampler2D tEquirect;",
    "",
    "				varying vec3 vWorldDirection;",
    "",
    "				#include <common>",
    "",
    "				void main() {",
    "",
    "					vec3 direction = normalize( vWorldDirection );",
    "",
    "					vec2 sampleUV = equirectUv( direction );",
    "",
    "					gl_FragColor = texture2D( tEquirect, sampleUV );",
    "",
    "				}",
    "			`,",
    "      };",
    "",
    "      const geometry = new BoxGeometry(5, 5, 5);",
    "",
    "      const material = new ShaderMaterial({",
    '        name: "CubemapFromEquirect",',
    "",
    "        uniforms: cloneUniforms(shader.uniforms),",
    "        vertexShader: shader.vertexShader,",
    "        fragmentShader: shader.fragmentShader,",
    "        side: BackSide,",
    "        blending: NoBlending,",
    "      });",
    "",
    "      material.uniforms.tEquirect.value = texture;",
    "",
    "      const mesh = new Mesh(geometry, material);",
    "",
    "      const currentMinFilter = texture.minFilter;",
    "",
    "      // Avoid blurred poles",
    "      if (texture.minFilter === LinearMipmapLinearFilter)",
    "        texture.minFilter = LinearFilter;",
    "",
    "      const camera = new CubeCamera(1, 10, this);",
    "      camera.update(renderer, mesh);",
    "",
    "      texture.minFilter = currentMinFilter;",
    "",
    "      mesh.geometry.dispose();",
    "      mesh.material.dispose();",
    "",
    "      return this;",
    "    }",
    "",
    "    clear(renderer, color, depth, stencil) {",
    "      const currentRenderTarget = renderer.getRenderTarget();",
    "",
    "      for (let i = 0; i < 6; i++) {",
    "        renderer.setRenderTarget(this, i);",
    "",
    "        renderer.clear(color, depth, stencil);",
    "      }",
    "",
    "      renderer.setRenderTarget(currentRenderTarget);",
    "    }",
    "  }",
    "",
    "  const _vector1 = /*@__PURE__*/ new Vector3();",
    "  const _vector2 = /*@__PURE__*/ new Vector3();",
    "  const _normalMatrix = /*@__PURE__*/ new Matrix3();",
    "",
    "  class Plane {",
    "    constructor(normal = new Vector3(1, 0, 0), constant = 0) {",
    "      this.isPlane = true;",
    "",
    "      // normal is assumed to be normalized",
    "",
    "      this.normal = normal;",
    "      this.constant = constant;",
    "    }",
    "",
    "    set(normal, constant) {",
    "      this.normal.copy(normal);",
    "      this.constant = constant;",
    "",
    "      return this;",
    "    }",
    "",
    "    setComponents(x, y, z, w) {",
    "      this.normal.set(x, y, z);",
    "      this.constant = w;",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromNormalAndCoplanarPoint(normal, point) {",
    "      this.normal.copy(normal);",
    "      this.constant = -point.dot(this.normal);",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromCoplanarPoints(a, b, c) {",
    "      const normal = _vector1",
    "        .subVectors(c, b)",
    "        .cross(_vector2.subVectors(a, b))",
    "        .normalize();",
    "",
    "      // Q: should an error be thrown if normal is zero (e.g. degenerate plane)?",
    "",
    "      this.setFromNormalAndCoplanarPoint(normal, a);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(plane) {",
    "      this.normal.copy(plane.normal);",
    "      this.constant = plane.constant;",
    "",
    "      return this;",
    "    }",
    "",
    "    normalize() {",
    "      // Note: will lead to a divide by zero if the plane is invalid.",
    "",
    "      const inverseNormalLength = 1.0 / this.normal.length();",
    "      this.normal.multiplyScalar(inverseNormalLength);",
    "      this.constant *= inverseNormalLength;",
    "",
    "      return this;",
    "    }",
    "",
    "    negate() {",
    "      this.constant *= -1;",
    "      this.normal.negate();",
    "",
    "      return this;",
    "    }",
    "",
    "    distanceToPoint(point) {",
    "      return this.normal.dot(point) + this.constant;",
    "    }",
    "",
    "    distanceToSphere(sphere) {",
    "      return this.distanceToPoint(sphere.center) - sphere.radius;",
    "    }",
    "",
    "    projectPoint(point, target) {",
    "      return target",
    "        .copy(this.normal)",
    "        .multiplyScalar(-this.distanceToPoint(point))",
    "        .add(point);",
    "    }",
    "",
    "    intersectLine(line, target) {",
    "      const direction = line.delta(_vector1);",
    "",
    "      const denominator = this.normal.dot(direction);",
    "",
    "      if (denominator === 0) {",
    "        // line is coplanar, return origin",
    "        if (this.distanceToPoint(line.start) === 0) {",
    "          return target.copy(line.start);",
    "        }",
    "",
    "        // Unsure if this is the correct method to handle this case.",
    "        return null;",
    "      }",
    "",
    "      const t = -(line.start.dot(this.normal) + this.constant) / denominator;",
    "",
    "      if (t < 0 || t > 1) {",
    "        return null;",
    "      }",
    "",
    "      return target.copy(direction).multiplyScalar(t).add(line.start);",
    "    }",
    "",
    "    intersectsLine(line) {",
    "      // Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.",
    "",
    "      const startSign = this.distanceToPoint(line.start);",
    "      const endSign = this.distanceToPoint(line.end);",
    "",
    "      return (startSign < 0 && endSign > 0) || (endSign < 0 && startSign > 0);",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      return box.intersectsPlane(this);",
    "    }",
    "",
    "    intersectsSphere(sphere) {",
    "      return sphere.intersectsPlane(this);",
    "    }",
    "",
    "    coplanarPoint(target) {",
    "      return target.copy(this.normal).multiplyScalar(-this.constant);",
    "    }",
    "",
    "    applyMatrix4(matrix, optionalNormalMatrix) {",
    "      const normalMatrix =",
    "        optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);",
    "",
    "      const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);",
    "",
    "      const normal = this.normal.applyMatrix3(normalMatrix).normalize();",
    "",
    "      this.constant = -referencePoint.dot(normal);",
    "",
    "      return this;",
    "    }",
    "",
    "    translate(offset) {",
    "      this.constant -= offset.dot(this.normal);",
    "",
    "      return this;",
    "    }",
    "",
    "    equals(plane) {",
    "      return (",
    "        plane.normal.equals(this.normal) && plane.constant === this.constant",
    "      );",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "  }",
    "",
    "  const _sphere$2 = /*@__PURE__*/ new Sphere();",
    "  const _vector$7 = /*@__PURE__*/ new Vector3();",
    "",
    "  class Frustum {",
    "    constructor(",
    "      p0 = new Plane(),",
    "      p1 = new Plane(),",
    "      p2 = new Plane(),",
    "      p3 = new Plane(),",
    "      p4 = new Plane(),",
    "      p5 = new Plane()",
    "    ) {",
    "      this.planes = [p0, p1, p2, p3, p4, p5];",
    "    }",
    "",
    "    set(p0, p1, p2, p3, p4, p5) {",
    "      const planes = this.planes;",
    "",
    "      planes[0].copy(p0);",
    "      planes[1].copy(p1);",
    "      planes[2].copy(p2);",
    "      planes[3].copy(p3);",
    "      planes[4].copy(p4);",
    "      planes[5].copy(p5);",
    "",
    "      return this;",
    "    }",
    "",
    "    copy(frustum) {",
    "      const planes = this.planes;",
    "",
    "      for (let i = 0; i < 6; i++) {",
    "        planes[i].copy(frustum.planes[i]);",
    "      }",
    "",
    "      return this;",
    "    }",
    "",
    "    setFromProjectionMatrix(m) {",
    "      const planes = this.planes;",
    "      const me = m.elements;",
    "      const me0 = me[0],",
    "        me1 = me[1],",
    "        me2 = me[2],",
    "        me3 = me[3];",
    "      const me4 = me[4],",
    "        me5 = me[5],",
    "        me6 = me[6],",
    "        me7 = me[7];",
    "      const me8 = me[8],",
    "        me9 = me[9],",
    "        me10 = me[10],",
    "        me11 = me[11];",
    "      const me12 = me[12],",
    "        me13 = me[13],",
    "        me14 = me[14],",
    "        me15 = me[15];",
    "",
    "      planes[0]",
    "        .setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12)",
    "        .normalize();",
    "      planes[1]",
    "        .setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12)",
    "        .normalize();",
    "      planes[2]",
    "        .setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13)",
    "        .normalize();",
    "      planes[3]",
    "        .setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13)",
    "        .normalize();",
    "      planes[4]",
    "        .setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14)",
    "        .normalize();",
    "      planes[5]",
    "        .setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14)",
    "        .normalize();",
    "",
    "      return this;",
    "    }",
    "",
    "    intersectsObject(object) {",
    "      const geometry = object.geometry;",
    "",
    "      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();",
    "",
    "      _sphere$2.copy(geometry.boundingSphere).applyMatrix4(object.matrixWorld);",
    "",
    "      return this.intersectsSphere(_sphere$2);",
    "    }",
    "",
    "    intersectsSprite(sprite) {",
    "      _sphere$2.center.set(0, 0, 0);",
    "      _sphere$2.radius = 0.7071067811865476;",
    "      _sphere$2.applyMatrix4(sprite.matrixWorld);",
    "",
    "      return this.intersectsSphere(_sphere$2);",
    "    }",
    "",
    "    intersectsSphere(sphere) {",
    "      const planes = this.planes;",
    "      const center = sphere.center;",
    "      const negRadius = -sphere.radius;",
    "",
    "      for (let i = 0; i < 6; i++) {",
    "        const distance = planes[i].distanceToPoint(center);",
    "",
    "        if (distance < negRadius) {",
    "          return false;",
    "        }",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    intersectsBox(box) {",
    "      const planes = this.planes;",
    "",
    "      for (let i = 0; i < 6; i++) {",
    "        const plane = planes[i];",
    "",
    "        // corner at max distance",
    "",
    "        _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;",
    "        _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;",
    "        _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;",
    "",
    "        if (plane.distanceToPoint(_vector$7) < 0) {",
    "          return false;",
    "        }",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    containsPoint(point) {",
    "      const planes = this.planes;",
    "",
    "      for (let i = 0; i < 6; i++) {",
    "        if (planes[i].distanceToPoint(point) < 0) {",
    "          return false;",
    "        }",
    "      }",
    "",
    "      return true;",
    "    }",
    "",
    "    clone() {",
    "      return new this.constructor().copy(this);",
    "    }",
    "  }",
    "",
    "  function WebGLAnimation() {",
    "    let context = null;",
    "    let isAnimating = false;",
    "    let animationLoop = null;",
    "    let requestId = null;",
    "",
    "    function onAnimationFrame(time, frame) {",
    "      animationLoop(time, frame);",
    "",
    "      requestId = context.requestAnimationFrame(onAnimationFrame);",
    "    }",
    "",
    "    return {",
    "      start: function () {",
    "        if (isAnimating === true) return;",
    "        if (animationLoop === null) return;",
    "",
    "        requestId = context.requestAnimationFrame(onAnimationFrame);",
    "",
    "        isAnimating = true;",
    "      },",
    "",
    "      stop: function () {",
    "        context.cancelAnimationFrame(requestId);",
    "",
    "        isAnimating = false;",
    "      },",
    "",
    "      setAnimationLoop: function (callback) {",
    "        animationLoop = callback;",
    "      },",
    "",
    "      setContext: function (value) {",
    "        context = value;",
    "      },",
    "    };",
    "  }",
    "",
    "  function WebGLAttributes(gl, capabilities) {",
    "    const isWebGL2 = capabilities.isWebGL2;",
    "",
    "    const buffers = new WeakMap();",
    "",
    "    function createBuffer(attribute, bufferType) {",
    "      const array = attribute.array;",
    "      const usage = attribute.usage;",
    "",
    "      const buffer = gl.createBuffer();",
    "",
    "      gl.bindBuffer(bufferType, buffer);",
    "      gl.bufferData(bufferType, array, usage);",
    "",
    "      attribute.onUploadCallback();",
    "",
    "      let type;",
    "",
    "      if (array instanceof Float32Array) {",
    "        type = gl.FLOAT;",
    "      } else if (array instanceof Uint16Array) {",
    "        if (attribute.isFloat16BufferAttribute) {",
    "          if (isWebGL2) {",
    "            type = gl.HALF_FLOAT;",
    "          } else {",
    "            throw new Error(",
    '              "THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."',
    "            );",
    "          }",
    "        } else {",
    "          type = gl.UNSIGNED_SHORT;",
    "        }",
    "      } else if (array instanceof Int16Array) {",
    "        type = gl.SHORT;",
    "      } else if (array instanceof Uint32Array) {",
    "        type = gl.UNSIGNED_INT;",
    "      } else if (array instanceof Int32Array) {",
    "        type = gl.INT;",
    "      } else if (array instanceof Int8Array) {",
    "        type = gl.BYTE;",
    "      } else if (array instanceof Uint8Array) {",
    "        type = gl.UNSIGNED_BYTE;",
    "      } else if (array instanceof Uint8ClampedArray) {",
    "        type = gl.UNSIGNED_BYTE;",
    "      } else {",
    "        throw new Error(",
    '          "THREE.WebGLAttributes: Unsupported buffer data format: " + array',
    "        );",
    "      }",
    "",
    "      return {",
    "        buffer: buffer,",
    "        type: type,",
    "        bytesPerElement: array.BYTES_PER_ELEMENT,",
    "        version: attribute.version,",
    "      };",
    "    }",
    "",
    "    function updateBuffer(buffer, attribute, bufferType) {",
    "      const array = attribute.array;",
    "      const updateRange = attribute.updateRange;",
    "",
    "      gl.bindBuffer(bufferType, buffer);",
    "",
    "      if (updateRange.count === -1) {",
    "        // Not using update ranges",
    "",
    "        gl.bufferSubData(bufferType, 0, array);",
    "      } else {",
    "        if (isWebGL2) {",
    "          gl.bufferSubData(",
    "            bufferType,",
    "            updateRange.offset * array.BYTES_PER_ELEMENT,",
    "            array,",
    "            updateRange.offset,",
    "            updateRange.count",
    "          );",
    "        } else {",
    "          gl.bufferSubData(",
    "            bufferType,",
    "            updateRange.offset * array.BYTES_PER_ELEMENT,",
    "            array.subarray(",
    "              updateRange.offset,",
    "              updateRange.offset + updateRange.count",
    "            )",
    "          );",
    "        }",
    "",
    "        updateRange.count = -1; // reset range",
    "      }",
    "",
    "      attribute.onUploadCallback();",
    "    }",
    "",
    "    //",
    "",
    "    function get(attribute) {",
    "      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;",
    "",
    "      return buffers.get(attribute);",
    "    }",
    "",
    "    function remove(attribute) {",
    "      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;",
    "",
    "      const data = buffers.get(attribute);",
    "",
    "      if (data) {",
    "        gl.deleteBuffer(data.buffer);",
    "",
    "        buffers.delete(attribute);",
    "      }",
    "    }",
    "",
    "    function update(attribute, bufferType) {",
    "      if (attribute.isGLBufferAttribute) {",
    "        const cached = buffers.get(attribute);",
    "",
    "        if (!cached || cached.version < attribute.version) {",
    "          buffers.set(attribute, {",
    "            buffer: attribute.buffer,",
    "            type: attribute.type,",
    "            bytesPerElement: attribute.elementSize,",
    "            version: attribute.version,",
    "          });",
    "        }",
    "",
    "        return;",
    "      }",
    "",
    "      if (attribute.isInterleavedBufferAttribute) attribute = attribute.data;",
    "",
    "      const data = buffers.get(attribute);",
    "",
    "      if (data === undefined) {",
    "        buffers.set(attribute, createBuffer(attribute, bufferType));",
    "      } else if (data.version < attribute.version) {",
    "        updateBuffer(data.buffer, attribute, bufferType);",
    "",
    "        data.version = attribute.version;",
    "      }",
    "    }",
    "",
    "    return {",
    "      get: get,",
    "      remove: remove,",
    "      update: update,",
    "    };",
    "  }",
    "",
    "  class PlaneGeometry extends BufferGeometry {",
    "    constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {",
    "      super();",
    "",
    '      this.type = "PlaneGeometry";',
    "",
    "      this.parameters = {",
    "        width: width,",
    "        height: height,",
    "        widthSegments: widthSegments,",
    "        heightSegments: heightSegments,",
    "      };",
    "",
    "      const width_half = width / 2;",
    "      const height_half = height / 2;",
    "",
    "      const gridX = Math.floor(widthSegments);",
    "      const gridY = Math.floor(heightSegments);",
    "",
    "      const gridX1 = gridX + 1;",
    "      const gridY1 = gridY + 1;",
    "",
    "      const segment_width = width / gridX;",
    "      const segment_height = height / gridY;",
    "",
    "      //",
    "",
    "      const indices = [];",
    "      const vertices = [];",
    "      const normals = [];",
    "      const uvs = [];",
    "",
    "      for (let iy = 0; iy < gridY1; iy++) {",
    "        const y = iy * segment_height - height_half;",
    "",
    "        for (let ix = 0; ix < gridX1; ix++) {",
    "          const x = ix * segment_width - width_half;",
    "",
    "          vertices.push(x, -y, 0);",
    "",
    "          normals.push(0, 0, 1);",
    "",
    "          uvs.push(ix / gridX);",
    "          uvs.push(1 - iy / gridY);",
    "        }",
    "      }",
    "",
    "      for (let iy = 0; iy < gridY; iy++) {",
    "        for (let ix = 0; ix < gridX; ix++) {",
    "          const a = ix + gridX1 * iy;",
    "          const b = ix + gridX1 * (iy + 1);",
    "          const c = ix + 1 + gridX1 * (iy + 1);",
    "          const d = ix + 1 + gridX1 * iy;",
    "",
    "          indices.push(a, b, d);",
    "          indices.push(b, c, d);",
    "        }",
    "      }",
    "",
    "      this.setIndex(indices);",
    '      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));',
    '      this.setAttribute("normal", new Float32BufferAttribute(normals, 3));',
    '      this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));',
    "    }",
    "",
    "    static fromJSON(data) {",
    "      return new PlaneGeometry(",
    "        data.width,",
    "        data.height,",
    "        data.widthSegments,",
    "        data.heightSegments",
    "      );",
    "    }",
    "  }",
    "",
    "  const ShaderChunk = {",
    "    alphamap_fragment: alphamap_fragment,",
    "    alphamap_pars_fragment: alphamap_pars_fragment,",
    "    alphatest_fragment: alphatest_fragment,",
    "    alphatest_pars_fragment: alphatest_pars_fragment,",
    "    aomap_fragment: aomap_fragment,",
    "    aomap_pars_fragment: aomap_pars_fragment,",
    "    begin_vertex: begin_vertex,",
    "    beginnormal_vertex: beginnormal_vertex,",
    "    bsdfs: bsdfs,",
    "    iridescence_fragment: iridescence_fragment,",
    "    bumpmap_pars_fragment: bumpmap_pars_fragment,",
    "    clipping_planes_fragment: clipping_planes_fragment,",
    "    clipping_planes_pars_fragment: clipping_planes_pars_fragment,",
    "    clipping_planes_pars_vertex: clipping_planes_pars_vertex,",
    "    clipping_planes_vertex: clipping_planes_vertex,",
    "    color_fragment: color_fragment,",
    "    color_pars_fragment: color_pars_fragment,",
    "    color_pars_vertex: color_pars_vertex,",
    "    color_vertex: color_vertex,",
    "    common: common,",
    "    cube_uv_reflection_fragment: cube_uv_reflection_fragment,",
    "    defaultnormal_vertex: defaultnormal_vertex,",
    "    displacementmap_pars_vertex: displacementmap_pars_vertex,",
    "    displacementmap_vertex: displacementmap_vertex,",
    "    emissivemap_fragment: emissivemap_fragment,",
    "    emissivemap_pars_fragment: emissivemap_pars_fragment,",
    "    encodings_fragment: encodings_fragment,",
    "    encodings_pars_fragment: encodings_pars_fragment,",
    "    envmap_fragment: envmap_fragment,",
    "    envmap_common_pars_fragment: envmap_common_pars_fragment,",
    "    envmap_pars_fragment: envmap_pars_fragment,",
    "    envmap_pars_vertex: envmap_pars_vertex,",
    "    envmap_physical_pars_fragment: envmap_physical_pars_fragment,",
    "    envmap_vertex: envmap_vertex,",
    "    fog_vertex: fog_vertex,",
    "    fog_pars_vertex: fog_pars_vertex,",
    "    fog_fragment: fog_fragment,",
    "    fog_pars_fragment: fog_pars_fragment,",
    "    gradientmap_pars_fragment: gradientmap_pars_fragment,",
    "    lightmap_fragment: lightmap_fragment,",
    "    lightmap_pars_fragment: lightmap_pars_fragment,",
    "    lights_lambert_fragment: lights_lambert_fragment,",
    "    lights_lambert_pars_fragment: lights_lambert_pars_fragment,",
    "    lights_pars_begin: lights_pars_begin,",
    "    lights_toon_fragment: lights_toon_fragment,",
    "    lights_toon_pars_fragment: lights_toon_pars_fragment,",
    "    lights_phong_fragment: lights_phong_fragment,",
    "    lights_phong_pars_fragment: lights_phong_pars_fragment,",
    "    lights_physical_fragment: lights_physical_fragment,",
    "    lights_physical_pars_fragment: lights_physical_pars_fragment,",
    "    lights_fragment_begin: lights_fragment_begin,",
    "    lights_fragment_maps: lights_fragment_maps,",
    "    lights_fragment_end: lights_fragment_end,",
    "    logdepthbuf_fragment: logdepthbuf_fragment,",
    "    logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,",
    "    logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,",
    "    logdepthbuf_vertex: logdepthbuf_vertex,",
    "    map_fragment: map_fragment,",
    "    map_pars_fragment: map_pars_fragment,",
    "    map_particle_fragment: map_particle_fragment,",
    "    map_particle_pars_fragment: map_particle_pars_fragment,",
    "    metalnessmap_fragment: metalnessmap_fragment,",
    "    metalnessmap_pars_fragment: metalnessmap_pars_fragment,",
    "    morphcolor_vertex: morphcolor_vertex,",
    "    morphnormal_vertex: morphnormal_vertex,",
    "    morphtarget_pars_vertex: morphtarget_pars_vertex,",
    "    morphtarget_vertex: morphtarget_vertex,",
    "    normal_fragment_begin: normal_fragment_begin,",
    "    normal_fragment_maps: normal_fragment_maps,",
    "    normal_pars_fragment: normal_pars_fragment,",
    "    normal_pars_vertex: normal_pars_vertex,",
    "    normal_vertex: normal_vertex,",
    "    normalmap_pars_fragment: normalmap_pars_fragment,",
    "    clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,",
    "    clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,",
    "    clearcoat_pars_fragment: clearcoat_pars_fragment,",
    "    iridescence_pars_fragment: iridescence_pars_fragment,",
    "    output_fragment: output_fragment,",
    "    packing: packing,",
    "    premultiplied_alpha_fragment: premultiplied_alpha_fragment,",
    "    project_vertex: project_vertex,",
    "    dithering_fragment: dithering_fragment,",
    "    dithering_pars_fragment: dithering_pars_fragment,",
    "    roughnessmap_fragment: roughnessmap_fragment,",
    "    roughnessmap_pars_fragment: roughnessmap_pars_fragment,",
    "    shadowmap_pars_fragment: shadowmap_pars_fragment,",
    "    shadowmap_pars_vertex: shadowmap_pars_vertex,",
    "    shadowmap_vertex: shadowmap_vertex,",
    "    shadowmask_pars_fragment: shadowmask_pars_fragment,",
    "    skinbase_vertex: skinbase_vertex,",
    "    skinning_pars_vertex: skinning_pars_vertex,",
    "    skinning_vertex: skinning_vertex,",
    "    skinnormal_vertex: skinnormal_vertex,",
    "    specularmap_fragment: specularmap_fragment,",
    "    specularmap_pars_fragment: specularmap_pars_fragment,",
    "    tonemapping_fragment: tonemapping_fragment,",
    "    tonemapping_pars_fragment: tonemapping_pars_fragment,",
    "    transmission_fragment: transmission_fragment,",
    "    transmission_pars_fragment: transmission_pars_fragment,",
    "    uv_pars_fragment: uv_pars_fragment,",
    "    uv_pars_vertex: uv_pars_vertex,",
    "    uv_vertex: uv_vertex,",
    "    uv2_pars_fragment: uv2_pars_fragment,",
    "    uv2_pars_vertex: uv2_pars_vertex,",
    "    uv2_vertex: uv2_vertex,",
    "    worldpos_vertex: worldpos_vertex,",
    "",
    "    background_vert: vertex$h,",
    "    background_frag: fragment$h,",
    "    backgroundCube_vert: vertex$g,",
    "    backgroundCube_frag: fragment$g,",
    "    cube_vert: vertex$f,",
    "    cube_frag: fragment$f,",
    "    depth_vert: vertex$e,",
    "    depth_frag: fragment$e,",
    "    distanceRGBA_vert: vertex$d,",
    "    distanceRGBA_frag: fragment$d,",
    "    equirect_vert: vertex$c,",
    "    equirect_frag: fragment$c,",
    "    linedashed_vert: vertex$b,",
    "    linedashed_frag: fragment$b,",
    "    meshbasic_vert: vertex$a,",
    "    meshbasic_frag: fragment$a,",
    "    meshlambert_vert: vertex$9,",
    "    meshlambert_frag: fragment$9,",
    "    meshmatcap_vert: vertex$8,",
    "    meshmatcap_frag: fragment$8,",
    "    meshnormal_vert: vertex$7,",
    "    meshnormal_frag: fragment$7,",
    "    meshphong_vert: vertex$6,",
    "    meshphong_frag: fragment$6,",
    "    meshphysical_vert: vertex$5,",
    "    meshphysical_frag: fragment$5,",
    "    meshtoon_vert: vertex$4,",
    "    meshtoon_frag: fragment$4,",
    "    points_vert: vertex$3,",
    "    points_frag: fragment$3,",
    "    shadow_vert: vertex$2,",
    "    shadow_frag: fragment$2,",
    "    sprite_vert: vertex$1,",
    "    sprite_frag: fragment$1,",
    "  };",
    "",
    "  /**",
    "   * Uniforms library for shared webgl shaders",
    "   */",
    "",
    "  const UniformsLib = {",
    "    common: {",
    "      diffuse: { value: /*@__PURE__*/ new Color(0xffffff) },",
    "      opacity: { value: 1.0 },",
    "",
    "      map: { value: null },",
    "      uvTransform: { value: /*@__PURE__*/ new Matrix3() },",
    "      uv2Transform: { value: /*@__PURE__*/ new Matrix3() },",
    "",
    "      alphaMap: { value: null },",
    "      alphaTest: { value: 0 },",
    "    },",
    "",
    "    specularmap: {",
    "      specularMap: { value: null },",
    "    },",
    "",
    "    envmap: {",
    "      envMap: { value: null },",
    "      flipEnvMap: { value: -1 },",
    "      reflectivity: { value: 1.0 }, // basic, lambert, phong",
    "      ior: { value: 1.5 }, // physical",
    "      refractionRatio: { value: 0.98 }, // basic, lambert, phong",
    "    },",
    "",
    "    aomap: {",
    "      aoMap: { value: null },",
    "      aoMapIntensity: { value: 1 },",
    "    },",
    "",
    "    lightmap: {",
    "      lightMap: { value: null },",
    "      lightMapIntensity: { value: 1 },",
    "    },",
    "",
    "    emissivemap: {",
    "      emissiveMap: { value: null },",
    "    },",
    "",
    "    bumpmap: {",
    "      bumpMap: { value: null },",
    "      bumpScale: { value: 1 },",
    "    },",
    "",
    "    normalmap: {",
    "      normalMap: { value: null },",
    "      normalScale: { value: /*@__PURE__*/ new Vector2(1, 1) },",
    "    },",
    "",
    "    displacementmap: {",
    "      displacementMap: { value: null },",
    "      displacementScale: { value: 1 },",
    "      displacementBias: { value: 0 },",
    "    },",
    "",
    "    roughnessmap: {",
    "      roughnessMap: { value: null },",
    "    },",
    "",
    "    metalnessmap: {",
    "      metalnessMap: { value: null },",
    "    },",
    "",
    "    gradientmap: {",
    "      gradientMap: { value: null },",
    "    },",
    "",
    "    fog: {",
    "      fogDensity: { value: 0.00025 },",
    "      fogNear: { value: 1 },",
    "      fogFar: { value: 2000 },",
    "      fogColor: { value: /*@__PURE__*/ new Color(0xffffff) },",
    "    },",
    "",
    "    lights: {",
    "      ambientLightColor: { value: [] },",
    "",
    "      lightProbe: { value: [] },",
    "",
    "      directionalLights: {",
    "        value: [],",
    "        properties: {",
    "          direction: {},",
    "          color: {},",
    "        },",
    "      },",
    "",
    "      directionalLightShadows: {",
    "        value: [],",
    "        properties: {",
    "          shadowBias: {},",
    "          shadowNormalBias: {},",
    "          shadowRadius: {},",
    "          shadowMapSize: {},",
    "        },",
    "      },",
    "",
    "      directionalShadowMap: { value: [] },",
    "      directionalShadowMatrix: { value: [] },",
    "",
    "      spotLights: {",
    "        value: [],",
    "        properties: {",
    "          color: {},",
    "          position: {},",
    "          direction: {},",
    "          distance: {},",
    "          coneCos: {},",
    "          penumbraCos: {},",
    "          decay: {},",
    "        },",
    "      },",
    "",
    "      spotLightShadows: {",
    "        value: [],",
    "        properties: {",
    "          shadowBias: {},",
    "          shadowNormalBias: {},",
    "          shadowRadius: {},",
    "          shadowMapSize: {},",
    "        },",
    "      },",
    "",
    "      spotLightMap: { value: [] },",
    "      spotShadowMap: { value: [] },",
    "      spotLightMatrix: { value: [] },",
    "",
    "      pointLights: {",
    "        value: [],",
    "        properties: {",
    "          color: {},",
    "          position: {},",
    "          decay: {},",
    "          distance: {},",
    "        },",
    "      },",
    "",
    "      pointLightShadows: {",
    "        value: [],",
    "        properties: {",
    "          shadowBias: {},",
    "          shadowNormalBias: {},",
    "          shadowRadius: {},",
    "          shadowMapSize: {},",
    "          shadowCameraNear: {},",
    "          shadowCameraFar: {},",
    "        },",
    "      },",
    "",
    "      pointShadowMap: { value: [] },",
    "      pointShadowMatrix: { value: [] },",
    "",
    "      hemisphereLights: {",
    "        value: [],",
    "        properties: {",
    "          direction: {},",
    "          skyColor: {},",
    "          groundColor: {},",
    "        },",
    "      },",
    "",
    "      // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src",
    "      rectAreaLights: {",
    "        value: [],",
    "        properties: {",
    "          color: {},",
    "          position: {},",
    "          width: {},",
    "          height: {},",
    "        },",
    "      },",
    "",
    "      ltc_1: { value: null },",
    "      ltc_2: { value: null },",
    "    },",
    "",
    "    points: {",
    "      diffuse: { value: /*@__PURE__*/ new Color(0xffffff) },",
    "      opacity: { value: 1.0 },",
    "      size: { value: 1.0 },",
    "      scale: { value: 1.0 },",
    "      map: { value: null },",
    "      alphaMap: { value: null },",
    "      alphaTest: { value: 0 },",
    "      uvTransform: { value: /*@__PURE__*/ new Matrix3() },",
    "    },",
    "",
    "    sprite: {",
    "      diffuse: { value: /*@__PURE__*/ new Color(0xffffff) },",
    "      opacity: { value: 1.0 },",
    "      center: { value: /*@__PURE__*/ new Vector2(0.5, 0.5) },",
    "      rotation: { value: 0.0 },",
    "      map: { value: null },",
    "      alphaMap: { value: null },",
    "      alphaTest: { value: 0 },",
    "      uvTransform: { value: /*@__PURE__*/ new Matrix3() },",
    "    },",
    "  };",
    "",
    "  const ShaderLib = {",
    "    basic: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.specularmap,",
    "        UniformsLib.envmap,",
    "        UniformsLib.aomap,",
    "        UniformsLib.lightmap,",
    "        UniformsLib.fog,",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshbasic_vert,",
    "      fragmentShader: ShaderChunk.meshbasic_frag,",
    "    },",
    "",
    "    lambert: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.specularmap,",
    "        UniformsLib.envmap,",
    "        UniformsLib.aomap,",
    "        UniformsLib.lightmap,",
    "        UniformsLib.emissivemap,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        UniformsLib.fog,",
    "        UniformsLib.lights,",
    "        {",
    "          emissive: { value: /*@__PURE__*/ new Color(0x000000) },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshlambert_vert,",
    "      fragmentShader: ShaderChunk.meshlambert_frag,",
    "    },",
    "",
    "    phong: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.specularmap,",
    "        UniformsLib.envmap,",
    "        UniformsLib.aomap,",
    "        UniformsLib.lightmap,",
    "        UniformsLib.emissivemap,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        UniformsLib.fog,",
    "        UniformsLib.lights,",
    "        {",
    "          emissive: { value: /*@__PURE__*/ new Color(0x000000) },",
    "          specular: { value: /*@__PURE__*/ new Color(0x111111) },",
    "          shininess: { value: 30 },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshphong_vert,",
    "      fragmentShader: ShaderChunk.meshphong_frag,",
    "    },",
    "",
    "    standard: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.envmap,",
    "        UniformsLib.aomap,",
    "        UniformsLib.lightmap,",
    "        UniformsLib.emissivemap,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        UniformsLib.roughnessmap,",
    "        UniformsLib.metalnessmap,",
    "        UniformsLib.fog,",
    "        UniformsLib.lights,",
    "        {",
    "          emissive: { value: /*@__PURE__*/ new Color(0x000000) },",
    "          roughness: { value: 1.0 },",
    "          metalness: { value: 0.0 },",
    "          envMapIntensity: { value: 1 }, // temporary",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshphysical_vert,",
    "      fragmentShader: ShaderChunk.meshphysical_frag,",
    "    },",
    "",
    "    toon: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.aomap,",
    "        UniformsLib.lightmap,",
    "        UniformsLib.emissivemap,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        UniformsLib.gradientmap,",
    "        UniformsLib.fog,",
    "        UniformsLib.lights,",
    "        {",
    "          emissive: { value: /*@__PURE__*/ new Color(0x000000) },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshtoon_vert,",
    "      fragmentShader: ShaderChunk.meshtoon_frag,",
    "    },",
    "",
    "    matcap: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        UniformsLib.fog,",
    "        {",
    "          matcap: { value: null },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshmatcap_vert,",
    "      fragmentShader: ShaderChunk.meshmatcap_frag,",
    "    },",
    "",
    "    points: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.points,",
    "        UniformsLib.fog,",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.points_vert,",
    "      fragmentShader: ShaderChunk.points_frag,",
    "    },",
    "",
    "    dashed: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.fog,",
    "        {",
    "          scale: { value: 1 },",
    "          dashSize: { value: 1 },",
    "          totalSize: { value: 2 },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.linedashed_vert,",
    "      fragmentShader: ShaderChunk.linedashed_frag,",
    "    },",
    "",
    "    depth: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.displacementmap,",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.depth_vert,",
    "      fragmentShader: ShaderChunk.depth_frag,",
    "    },",
    "",
    "    normal: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.bumpmap,",
    "        UniformsLib.normalmap,",
    "        UniformsLib.displacementmap,",
    "        {",
    "          opacity: { value: 1.0 },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.meshnormal_vert,",
    "      fragmentShader: ShaderChunk.meshnormal_frag,",
    "    },",
    "",
    "    sprite: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.sprite,",
    "        UniformsLib.fog,",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.sprite_vert,",
    "      fragmentShader: ShaderChunk.sprite_frag,",
    "    },",
    "",
    "    background: {",
    "      uniforms: {",
    "        uvTransform: { value: /*@__PURE__*/ new Matrix3() },",
    "        t2D: { value: null },",
    "        backgroundIntensity: { value: 1 },",
    "      },",
    "",
    "      vertexShader: ShaderChunk.background_vert,",
    "      fragmentShader: ShaderChunk.background_frag,",
    "    },",
    "",
    "    backgroundCube: {",
    "      uniforms: {",
    "        envMap: { value: null },",
    "        flipEnvMap: { value: -1 },",
    "        backgroundBlurriness: { value: 0 },",
    "        backgroundIntensity: { value: 1 },",
    "      },",
    "",
    "      vertexShader: ShaderChunk.backgroundCube_vert,",
    "      fragmentShader: ShaderChunk.backgroundCube_frag,",
    "    },",
    "",
    "    cube: {",
    "      uniforms: {",
    "        tCube: { value: null },",
    "        tFlip: { value: -1 },",
    "        opacity: { value: 1.0 },",
    "      },",
    "",
    "      vertexShader: ShaderChunk.cube_vert,",
    "      fragmentShader: ShaderChunk.cube_frag,",
    "    },",
    "",
    "    equirect: {",
    "      uniforms: {",
    "        tEquirect: { value: null },",
    "      },",
    "",
    "      vertexShader: ShaderChunk.equirect_vert,",
    "      fragmentShader: ShaderChunk.equirect_frag,",
    "    },",
    "",
    "    distanceRGBA: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.common,",
    "        UniformsLib.displacementmap,",
    "        {",
    "          referencePosition: { value: /*@__PURE__*/ new Vector3() },",
    "          nearDistance: { value: 1 },",
    "          farDistance: { value: 1000 },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.distanceRGBA_vert,",
    "      fragmentShader: ShaderChunk.distanceRGBA_frag,",
    "    },",
    "",
    "    shadow: {",
    "      uniforms: /*@__PURE__*/ mergeUniforms([",
    "        UniformsLib.lights,",
    "        UniformsLib.fog,",
    "        {",
    "          color: { value: /*@__PURE__*/ new Color(0x00000) },",
    "          opacity: { value: 1.0 },",
    "        },",
    "      ]),",
    "",
    "      vertexShader: ShaderChunk.shadow_vert,",
    "      fragmentShader: ShaderChunk.shadow_frag,",
    "    },",
    "  };",
    "",
    "  ShaderLib.physical = {",
    "    uniforms: /*@__PURE__*/ mergeUniforms([",
    "      ShaderLib.standard.uniforms,",
    "      {",
    "        clearcoat: { value: 0 },",
    "        clearcoatMap: { value: null },",
    "        clearcoatRoughness: { value: 0 },",
    "        clearcoatRoughnessMap: { value: null },",
    "        clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2(1, 1) },",
    "        clearcoatNormalMap: { value: null },",
    "        iridescence: { value: 0 },",
    "        iridescenceMap: { value: null },",
    "        iridescenceIOR: { value: 1.3 },",
    "        iridescenceThicknessMinimum: { value: 100 },",
    "        iridescenceThicknessMaximum: { value: 400 },",
    "        iridescenceThicknessMap: { value: null },",
    "        sheen: { value: 0 },",
    "        sheenColor: { value: /*@__PURE__*/ new Color(0x000000) },",
    "        sheenColorMap: { value: null },",
    "        sheenRoughness: { value: 1 },",
    "        sheenRoughnessMap: { value: null },",
    "        transmission: { value: 0 },",
    "        transmissionMap: { value: null },",
    "        transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },",
    "        transmissionSamplerMap: { value: null },",
    "        thickness: { value: 0 },",
    "        thicknessMap: { value: null },",
    "        attenuationDistance: { value: 0 },",
    "        attenuationColor: { value: /*@__PURE__*/ new Color(0x000000) },",
    "        specularIntensity: { value: 1 },",
    "        specularIntensityMap: { value: null },",
    "        specularColor: { value: /*@__PURE__*/ new Color(1, 1, 1) },",
    "        specularColorMap: { value: null },",
    "      },",
    "    ]),",
    "",
    "    vertexShader: ShaderChunk.meshphysical_vert,",
    "    fragmentShader: ShaderChunk.meshphysical_frag,",
    "  };",
    "",
    "  const _rgb = { r: 0, b: 0, g: 0 };",
    "",
    "  let nextVersion = 0;",
    "",
    "  function shadowCastingAndTexturingLightsFirst(lightA, lightB) {",
    "    return (",
    "      (lightB.castShadow ? 2 : 0) -",
    "      (lightA.castShadow ? 2 : 0) +",
    "      (lightB.map ? 1 : 0) -",
    "      (lightA.map ? 1 : 0)",
    "    );",
    "  }",
    "",
    "  function WebGLLights(extensions, capabilities) {",
    "    const cache = new UniformsCache();",
    "",
    "    const shadowCache = ShadowUniformsCache();",
    "",
    "    const state = {",
    "      version: 0,",
    "",
    "      hash: {",
    "        directionalLength: -1,",
    "        pointLength: -1,",
    "        spotLength: -1,",
    "        rectAreaLength: -1,",
    "        hemiLength: -1,",
    "",
    "        numDirectionalShadows: -1,",
    "        numPointShadows: -1,",
    "        numSpotShadows: -1,",
    "        numSpotMaps: -1,",
    "      },",
    "",
    "      ambient: [0, 0, 0],",
    "      probe: [],",
    "      directional: [],",
    "      directionalShadow: [],",
    "      directionalShadowMap: [],",
    "      directionalShadowMatrix: [],",
    "      spot: [],",
    "      spotLightMap: [],",
    "      spotShadow: [],",
    "      spotShadowMap: [],",
    "      spotLightMatrix: [],",
    "      rectArea: [],",
    "      rectAreaLTC1: null,",
    "      rectAreaLTC2: null,",
    "      point: [],",
    "      pointShadow: [],",
    "      pointShadowMap: [],",
    "      pointShadowMatrix: [],",
    "      hemi: [],",
    "      numSpotLightShadowsWithMaps: 0,",
    "    };",
    "",
    "    for (let i = 0; i < 9; i++) state.probe.push(new Vector3());",
    "",
    "    const vector3 = new Vector3();",
    "    const matrix4 = new Matrix4();",
    "    const matrix42 = new Matrix4();",
    "",
    "    function setup(lights, physicallyCorrectLights) {",
    "      let r = 0,",
    "        g = 0,",
    "        b = 0;",
    "",
    "      for (let i = 0; i < 9; i++) state.probe[i].set(0, 0, 0);",
    "",
    "      let directionalLength = 0;",
    "      let pointLength = 0;",
    "      let spotLength = 0;",
    "      let rectAreaLength = 0;",
    "      let hemiLength = 0;",
    "",
    "      let numDirectionalShadows = 0;",
    "      let numPointShadows = 0;",
    "      let numSpotShadows = 0;",
    "      let numSpotMaps = 0;",
    "      let numSpotShadowsWithMaps = 0;",
    "",
    "      // ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]",
    "      lights.sort(shadowCastingAndTexturingLightsFirst);",
    "",
    "      // artist-friendly light intensity scaling factor",
    "      const scaleFactor = physicallyCorrectLights !== true ? Math.PI : 1;",
    "",
    "      for (let i = 0, l = lights.length; i < l; i++) {",
    "        const light = lights[i];",
    "",
    "        const color = light.color;",
    "        const intensity = light.intensity;",
    "        const distance = light.distance;",
    "",
    "        const shadowMap =",
    "          light.shadow && light.shadow.map ? light.shadow.map.texture : null;",
    "",
    "        if (light.isAmbientLight) {",
    "          r += color.r * intensity * scaleFactor;",
    "          g += color.g * intensity * scaleFactor;",
    "          b += color.b * intensity * scaleFactor;",
    "        } else if (light.isLightProbe) {",
    "          for (let j = 0; j < 9; j++) {",
    "            state.probe[j].addScaledVector(light.sh.coefficients[j], intensity);",
    "          }",
    "        } else if (light.isDirectionalLight) {",
    "          const uniforms = cache.get(light);",
    "",
    "          uniforms.color",
    "            .copy(light.color)",
    "            .multiplyScalar(light.intensity * scaleFactor);",
    "",
    "          if (light.castShadow) {",
    "            const shadow = light.shadow;",
    "",
    "            const shadowUniforms = shadowCache.get(light);",
    "",
    "            shadowUniforms.shadowBias = shadow.bias;",
    "            shadowUniforms.shadowNormalBias = shadow.normalBias;",
    "            shadowUniforms.shadowRadius = shadow.radius;",
    "            shadowUniforms.shadowMapSize = shadow.mapSize;",
    "",
    "            state.directionalShadow[directionalLength] = shadowUniforms;",
    "            state.directionalShadowMap[directionalLength] = shadowMap;",
    "            state.directionalShadowMatrix[directionalLength] =",
    "              light.shadow.matrix;",
    "",
    "            numDirectionalShadows++;",
    "          }",
    "",
    "          state.directional[directionalLength] = uniforms;",
    "",
    "          directionalLength++;",
    "        } else if (light.isSpotLight) {",
    "          const uniforms = cache.get(light);",
    "",
    "          uniforms.position.setFromMatrixPosition(light.matrixWorld);",
    "",
    "          uniforms.color.copy(color).multiplyScalar(intensity * scaleFactor);",
    "          uniforms.distance = distance;",
    "",
    "          uniforms.coneCos = Math.cos(light.angle);",
    "          uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));",
    "          uniforms.decay = light.decay;",
    "",
    "          state.spot[spotLength] = uniforms;",
    "",
    "          const shadow = light.shadow;",
    "",
    "          if (light.map) {",
    "            state.spotLightMap[numSpotMaps] = light.map;",
    "            numSpotMaps++;",
    "",
    "            // make sure the lightMatrix is up to date",
    "            // TODO : do it if required only",
    "            shadow.updateMatrices(light);",
    "",
    "            if (light.castShadow) numSpotShadowsWithMaps++;",
    "          }",
    "",
    "          state.spotLightMatrix[spotLength] = shadow.matrix;",
    "",
    "          if (light.castShadow) {",
    "            const shadowUniforms = shadowCache.get(light);",
    "",
    "            shadowUniforms.shadowBias = shadow.bias;",
    "            shadowUniforms.shadowNormalBias = shadow.normalBias;",
    "            shadowUniforms.shadowRadius = shadow.radius;",
    "            shadowUniforms.shadowMapSize = shadow.mapSize;",
    "",
    "            state.spotShadow[spotLength] = shadowUniforms;",
    "            state.spotShadowMap[spotLength] = shadowMap;",
    "",
    "            numSpotShadows++;",
    "          }",
    "",
    "          spotLength++;",
    "        } else if (light.isRectAreaLight) {",
    "          const uniforms = cache.get(light);",
    "",
    "          uniforms.color.copy(color).multiplyScalar(intensity);",
    "",
    "          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);",
    "          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);",
    "",
    "          state.rectArea[rectAreaLength] = uniforms;",
    "",
    "          rectAreaLength++;",
    "        } else if (light.isPointLight) {",
    "          const uniforms = cache.get(light);",
    "",
    "          uniforms.color",
    "            .copy(light.color)",
    "            .multiplyScalar(light.intensity * scaleFactor);",
    "          uniforms.distance = light.distance;",
    "          uniforms.decay = light.decay;",
    "",
    "          if (light.castShadow) {",
    "            const shadow = light.shadow;",
    "",
    "            const shadowUniforms = shadowCache.get(light);",
    "",
    "            shadowUniforms.shadowBias = shadow.bias;",
    "            shadowUniforms.shadowNormalBias = shadow.normalBias;",
    "            shadowUniforms.shadowRadius = shadow.radius;",
    "            shadowUniforms.shadowMapSize = shadow.mapSize;",
    "            shadowUniforms.shadowCameraNear = shadow.camera.near;",
    "            shadowUniforms.shadowCameraFar = shadow.camera.far;",
    "",
    "            state.pointShadow[pointLength] = shadowUniforms;",
    "            state.pointShadowMap[pointLength] = shadowMap;",
    "            state.pointShadowMatrix[pointLength] = light.shadow.matrix;",
    "",
    "            numPointShadows++;",
    "          }",
    "",
    "          state.point[pointLength] = uniforms;",
    "",
    "          pointLength++;",
    "        } else if (light.isHemisphereLight) {",
    "          const uniforms = cache.get(light);",
    "",
    "          uniforms.skyColor",
    "            .copy(light.color)",
    "            .multiplyScalar(intensity * scaleFactor);",
    "          uniforms.groundColor",
    "            .copy(light.groundColor)",
    "            .multiplyScalar(intensity * scaleFactor);",
    "",
    "          state.hemi[hemiLength] = uniforms;",
    "",
    "          hemiLength++;",
    "        }",
    "      }",
    "",
    "      if (rectAreaLength > 0) {",
    "        if (capabilities.isWebGL2) {",
    "          // WebGL 2",
    "",
    "          state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;",
    "          state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;",
    "        } else {",
    "          // WebGL 1",
    "        }",
    "      }",
    "",
    "      state.ambient[0] = r;",
    "      state.ambient[1] = g;",
    "      state.ambient[2] = b;",
    "",
    "      const hash = state.hash;",
    "",
    "      if (",
    "        hash.directionalLength !== directionalLength ||",
    "        hash.pointLength !== pointLength ||",
    "        hash.spotLength !== spotLength ||",
    "        hash.rectAreaLength !== rectAreaLength ||",
    "        hash.hemiLength !== hemiLength ||",
    "        hash.numDirectionalShadows !== numDirectionalShadows ||",
    "        hash.numPointShadows !== numPointShadows ||",
    "        hash.numSpotShadows !== numSpotShadows ||",
    "        hash.numSpotMaps !== numSpotMaps",
    "      ) {",
    "        state.directional.length = directionalLength;",
    "        state.spot.length = spotLength;",
    "        state.rectArea.length = rectAreaLength;",
    "        state.point.length = pointLength;",
    "        state.hemi.length = hemiLength;",
    "",
    "        state.directionalShadow.length = numDirectionalShadows;",
    "        state.directionalShadowMap.length = numDirectionalShadows;",
    "        state.pointShadow.length = numPointShadows;",
    "        state.pointShadowMap.length = numPointShadows;",
    "        state.spotShadow.length = numSpotShadows;",
    "        state.spotShadowMap.length = numSpotShadows;",
    "        state.directionalShadowMatrix.length = numDirectionalShadows;",
    "        state.pointShadowMatrix.length = numPointShadows;",
    "        state.spotLightMatrix.length =",
    "          numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;",
    "        state.spotLightMap.length = numSpotMaps;",
    "        state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;",
    "",
    "        hash.directionalLength = directionalLength;",
    "        hash.pointLength = pointLength;",
    "        hash.spotLength = spotLength;",
    "        hash.rectAreaLength = rectAreaLength;",
    "        hash.hemiLength = hemiLength;",
    "",
    "        hash.numDirectionalShadows = numDirectionalShadows;",
    "        hash.numPointShadows = numPointShadows;",
    "        hash.numSpotShadows = numSpotShadows;",
    "        hash.numSpotMaps = numSpotMaps;",
    "",
    "        state.version = nextVersion++;",
    "      }",
    "    }",
    "",
    "    function setupView(lights, camera) {",
    "      let directionalLength = 0;",
    "      let pointLength = 0;",
    "      let spotLength = 0;",
    "      let rectAreaLength = 0;",
    "      let hemiLength = 0;",
    "",
    "      const viewMatrix = camera.matrixWorldInverse;",
    "",
    "      for (let i = 0, l = lights.length; i < l; i++) {",
    "        const light = lights[i];",
    "",
    "        if (light.isDirectionalLight) {",
    "          const uniforms = state.directional[directionalLength];",
    "",
    "          uniforms.direction.setFromMatrixPosition(light.matrixWorld);",
    "          vector3.setFromMatrixPosition(light.target.matrixWorld);",
    "          uniforms.direction.sub(vector3);",
    "          uniforms.direction.transformDirection(viewMatrix);",
    "",
    "          directionalLength++;",
    "        } else if (light.isSpotLight) {",
    "          const uniforms = state.spot[spotLength];",
    "",
    "          uniforms.position.setFromMatrixPosition(light.matrixWorld);",
    "          uniforms.position.applyMatrix4(viewMatrix);",
    "",
    "          uniforms.direction.setFromMatrixPosition(light.matrixWorld);",
    "          vector3.setFromMatrixPosition(light.target.matrixWorld);",
    "          uniforms.direction.sub(vector3);",
    "          uniforms.direction.transformDirection(viewMatrix);",
    "",
    "          spotLength++;",
    "        } else if (light.isRectAreaLight) {",
    "          const uniforms = state.rectArea[rectAreaLength];",
    "",
    "          uniforms.position.setFromMatrixPosition(light.matrixWorld);",
    "          uniforms.position.applyMatrix4(viewMatrix);",
    "",
    "          // extract local rotation of light to derive width/height half vectors",
    "          matrix42.identity();",
    "          matrix4.copy(light.matrixWorld);",
    "          matrix4.premultiply(viewMatrix);",
    "          matrix42.extractRotation(matrix4);",
    "",
    "          uniforms.halfWidth.set(light.width * 0.5, 0.0, 0.0);",
    "          uniforms.halfHeight.set(0.0, light.height * 0.5, 0.0);",
    "",
    "          uniforms.halfWidth.applyMatrix4(matrix42);",
    "          uniforms.halfHeight.applyMatrix4(matrix42);",
    "",
    "          rectAreaLength++;",
    "        } else if (light.isPointLight) {",
    "          const uniforms = state.point[pointLength];",
    "",
    "          uniforms.position.setFromMatrixPosition(light.matrixWorld);",
    "          uniforms.position.applyMatrix4(viewMatrix);",
    "",
    "          pointLength++;",
    "        } else if (light.isHemisphereLight) {",
    "          const uniforms = state.hemi[hemiLength];",
    "",
    "          uniforms.direction.setFromMatrixPosition(light.matrixWorld);",
    "          uniforms.direction.transformDirection(viewMatrix);",
    "",
    "          hemiLength++;",
    "        }",
    "      }",
    "    }",
    "",
    "    return {",
    "      setup: setup,",
    "      setupView: setupView,",
    "      state: state,",
    "    };",
    "  }",
    "",
    "  function WebGLRenderState(extensions, capabilities) {",
    "    const lights = new WebGLLights(extensions, capabilities);",
    "",
    "    const lightsArray = [];",
    "    const shadowsArray = [];",
    "",
    "    function init() {",
    "      lightsArray.length = 0;",
    "      shadowsArray.length = 0;",
    "    }",
    "",
    "    function pushLight(light) {",
    "      lightsArray.push(light);",
    "    }",
    "",
    "    function pushShadow(shadowLight) {",
    "      shadowsArray.push(shadowLight);",
    "    }",
    "",
    "    function setupLights(physicallyCorrectLights) {",
    "      lights.setup(lightsArray, physicallyCorrectLights);",
    "    }",
    "",
    "    function setupLightsView(camera) {",
    "      lights.setupView(lightsArray, camera);",
    "    }",
    "",
    "    const state = {",
    "      lightsArray: lightsArray,",
    "      shadowsArray: shadowsArray,",
    "",
    "      lights: lights,",
    "    };",
    "",
    "    return {",
    "      init: init,",
    "      state: state,",
    "      setupLights: setupLights,",
    "      setupLightsView: setupLightsView,",
    "",
    "      pushLight: pushLight,",
    "      pushShadow: pushShadow,",
    "    };",
    "  }",
    "",
    "  function WebGLRenderStates(extensions, capabilities) {",
    "    let renderStates = new WeakMap();",
    "",
    "    function get(scene, renderCallDepth = 0) {",
    "      const renderStateArray = renderStates.get(scene);",
    "      let renderState;",
    "",
    "      if (renderStateArray === undefined) {",
    "        renderState = new WebGLRenderState(extensions, capabilities);",
    "        renderStates.set(scene, [renderState]);",
    "      } else {",
    "        if (renderCallDepth >= renderStateArray.length) {",
    "          renderState = new WebGLRenderState(extensions, capabilities);",
    "          renderStateArray.push(renderState);",
    "        } else {",
    "          renderState = renderStateArray[renderCallDepth];",
    "        }",
    "      }",
    "",
    "      return renderState;",
    "    }",
    "",
    "    function dispose() {",
    "      renderStates = new WeakMap();",
    "    }",
    "",
    "    return {",
    "      get: get,",
    "      dispose: dispose,",
    "    };",
    "  }",
    "",
    "  class MeshDepthMaterial extends Material {",
    "    constructor(parameters) {",
    "      super();",
    "",
    "      this.isMeshDepthMaterial = true;",
    "",
    '      this.type = "MeshDepthMaterial";',
    "",
    "      this.depthPacking = BasicDepthPacking;",
    "",
    "      this.map = null;",
    "",
    "      this.alphaMap = null;",
    "",
    "      this.displacementMap = null;",
    "      this.displacementScale = 1;",
    "      this.displacementBias = 0;",
    "",
    "      this.wireframe = false;",
    "      this.wireframeLinewidth = 1;",
    "",
    "      this.setValues(parameters);",
    "    }",
    "",
    "    copy(source) {",
    "      super.copy(source);",
    "",
    "      this.depthPacking = source.depthPacking;",
    "",
    "      this.map = source.map;",
    "",
    "      this.alphaMap = source.alphaMap;",
    "",
    "      this.displacementMap = source.displacementMap;",
    "      this.displacementScale = source.displacementScale;",
    "      this.displacementBias = source.displacementBias;",
    "",
    "      this.wireframe = source.wireframe;",
    "      this.wireframeLinewidth = source.wireframeLinewidth;",
    "",
    "      return this;",
    "    }",
    "  }",
    "",
    "  class MeshDistanceMaterial extends Material {",
    "    constructor(parameters) {",
    "      super();",
    "",
    "      this.isMeshDistanceMaterial = true;",
    "",
    '      this.type = "MeshDistanceMaterial";',
    "",
    "      this.referencePosition = new Vector3();",
    "      this.nearDistance = 1;",
    "      this.farDistance = 1000;",
    "",
    "      this.map = null;",
    "",
    "      this.alphaMap = null;",
    "",
    "      this.displacementMap = null;",
    "      this.displacementScale = 1;",
    "      this.displacementBias = 0;",
    "",
    "      this.setValues(parameters);",
    "    }",
    "",
    "    copy(source) {",
    "      super.copy(source);",
    "",
    "      this.referencePosition.copy(source.referencePosition);",
    "      this.nearDistance = source.nearDistance;",
    "      this.farDistance = source.farDistance;",
    "",
    "      this.map = source.map;",
    "",
    "      this.alphaMap = source.alphaMap;",
    "",
    "      this.displacementMap = source.displacementMap;",
    "      this.displacementScale = source.displacementScale;",
    "      this.displacementBias = source.displacementBias;",
    "",
    "      return this;",
    "    }",
    "  }",
    "",
    '  const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";',
    "",
    "  const fragment =",
    '    "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";',
    "",
    "  function WebGLShadowMap(_renderer, _objects, _capabilities) {",
    "    let _frustum = new Frustum();",
    "",
    "    const _shadowMapSize = new Vector2(),",
    "      _viewportSize = new Vector2(),",
    "      _viewport = new Vector4(),",
    "      _depthMaterial = new MeshDepthMaterial({",
    "        depthPacking: RGBADepthPacking,",
    "      }),",
    "      _distanceMaterial = new MeshDistanceMaterial(),",
    "      _materialCache = {},",
    "      _maxTextureSize = _capabilities.maxTextureSize;",
    "",
    "    const shadowSide = {",
    "      [FrontSide]: BackSide,",
    "      [BackSide]: FrontSide,",
    "      [DoubleSide]: DoubleSide,",
    "    };",
    "",
    "    const shadowMaterialVertical = new ShaderMaterial({",
    "      defines: {",
    "        VSM_SAMPLES: 8,",
    "      },",
    "      uniforms: {",
    "        shadow_pass: { value: null },",
    "        resolution: { value: new Vector2() },",
    "        radius: { value: 4.0 },",
    "      },",
    "",
    "      vertexShader: vertex,",
    "      fragmentShader: fragment,",
    "    });",
    "",
    "    const shadowMaterialHorizontal = shadowMaterialVertical.clone();",
    "    shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;",
    "",
    "    const fullScreenTri = new BufferGeometry();",
    "    fullScreenTri.setAttribute(",
    '      "position",',
    "      new BufferAttribute(",
    "        new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),",
    "        3",
    "      )",
    "    );",
    "",
    "    const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);",
    "",
    "    const scope = this;",
    "",
    "    this.enabled = false;",
    "",
    "    this.autoUpdate = true;",
    "    this.needsUpdate = false;",
    "",
    "    this.type = PCFShadowMap;",
    "",
    "    this.render = function (lights, scene, camera) {",
    "      if (scope.enabled === false) return;",
    "      if (scope.autoUpdate === false && scope.needsUpdate === false) return;",
    "",
    "      if (lights.length === 0) return;",
    "",
    "      const currentRenderTarget = _renderer.getRenderTarget();",
    "      const activeCubeFace = _renderer.getActiveCubeFace();",
    "      const activeMipmapLevel = _renderer.getActiveMipmapLevel();",
    "",
    "      const _state = _renderer.state;",
    "",
    "      // Set GL state for depth map.",
    "      _state.setBlending(NoBlending);",
    "      _state.buffers.color.setClear(1, 1, 1, 1);",
    "      _state.buffers.depth.setTest(true);",
    "      _state.setScissorTest(false);",
    "",
    "      // render depth map",
    "",
    "      for (let i = 0, il = lights.length; i < il; i++) {",
    "        const light = lights[i];",
    "        const shadow = light.shadow;",
    "",
    "        if (shadow === undefined) {",
    '          console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");',
    "          continue;",
    "        }",
    "",
    "        if (shadow.autoUpdate === false && shadow.needsUpdate === false)",
    "          continue;",
    "",
    "        _shadowMapSize.copy(shadow.mapSize);",
    "",
    "        const shadowFrameExtents = shadow.getFrameExtents();",
    "",
    "        _shadowMapSize.multiply(shadowFrameExtents);",
    "",
    "        _viewportSize.copy(shadow.mapSize);",
    "",
    "        if (",
    "          _shadowMapSize.x > _maxTextureSize ||",
    "          _shadowMapSize.y > _maxTextureSize",
    "        ) {",
    "          if (_shadowMapSize.x > _maxTextureSize) {",
    "            _viewportSize.x = Math.floor(",
    "              _maxTextureSize / shadowFrameExtents.x",
    "            );",
    "            _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;",
    "            shadow.mapSize.x = _viewportSize.x;",
    "          }",
    "",
    "          if (_shadowMapSize.y > _maxTextureSize) {",
    "            _viewportSize.y = Math.floor(",
    "              _maxTextureSize / shadowFrameExtents.y",
    "            );",
    "            _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;",
    "            shadow.mapSize.y = _viewportSize.y;",
    "          }",
    "        }",
    "",
    "        if (shadow.map === null) {",
    "          const pars =",
    "            this.type !== VSMShadowMap",
    "              ? { minFilter: NearestFilter, magFilter: NearestFilter }",
    "              : {};",
    "",
    "          shadow.map = new WebGLRenderTarget(",
    "            _shadowMapSize.x,",
    "            _shadowMapSize.y,",
    "            pars",
    "          );",
    '          shadow.map.texture.name = light.name + ".shadowMap";',
    "",
    "          shadow.camera.updateProjectionMatrix();",
    "        }",
    "",
    "        _renderer.setRenderTarget(shadow.map);",
    "        _renderer.clear();",
    "",
    "        const viewportCount = shadow.getViewportCount();",
    "",
    "        for (let vp = 0; vp < viewportCount; vp++) {",
    "          const viewport = shadow.getViewport(vp);",
    "",
    "          _viewport.set(",
    "            _viewportSize.x * viewport.x,",
    "            _viewportSize.y * viewport.y,",
    "            _viewportSize.x * viewport.z,",
    "            _viewportSize.y * viewport.w",
    "          );",
    "",
    "          _state.viewport(_viewport);",
    "",
    "          shadow.updateMatrices(light, vp);",
    "",
    "          _frustum = shadow.getFrustum();",
    "",
    "          renderObject(scene, camera, shadow.camera, light, this.type);",
    "        }",
    "",
    "        // do blur pass for VSM",
    "",
    "        if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {",
    "          VSMPass(shadow, camera);",
    "        }",
    "",
    "        shadow.needsUpdate = false;",
    "      }",
    "",
    "      scope.needsUpdate = false;",
    "",
    "      _renderer.setRenderTarget(",
    "        currentRenderTarget,",
    "        activeCubeFace,",
    "        activeMipmapLevel",
    "      );",
    "    };",
    "",
    "    function VSMPass(shadow, camera) {",
    "      const geometry = _objects.update(fullScreenMesh);",
    "",
    "      if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {",
    "        shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;",
    "        shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;",
    "",
    "        shadowMaterialVertical.needsUpdate = true;",
    "        shadowMaterialHorizontal.needsUpdate = true;",
    "      }",
    "",
    "      if (shadow.mapPass === null) {",
    "        shadow.mapPass = new WebGLRenderTarget(",
    "          _shadowMapSize.x,",
    "          _shadowMapSize.y",
    "        );",
    "      }",
    "",
    "      // vertical pass",
    "",
    "      shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;",
    "      shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;",
    "      shadowMaterialVertical.uniforms.radius.value = shadow.radius;",
    "      _renderer.setRenderTarget(shadow.mapPass);",
    "      _renderer.clear();",
    "      _renderer.renderBufferDirect(",
    "        camera,",
    "        null,",
    "        geometry,",
    "        shadowMaterialVertical,",
    "        fullScreenMesh,",
    "        null",
    "      );",
    "",
    "      // horizontal pass",
    "",
    "      shadowMaterialHorizontal.uniforms.shadow_pass.value =",
    "        shadow.mapPass.texture;",
    "      shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;",
    "      shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;",
    "      _renderer.setRenderTarget(shadow.map);",
    "      _renderer.clear();",
    "      _renderer.renderBufferDirect(",
    "        camera,",
    "        null,",
    "        geometry,",
    "        shadowMaterialHorizontal,",
    "        fullScreenMesh,",
    "        null",
    "      );",
    "    }",
    "",
    "    function getDepthMaterial(",
    "      object,",
    "      material,",
    "      light,",
    "      shadowCameraNear,",
    "      shadowCameraFar,",
    "      type",
    "    ) {",
    "      let result = null;",
    "",
    "      const customMaterial =",
    "        light.isPointLight === true",
    "          ? object.customDistanceMaterial",
    "          : object.customDepthMaterial;",
    "",
    "      if (customMaterial !== undefined) {",
    "        result = customMaterial;",
    "      } else {",
    "        result =",
    "          light.isPointLight === true ? _distanceMaterial : _depthMaterial;",
    "",
    "        if (",
    "          (_renderer.localClippingEnabled &&",
    "            material.clipShadows === true &&",
    "            Array.isArray(material.clippingPlanes) &&",
    "            material.clippingPlanes.length !== 0) ||",
    "          (material.displacementMap && material.displacementScale !== 0) ||",
    "          (material.alphaMap && material.alphaTest > 0) ||",
    "          (material.map && material.alphaTest > 0)",
    "        ) {",
    "          // in this case we need a unique material instance reflecting the",
    "          // appropriate state",
    "",
    "          const keyA = result.uuid,",
    "            keyB = material.uuid;",
    "",
    "          let materialsForVariant = _materialCache[keyA];",
    "",
    "          if (materialsForVariant === undefined) {",
    "            materialsForVariant = {};",
    "            _materialCache[keyA] = materialsForVariant;",
    "          }",
    "",
    "          let cachedMaterial = materialsForVariant[keyB];",
    "",
    "          if (cachedMaterial === undefined) {",
    "            cachedMaterial = result.clone();",
    "            materialsForVariant[keyB] = cachedMaterial;",
    "          }",
    "",
    "          result = cachedMaterial;",
    "        }",
    "      }",
    "",
    "      result.visible = material.visible;",
    "      result.wireframe = material.wireframe;",
    "",
    "      if (type === VSMShadowMap) {",
    "        result.side =",
    "          material.shadowSide !== null ? material.shadowSide : material.side;",
    "      } else {",
    "        result.side =",
    "          material.shadowSide !== null",
    "            ? material.shadowSide",
    "            : shadowSide[material.side];",
    "      }",
    "",
    "      result.alphaMap = material.alphaMap;",
    "      result.alphaTest = material.alphaTest;",
    "      result.map = material.map;",
    "",
    "      result.clipShadows = material.clipShadows;",
    "      result.clippingPlanes = material.clippingPlanes;",
    "      result.clipIntersection = material.clipIntersection;",
    "",
    "      result.displacementMap = material.displacementMap;",
    "      result.displacementScale = material.displacementScale;",
    "      result.displacementBias = material.displacementBias;",
    "",
    "      result.wireframeLinewidth = material.wireframeLinewidth;",
    "      result.linewidth = material.linewidth;",
    "",
    "      if (",
    "        light.isPointLight === true &&",
    "        result.isMeshDistanceMaterial === true",
    "      ) {",
    "        result.referencePosition.setFromMatrixPosition(light.matrixWorld);",
    "        result.nearDistance = shadowCameraNear;",
    "        result.farDistance = shadowCameraFar;",
    "      }",
    "",
    "      return result;",
    "    }",
    "",
    "    function renderObject(object, camera, shadowCamera, light, type) {",
    "      if (object.visible === false) return;",
    "",
    "      const visible = object.layers.test(camera.layers);",
    "",
    "      if (visible && (object.isMesh || object.isLine || object.isPoints)) {",
    "        if (",
    "          (object.castShadow ||",
    "            (object.receiveShadow && type === VSMShadowMap)) &&",
    "          (!object.frustumCulled || _frustum.intersectsObject(object))",
    "        ) {",
    "          object.modelViewMatrix.multiplyMatrices(",
    "            shadowCamera.matrixWorldInverse,",
    "            object.matrixWorld",
    "          );",
    "",
    "          const geometry = _objects.update(object);",
    "          const material = object.material;",
    "",
    "          if (Array.isArray(material)) {",
    "            const groups = geometry.groups;",
    "",
    "            for (let k = 0, kl = groups.length; k < kl; k++) {",
    "              const group = groups[k];",
    "              const groupMaterial = material[group.materialIndex];",
    "",
    "              if (groupMaterial && groupMaterial.visible) {",
    "                const depthMaterial = getDepthMaterial(",
    "                  object,",
    "                  groupMaterial,",
    "                  light,",
    "                  shadowCamera.near,",
    "                  shadowCamera.far,",
    "                  type",
    "                );",
    "",
    "                _renderer.renderBufferDirect(",
    "                  shadowCamera,",
    "                  null,",
    "                  geometry,",
    "                  depthMaterial,",
    "                  object,",
    "                  group",
    "                );",
    "              }",
    "            }",
    "          } else if (material.visible) {",
    "            const depthMaterial = getDepthMaterial(",
    "              object,",
    "              material,",
    "              light,",
    "              shadowCamera.near,",
    "              shadowCamera.far,",
    "              type",
    "            );",
    "",
    "            _renderer.renderBufferDirect(",
    "              shadowCamera,",
    "              null,",
    "              geometry,",
    "              depthMaterial,",
    "              object,",
    "              null",
    "            );",
    "          }",
    "        }",
    "      }",
    "",
    "      const children = object.children;",
    "",
    "      for (let i = 0, l = children.length; i < l; i++) {",
    "        renderObject(children[i], camera, shadowCamera, light, type);",
    "      }",
    "    }",
    "  }",
    "",
    "  function WebGLState(gl, extensions, capabilities) {",
    "    const isWebGL2 = capabilities.isWebGL2;",
    "",
    "    function ColorBuffer() {",
    "      let locked = false;",
    "",
    "      const color = new Vector4();",
    "      let currentColorMask = null;",
    "      const currentColorClear = new Vector4(0, 0, 0, 0);",
    "",
    "      return {",
    "        setMask: function (colorMask) {",
    "          if (currentColorMask !== colorMask && !locked) {",
    "            gl.colorMask(colorMask, colorMask, colorMask, colorMask);",
    "            currentColorMask = colorMask;",
    "          }",
    "        },",
    "",
    "        setLocked: function (lock) {",
    "          locked = lock;",
    "        },",
    "",
    "        setClear: function (r, g, b, a, premultipliedAlpha) {",
    "          if (premultipliedAlpha === true) {",
    "            r *= a;",
    "            g *= a;",
    "            b *= a;",
    "          }",
    "",
    "          color.set(r, g, b, a);",
    "",
    "          if (currentColorClear.equals(color) === false) {",
    "            gl.clearColor(r, g, b, a);",
    "            currentColorClear.copy(color);",
    "          }",
    "        },",
    "",
    "        reset: function () {",
    "          locked = false;",
    "",
    "          currentColorMask = null;",
    "          currentColorClear.set(-1, 0, 0, 0); // set to invalid state",
    "        },",
    "      };",
    "    }",
    "",
    "    function DepthBuffer() {",
    "      let locked = false;",
    "",
    "      let currentDepthMask = null;",
    "      let currentDepthFunc = null;",
    "      let currentDepthClear = null;",
    "",
    "      return {",
    "        setTest: function (depthTest) {",
    "          if (depthTest) {",
    "            enable(gl.DEPTH_TEST);",
    "          } else {",
    "            disable(gl.DEPTH_TEST);",
    "          }",
    "        },",
    "",
    "        setMask: function (depthMask) {",
    "          if (currentDepthMask !== depthMask && !locked) {",
    "            gl.depthMask(depthMask);",
    "            currentDepthMask = depthMask;",
    "          }",
    "        },",
    "",
    "        setFunc: function (depthFunc) {",
    "          if (currentDepthFunc !== depthFunc) {",
    "            switch (depthFunc) {",
    "              case NeverDepth:",
    "                gl.depthFunc(gl.NEVER);",
    "                break;",
    "",
    "              case AlwaysDepth:",
    "                gl.depthFunc(gl.ALWAYS);",
    "                break;",
    "",
    "              case LessDepth:",
    "                gl.depthFunc(gl.LESS);",
    "                break;",
    "",
    "              case LessEqualDepth:",
    "                gl.depthFunc(gl.LEQUAL);",
    "                break;",
    "",
    "              case EqualDepth:",
    "                gl.depthFunc(gl.EQUAL);",
    "                break;",
    "",
    "              case GreaterEqualDepth:",
    "                gl.depthFunc(gl.GEQUAL);",
    "                break;",
    "",
    "              case GreaterDepth:",
    "                gl.depthFunc(gl.GREATER);",
    "                break;",
    "",
    "              case NotEqualDepth:",
    "                gl.depthFunc(gl.NOTEQUAL);",
    "                break;",
    "",
    "              default:",
    "                gl.depthFunc(gl.LEQUAL);",
    "            }",
    "",
    "            currentDepthFunc = depthFunc;",
    "          }",
    "        },",
    "",
    "        setLocked: function (lock) {",
    "          locked = lock;",
    "        },",
    "",
    "        setClear: function (depth) {",
    "          if (currentDepthClear !== depth) {",
    "            gl.clearDepth(depth);",
    "            currentDepthClear = depth;",
    "          }",
    "        },",
    "",
    "        reset: function () {",
    "          locked = false;",
    "",
    "          currentDepthMask = null;",
    "          currentDepthFunc = null;",
    "          currentDepthClear = null;",
    "        },",
    "      };",
    "    }",
    "",
    "    function StencilBuffer() {",
    "      let locked = false;",
    "",
    "      let currentStencilMask = null;",
    "      let currentStencilFunc = null;",
    "      let currentStencilRef = null;",
    "      let currentStencilFuncMask = null;",
    "      let currentStencilFail = null;",
    "      let currentStencilZFail = null;",
    "      let currentStencilZPass = null;",
    "      let currentStencilClear = null;",
    "",
    "      return {",
    "        setTest: function (stencilTest) {",
    "          if (!locked) {",
    "            if (stencilTest) {",
    "              enable(gl.STENCIL_TEST);",
    "            } else {",
    "              disable(gl.STENCIL_TEST);",
    "            }",
    "          }",
    "        },",
    "",
    "        setMask: function (stencilMask) {",
    "          if (currentStencilMask !== stencilMask && !locked) {",
    "            gl.stencilMask(stencilMask);",
    "            currentStencilMask = stencilMask;",
    "          }",
    "        },",
    "",
    "        setFunc: function (stencilFunc, stencilRef, stencilMask) {",
    "          if (",
    "            currentStencilFunc !== stencilFunc ||",
    "            currentStencilRef !== stencilRef ||",
    "            currentStencilFuncMask !== stencilMask",
    "          ) {",
    "            gl.stencilFunc(stencilFunc, stencilRef, stencilMask);",
    "",
    "            currentStencilFunc = stencilFunc;",
    "            currentStencilRef = stencilRef;",
    "            currentStencilFuncMask = stencilMask;",
    "          }",
    "        },",
    "",
    "        setOp: function (stencilFail, stencilZFail, stencilZPass) {",
    "          if (",
    "            currentStencilFail !== stencilFail ||",
    "            currentStencilZFail !== stencilZFail ||",
    "            currentStencilZPass !== stencilZPass",
    "          ) {",
    "            gl.stencilOp(stencilFail, stencilZFail, stencilZPass);",
    "",
    "            currentStencilFail = stencilFail;",
    "            currentStencilZFail = stencilZFail;",
    "            currentStencilZPass = stencilZPass;",
    "          }",
    "        },",
    "",
    "        setLocked: function (lock) {",
    "          locked = lock;",
    "        },",
    "",
    "        setClear: function (stencil) {",
    "          if (currentStencilClear !== stencil) {",
    "            gl.clearStencil(stencil);",
    "            currentStencilClear = stencil;",
    "          }",
    "        },",
    "",
    "        reset: function () {",
    "          locked = false;",
    "",
    "          currentStencilMask = null;",
    "          currentStencilFunc = null;",
    "          currentStencilRef = null;",
    "          currentStencilFuncMask = null;",
    "          currentStencilFail = null;",
    "          currentStencilZFail = null;",
    "          currentStencilZPass = null;",
    "          currentStencilClear = null;",
    "        },",
    "      };",
    "    }",
    "",
    "    //",
    "",
    "    const colorBuffer = new ColorBuffer();",
    "    const depthBuffer = new DepthBuffer();",
    "    const stencilBuffer = new StencilBuffer();",
    "",
    "    const uboBindings = new WeakMap();",
    "    const uboProgramMap = new WeakMap();",
    "",
    "    let enabledCapabilities = {};",
    "",
    "    let currentBoundFramebuffers = {};",
    "    let currentDrawbuffers = new WeakMap();",
    "    let defaultDrawbuffers = [];",
    "",
    "    let currentProgram = null;",
    "",
    "    let currentBlendingEnabled = false;",
    "    let currentBlending = null;",
    "    let currentBlendEquation = null;",
    "    let currentBlendSrc = null;",
    "    let currentBlendDst = null;",
    "    let currentBlendEquationAlpha = null;",
    "    let currentBlendSrcAlpha = null;",
    "    let currentBlendDstAlpha = null;",
    "    let currentPremultipledAlpha = false;",
    "",
    "    let currentFlipSided = null;",
    "    let currentCullFace = null;",
    "",
    "    let currentLineWidth = null;",
    "",
    "    let currentPolygonOffsetFactor = null;",
    "    let currentPolygonOffsetUnits = null;",
    "",
    "    const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);",
    "",
    "    let lineWidthAvailable = false;",
    "    let version = 0;",
    "    const glVersion = gl.getParameter(gl.VERSION);",
    "",
    '    if (glVersion.indexOf("WebGL") !== -1) {',
    "      version = parseFloat(/^WebGL (d)/.exec(glVersion)[1]);",
    "      lineWidthAvailable = version >= 1.0;",
    '    } else if (glVersion.indexOf("OpenGL ES") !== -1) {',
    "      version = parseFloat(/^OpenGL ES (d)/.exec(glVersion)[1]);",
    "      lineWidthAvailable = version >= 2.0;",
    "    }",
    "",
    "    let currentTextureSlot = null;",
    "    let currentBoundTextures = {};",
    "",
    "    const scissorParam = gl.getParameter(gl.SCISSOR_BOX);",
    "    const viewportParam = gl.getParameter(gl.VIEWPORT);",
    "",
    "    const currentScissor = new Vector4().fromArray(scissorParam);",
    "    const currentViewport = new Vector4().fromArray(viewportParam);",
    "",
    "    function createTexture(type, target, count) {",
    "      const data = new Uint8Array(4); // 4 is required to match default unpack alignment of 4.",
    "      const texture = gl.createTexture();",
    "",
    "      gl.bindTexture(type, texture);",
    "      gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);",
    "      gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);",
    "",
    "      for (let i = 0; i < count; i++) {",
    "        gl.texImage2D(",
    "          target + i,",
    "          0,",
    "          gl.RGBA,",
    "          1,",
    "          1,",
    "          0,",
    "          gl.RGBA,",
    "          gl.UNSIGNED_BYTE,",
    "          data",
    "        );",
    "      }",
    "",
    "      return texture;",
    "    }",
    "",
    "    const emptyTextures = {};",
    "    emptyTextures[gl.TEXTURE_2D] = createTexture(",
    "      gl.TEXTURE_2D,",
    "      gl.TEXTURE_2D,",
    "      1",
    "    );",
    "    emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(",
    "      gl.TEXTURE_CUBE_MAP,",
    "      gl.TEXTURE_CUBE_MAP_POSITIVE_X,",
    "      6",
    "    );",
    "",
    "    // init",
    "",
    "    colorBuffer.setClear(0, 0, 0, 1);",
    "    depthBuffer.setClear(1);",
    "    stencilBuffer.setClear(0);",
    "",
    "    enable(gl.DEPTH_TEST);",
    "    depthBuffer.setFunc(LessEqualDepth);",
    "",
    "    setFlipSided(false);",
    "    setCullFace(CullFaceBack);",
    "    enable(gl.CULL_FACE);",
    "",
    "    setBlending(NoBlending);",
    "",
    "    //",
    "",
    "    function enable(id) {",
    "      if (enabledCapabilities[id] !== true) {",
    "        gl.enable(id);",
    "        enabledCapabilities[id] = true;",
    "      }",
    "    }",
    "",
    "    function disable(id) {",
    "      if (enabledCapabilities[id] !== false) {",
    "        gl.disable(id);",
    "        enabledCapabilities[id] = false;",
    "      }",
    "    }",
    "",
    "    function bindFramebuffer(target, framebuffer) {",
    "      if (currentBoundFramebuffers[target] !== framebuffer) {",
    "        gl.bindFramebuffer(target, framebuffer);",
    "",
    "        currentBoundFramebuffers[target] = framebuffer;",
    "",
    "        if (isWebGL2) {",
    "          // gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER",
    "",
    "          if (target === gl.DRAW_FRAMEBUFFER) {",
    "            currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;",
    "          }",
    "",
    "          if (target === gl.FRAMEBUFFER) {",
    "            currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;",
    "          }",
    "        }",
    "",
    "        return true;",
    "      }",
    "",
    "      return false;",
    "    }",
    "",
    "    function drawBuffers(renderTarget, framebuffer) {",
    "      let drawBuffers = defaultDrawbuffers;",
    "",
    "      let needsUpdate = false;",
    "",
    "      if (renderTarget) {",
    "        drawBuffers = currentDrawbuffers.get(framebuffer);",
    "",
    "        if (drawBuffers === undefined) {",
    "          drawBuffers = [];",
    "          currentDrawbuffers.set(framebuffer, drawBuffers);",
    "        }",
    "",
    "        if (renderTarget.isWebGLMultipleRenderTargets) {",
    "          const textures = renderTarget.texture;",
    "",
    "          if (",
    "            drawBuffers.length !== textures.length ||",
    "            drawBuffers[0] !== gl.COLOR_ATTACHMENT0",
    "          ) {",
    "            for (let i = 0, il = textures.length; i < il; i++) {",
    "              drawBuffers[i] = gl.COLOR_ATTACHMENT0 + i;",
    "            }",
    "",
    "            drawBuffers.length = textures.length;",
    "",
    "            needsUpdate = true;",
    "          }",
    "        } else {",
    "          if (drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {",
    "            drawBuffers[0] = gl.COLOR_ATTACHMENT0;",
    "",
    "            needsUpdate = true;",
    "          }",
    "        }",
    "      } else {",
    "        if (drawBuffers[0] !== gl.BACK) {",
    "          drawBuffers[0] = gl.BACK;",
    "",
    "          needsUpdate = true;",
    "        }",
    "      }",
    "",
    "      if (needsUpdate) {",
    "        if (capabilities.isWebGL2) {",
    "          gl.drawBuffers(drawBuffers);",
    "        } else {",
    '          extensions.get("WEBGL_draw_buffers").drawBuffersWEBGL(drawBuffers);',
    "        }",
    "      }",
    "    }",
    "",
    "    function useProgram(program) {",
    "      if (currentProgram !== program) {",
    "        gl.useProgram(program);",
    "",
    "        currentProgram = program;",
    "",
    "        return true;",
    "      }",
    "",
    "      return false;",
    "    }",
    "",
    "    const equationToGL = {",
    "      [AddEquation]: gl.FUNC_ADD,",
    "      [SubtractEquation]: gl.FUNC_SUBTRACT,",
    "      [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT,",
    "    };",
    "",
    "    if (isWebGL2) {",
    "      equationToGL[MinEquation] = gl.MIN;",
    "      equationToGL[MaxEquation] = gl.MAX;",
    "    } else {",
    '      const extension = extensions.get("EXT_blend_minmax");',
    "",
    "      if (extension !== null) {",
    "        equationToGL[MinEquation] = extension.MIN_EXT;",
    "        equationToGL[MaxEquation] = extension.MAX_EXT;",
    "      }",
    "    }",
    "",
    "    const factorToGL = {",
    "      [ZeroFactor]: gl.ZERO,",
    "      [OneFactor]: gl.ONE,",
    "      [SrcColorFactor]: gl.SRC_COLOR,",
    "      [SrcAlphaFactor]: gl.SRC_ALPHA,",
    "      [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,",
    "      [DstColorFactor]: gl.DST_COLOR,",
    "      [DstAlphaFactor]: gl.DST_ALPHA,",
    "      [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,",
    "      [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,",
    "      [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,",
    "      [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,",
    "    };",
    "",
    "    function setBlending(",
    "      blending,",
    "      blendEquation,",
    "      blendSrc,",
    "      blendDst,",
    "      blendEquationAlpha,",
    "      blendSrcAlpha,",
    "      blendDstAlpha,",
    "      premultipliedAlpha",
    "    ) {",
    "      if (blending === NoBlending) {",
    "        if (currentBlendingEnabled === true) {",
    "          disable(gl.BLEND);",
    "          currentBlendingEnabled = false;",
    "        }",
    "",
    "        return;",
    "      }",
    "",
    "      if (currentBlendingEnabled === false) {",
    "        enable(gl.BLEND);",
    "        currentBlendingEnabled = true;",
    "      }",
    "",
    "      if (blending !== CustomBlending) {",
    "        if (",
    "          blending !== currentBlending ||",
    "          premultipliedAlpha !== currentPremultipledAlpha",
    "        ) {",
    "          if (",
    "            currentBlendEquation !== AddEquation ||",
    "            currentBlendEquationAlpha !== AddEquation",
    "          ) {",
    "            gl.blendEquation(gl.FUNC_ADD);",
    "",
    "            currentBlendEquation = AddEquation;",
    "            currentBlendEquationAlpha = AddEquation;",
    "          }",
    "",
    "          if (premultipliedAlpha) {",
    "            switch (blending) {",
    "              case NormalBlending:",
    "                gl.blendFuncSeparate(",
    "                  gl.ONE,",
    "                  gl.ONE_MINUS_SRC_ALPHA,",
    "                  gl.ONE,",
    "                  gl.ONE_MINUS_SRC_ALPHA",
    "                );",
    "                break;",
    "",
    "              case AdditiveBlending:",
    "                gl.blendFunc(gl.ONE, gl.ONE);",
    "                break;",
    "",
    "              case SubtractiveBlending:",
    "                gl.blendFuncSeparate(",
    "                  gl.ZERO,",
    "                  gl.ONE_MINUS_SRC_COLOR,",
    "                  gl.ZERO,",
    "                  gl.ONE",
    "                );",
    "                break;",
    "",
    "              case MultiplyBlending:",
    "                gl.blendFuncSeparate(",
    "                  gl.ZERO,",
    "                  gl.SRC_COLOR,",
    "                  gl.ZERO,",
    "                  gl.SRC_ALPHA",
    "                );",
    "                break;",
    "",
    "              default:",
    '                console.error("THREE.WebGLState: Invalid blending:", blending);',
    "                break;",
    "            }",
    "          } else {",
    "            switch (blending) {",
    "              case NormalBlending:",
    "                gl.blendFuncSeparate(",
    "                  gl.SRC_ALPHA,",
    "                  gl.ONE_MINUS_SRC_ALPHA,",
    "                  gl.ONE,",
    "                  gl.ONE_MINUS_SRC_ALPHA",
    "                );",
    "                break;",
    "",
    "              case AdditiveBlending:",
    "                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);",
    "                break;",
    "",
    "              case SubtractiveBlending:",
    "                gl.blendFuncSeparate(",
    "                  gl.ZERO,",
    "                  gl.ONE_MINUS_SRC_COLOR,",
    "                  gl.ZERO,",
    "                  gl.ONE",
    "                );",
    "                break;",
    "",
    "              case MultiplyBlending:",
    "                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);",
    "                break;",
    "",
    "              default:",
    '                console.error("THREE.WebGLState: Invalid blending: ", blending);',
    "                break;",
    "            }",
    "          }",
    "",
    "          currentBlendSrc = null;",
    "          currentBlendDst = null;",
    "          currentBlendSrcAlpha = null;",
    "          currentBlendDstAlpha = null;",
    "",
    "          currentBlending = blending;",
    "          currentPremultipledAlpha = premultipliedAlpha;",
    "        }",
    "",
    "        return;",
    "      }",
    "",
    "      // custom blending",
    "",
    "      blendEquationAlpha = blendEquationAlpha || blendEquation;",
    "      blendSrcAlpha = blendSrcAlpha || blendSrc;",
    "      blendDstAlpha = blendDstAlpha || blendDst;",
    "",
    "      if (",
    "        blendEquation !== currentBlendEquation ||",
    "        blendEquationAlpha !== currentBlendEquationAlpha",
    "      ) {",
    "        gl.blendEquationSeparate(",
    "          equationToGL[blendEquation],",
    "          equationToGL[blendEquationAlpha]",
    "        );",
    "",
    "        currentBlendEquation = blendEquation;",
    "        currentBlendEquationAlpha = blendEquationAlpha;",
    "      }",
    "",
    "      if (",
    "        blendSrc !== currentBlendSrc ||",
    "        blendDst !== currentBlendDst ||",
    "        blendSrcAlpha !== currentBlendSrcAlpha ||",
    "        blendDstAlpha !== currentBlendDstAlpha",
    "      ) {",
    "        gl.blendFuncSeparate(",
    "          factorToGL[blendSrc],",
    "          factorToGL[blendDst],",
    "          factorToGL[blendSrcAlpha],",
    "          factorToGL[blendDstAlpha]",
    "        );",
    "",
    "        currentBlendSrc = blendSrc;",
    "        currentBlendDst = blendDst;",
    "        currentBlendSrcAlpha = blendSrcAlpha;",
    "        currentBlendDstAlpha = blendDstAlpha;",
    "      }",
    "",
    "      currentBlending = blending;",
    "      currentPremultipledAlpha = false;",
    "    }",
    "",
    "    function setMaterial(material, frontFaceCW) {",
    "      material.side === DoubleSide",
    "        ? disable(gl.CULL_FACE)",
    "        : enable(gl.CULL_FACE);",
    "",
    "      let flipSided = material.side === BackSide;",
    "      if (frontFaceCW) flipSided = !flipSided;",
    "",
    "      setFlipSided(flipSided);",
    "",
    "      material.blending === NormalBlending && material.transparent === false",
    "        ? setBlending(NoBlending)",
    "        : setBlending(",
    "            material.blending,",
    "            material.blendEquation,",
    "            material.blendSrc,",
    "            material.blendDst,",
    "            material.blendEquationAlpha,",
    "            material.blendSrcAlpha,",
    "            material.blendDstAlpha,",
    "            material.premultipliedAlpha",
    "          );",
    "",
    "      depthBuffer.setFunc(material.depthFunc);",
    "      depthBuffer.setTest(material.depthTest);",
    "      depthBuffer.setMask(material.depthWrite);",
    "      colorBuffer.setMask(material.colorWrite);",
    "",
    "      const stencilWrite = material.stencilWrite;",
    "      stencilBuffer.setTest(stencilWrite);",
    "      if (stencilWrite) {",
    "        stencilBuffer.setMask(material.stencilWriteMask);",
    "        stencilBuffer.setFunc(",
    "          material.stencilFunc,",
    "          material.stencilRef,",
    "          material.stencilFuncMask",
    "        );",
    "        stencilBuffer.setOp(",
    "          material.stencilFail,",
    "          material.stencilZFail,",
    "          material.stencilZPass",
    "        );",
    "      }",
    "",
    "      setPolygonOffset(",
    "        material.polygonOffset,",
    "        material.polygonOffsetFactor,",
    "        material.polygonOffsetUnits",
    "      );",
    "",
    "      material.alphaToCoverage === true",
    "        ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE)",
    "        : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);",
    "    }",
    "",
    "    //",
    "",
    "    function setFlipSided(flipSided) {",
    "      if (currentFlipSided !== flipSided) {",
    "        if (flipSided) {",
    "          gl.frontFace(gl.CW);",
    "        } else {",
    "          gl.frontFace(gl.CCW);",
    "        }",
    "",
    "        currentFlipSided = flipSided;",
    "      }",
    "    }",
    "",
    "    function setCullFace(cullFace) {",
    "      if (cullFace !== CullFaceNone) {",
    "        enable(gl.CULL_FACE);",
    "",
    "        if (cullFace !== currentCullFace) {",
    "          if (cullFace === CullFaceBack) {",
    "            gl.cullFace(gl.BACK);",
    "          } else if (cullFace === CullFaceFront) {",
    "            gl.cullFace(gl.FRONT);",
    "          } else {",
    "            gl.cullFace(gl.FRONT_AND_BACK);",
    "          }",
    "        }",
    "      } else {",
    "        disable(gl.CULL_FACE);",
    "      }",
    "",
    "      currentCullFace = cullFace;",
    "    }",
    "",
    "    function setLineWidth(width) {",
    "      if (width !== currentLineWidth) {",
    "        if (lineWidthAvailable) gl.lineWidth(width);",
    "",
    "        currentLineWidth = width;",
    "      }",
    "    }",
    "",
    "    function setPolygonOffset(polygonOffset, factor, units) {",
    "      if (polygonOffset) {",
    "        enable(gl.POLYGON_OFFSET_FILL);",
    "",
    "        if (",
    "          currentPolygonOffsetFactor !== factor ||",
    "          currentPolygonOffsetUnits !== units",
    "        ) {",
    "          gl.polygonOffset(factor, units);",
    "",
    "          currentPolygonOffsetFactor = factor;",
    "          currentPolygonOffsetUnits = units;",
    "        }",
    "      } else {",
    "        disable(gl.POLYGON_OFFSET_FILL);",
    "      }",
    "    }",
    "",
    "    function setScissorTest(scissorTest) {",
    "      if (scissorTest) {",
    "        enable(gl.SCISSOR_TEST);",
    "      } else {",
    "        disable(gl.SCISSOR_TEST);",
    "      }",
    "    }",
    "",
    "    // texture",
    "",
    "    function activeTexture(webglSlot) {",
    "      if (webglSlot === undefined) webglSlot = gl.TEXTURE0 + maxTextures - 1;",
    "",
    "      if (currentTextureSlot !== webglSlot) {",
    "        gl.activeTexture(webglSlot);",
    "        currentTextureSlot = webglSlot;",
    "      }",
    "    }",
    "",
    "    function bindTexture(webglType, webglTexture, webglSlot) {",
    "      if (webglSlot === undefined) {",
    "        if (currentTextureSlot === null) {",
    "          webglSlot = gl.TEXTURE0 + maxTextures - 1;",
    "        } else {",
    "          webglSlot = currentTextureSlot;",
    "        }",
    "      }",
    "",
    "      let boundTexture = currentBoundTextures[webglSlot];",
    "",
    "      if (boundTexture === undefined) {",
    "        boundTexture = { type: undefined, texture: undefined };",
    "        currentBoundTextures[webglSlot] = boundTexture;",
    "      }",
    "",
    "      if (",
    "        boundTexture.type !== webglType ||",
    "        boundTexture.texture !== webglTexture",
    "      ) {",
    "        if (currentTextureSlot !== webglSlot) {",
    "          gl.activeTexture(webglSlot);",
    "          currentTextureSlot = webglSlot;",
    "        }",
    "",
    "        gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);",
    "",
    "        boundTexture.type = webglType;",
    "        boundTexture.texture = webglTexture;",
    "      }",
    "    }",
    "",
    "    function unbindTexture() {",
    "      const boundTexture = currentBoundTextures[currentTextureSlot];",
    "",
    "      if (boundTexture !== undefined && boundTexture.type !== undefined) {",
    "        gl.bindTexture(boundTexture.type, null);",
    "",
    "        boundTexture.type = undefined;",
    "        boundTexture.texture = undefined;",
    "      }",
    "    }",
    "",
    "    //",
    "",
    "    function scissor(scissor) {",
    "      if (currentScissor.equals(scissor) === false) {",
    "        gl.scissor(scissor.x, scissor.y, scissor.z, scissor.w);",
    "        currentScissor.copy(scissor);",
    "      }",
    "    }",
    "",
    "    function viewport(viewport) {",
    "      if (currentViewport.equals(viewport) === false) {",
    "        gl.viewport(viewport.x, viewport.y, viewport.z, viewport.w);",
    "        currentViewport.copy(viewport);",
    "      }",
    "    }",
    "",
    "    function updateUBOMapping(uniformsGroup, program) {",
    "      let mapping = uboProgramMap.get(program);",
    "",
    "      if (mapping === undefined) {",
    "        mapping = new WeakMap();",
    "",
    "        uboProgramMap.set(program, mapping);",
    "      }",
    "",
    "      let blockIndex = mapping.get(uniformsGroup);",
    "",
    "      if (blockIndex === undefined) {",
    "        blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);",
    "",
    "        mapping.set(uniformsGroup, blockIndex);",
    "      }",
    "    }",
    "",
    "    function uniformBlockBinding(uniformsGroup, program) {",
    "      const mapping = uboProgramMap.get(program);",
    "      const blockIndex = mapping.get(uniformsGroup);",
    "",
    "      if (uboBindings.get(program) !== blockIndex) {",
    "        // bind shader specific block index to global block point",
    "        gl.uniformBlockBinding(",
    "          program,",
    "          blockIndex,",
    "          uniformsGroup.__bindingPointIndex",
    "        );",
    "",
    "        uboBindings.set(program, blockIndex);",
    "      }",
    "    }",
    "",
    "    //",
    "",
    "    function reset() {",
    "      // reset state",
    "",
    "      gl.disable(gl.BLEND);",
    "      gl.disable(gl.CULL_FACE);",
    "      gl.disable(gl.DEPTH_TEST);",
    "      gl.disable(gl.POLYGON_OFFSET_FILL);",
    "      gl.disable(gl.SCISSOR_TEST);",
    "      gl.disable(gl.STENCIL_TEST);",
    "      gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);",
    "",
    "      gl.blendEquation(gl.FUNC_ADD);",
    "      gl.blendFunc(gl.ONE, gl.ZERO);",
    "      gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);",
    "",
    "      gl.colorMask(true, true, true, true);",
    "      gl.clearColor(0, 0, 0, 0);",
    "",
    "      gl.depthMask(true);",
    "      gl.depthFunc(gl.LESS);",
    "      gl.clearDepth(1);",
    "",
    "      gl.stencilMask(0xffffffff);",
    "      gl.stencilFunc(gl.ALWAYS, 0, 0xffffffff);",
    "      gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);",
    "      gl.clearStencil(0);",
    "",
    "      gl.cullFace(gl.BACK);",
    "      gl.frontFace(gl.CCW);",
    "",
    "      gl.polygonOffset(0, 0);",
    "",
    "      gl.activeTexture(gl.TEXTURE0);",
    "",
    "      gl.bindFramebuffer(gl.FRAMEBUFFER, null);",
    "",
    "      if (isWebGL2 === true) {",
    "        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);",
    "        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);",
    "      }",
    "",
    "      gl.useProgram(null);",
    "",
    "      gl.lineWidth(1);",
    "",
    "      gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);",
    "      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);",
    "",
    "      // reset internals",
    "",
    "      enabledCapabilities = {};",
    "",
    "      currentTextureSlot = null;",
    "      currentBoundTextures = {};",
    "",
    "      currentBoundFramebuffers = {};",
    "      currentDrawbuffers = new WeakMap();",
    "      defaultDrawbuffers = [];",
    "",
    "      currentProgram = null;",
    "",
    "      currentBlendingEnabled = false;",
    "      currentBlending = null;",
    "      currentBlendEquation = null;",
    "      currentBlendSrc = null;",
    "      currentBlendDst = null;",
    "      currentBlendEquationAlpha = null;",
    "      currentBlendSrcAlpha = null;",
    "      currentBlendDstAlpha = null;",
    "      currentPremultipledAlpha = false;",
    "",
    "      currentFlipSided = null;",
    "      currentCullFace = null;",
    "",
    "      currentLineWidth = null;",
    "",
    "      currentPolygonOffsetFactor = null;",
    "      currentPolygonOffsetUnits = null;",
    "",
    "      currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);",
    "      currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);",
    "",
    "      colorBuffer.reset();",
    "      depthBuffer.reset();",
    "      stencilBuffer.reset();",
    "    }",
    "",
    "    return {",
    "      buffers: {",
    "        color: colorBuffer,",
    "        depth: depthBuffer,",
    "        stencil: stencilBuffer,",
    "      },",
    "",
    "      enable: enable,",
    "      disable: disable,",
    "",
    "      bindFramebuffer: bindFramebuffer,",
    "      drawBuffers: drawBuffers,",
    "",
    "      useProgram: useProgram,",
    "",
    "      setBlending: setBlending,",
    "      setMaterial: setMaterial,",
    "",
    "      setFlipSided: setFlipSided,",
    "      setCullFace: setCullFace,",
    "",
    "      setLineWidth: setLineWidth,",
    "      setPolygonOffset: setPolygonOffset,",
    "",
    "      setScissorTest: setScissorTest,",
    "",
    "      activeTexture: activeTexture,",
    "      bindTexture: bindTexture,",
    "      unbindTexture: unbindTexture,",
    "      compressedTexImage2D: compressedTexImage2D,",
    "      compressedTexImage3D: compressedTexImage3D,",
    "      texImage2D: texImage2D,",
    "      texImage3D: texImage3D,",
    "",
    "      updateUBOMapping: updateUBOMapping,",
    "      uniformBlockBinding: uniformBlockBinding,",
    "",
    "      texStorage2D: texStorage2D,",
    "      texStorage3D: texStorage3D,",
    "      texSubImage2D: texSubImage2D,",
    "      texSubImage3D: texSubImage3D,",
    "      compressedTexSubImage2D: compressedTexSubImage2D,",
    "      compressedTexSubImage3D: compressedTexSubImage3D,",
    "",
    "      scissor: scissor,",
    "      viewport: viewport,",
    "",
    "      reset: reset,",
    "    };",
    "  }",
    "",
    "  exports.ACESFilmicToneMapping = ACESFilmicToneMapping;",
    "  exports.AddEquation = AddEquation;",
    "  exports.AddOperation = AddOperation;",
    "  exports.AdditiveAnimationBlendMode = AdditiveAnimationBlendMode;",
    "  exports.AdditiveBlending = AdditiveBlending;",
    "  exports.AlphaFormat = AlphaFormat;",
    "  exports.AlwaysDepth = AlwaysDepth;",
    "  exports.AlwaysStencilFunc = AlwaysStencilFunc;",
    "  exports.AmbientLight = AmbientLight;",
    "  exports.AmbientLightProbe = AmbientLightProbe;",
    "  exports.AnimationClip = AnimationClip;",
    "  exports.AnimationLoader = AnimationLoader;",
    "  exports.AnimationMixer = AnimationMixer;",
    "  exports.AnimationObjectGroup = AnimationObjectGroup;",
    "  exports.AnimationUtils = AnimationUtils;",
    "  exports.ArcCurve = ArcCurve;",
    "  exports.ArrayCamera = ArrayCamera;",
    "  exports.ArrowHelper = ArrowHelper;",
    "  exports.Audio = Audio;",
    "  exports.AudioAnalyser = AudioAnalyser;",
    "  exports.AudioContext = AudioContext;",
    "  exports.AudioListener = AudioListener;",
    "  exports.AudioLoader = AudioLoader;",
    "  exports.AxesHelper = AxesHelper;",
    "  exports.BackSide = BackSide;",
    "  exports.BasicDepthPacking = BasicDepthPacking;",
    "  exports.BasicShadowMap = BasicShadowMap;",
    "  exports.Bone = Bone;",
    "  exports.BooleanKeyframeTrack = BooleanKeyframeTrack;",
    "  exports.Box2 = Box2;",
    "  exports.Box3 = Box3;",
    "  exports.Box3Helper = Box3Helper;",
    "  exports.BoxBufferGeometry = BoxBufferGeometry;",
    "  exports.BoxGeometry = BoxGeometry;",
    "  exports.BoxHelper = BoxHelper;",
    "  exports.BufferAttribute = BufferAttribute;",
    "  exports.BufferGeometry = BufferGeometry;",
    "  exports.BufferGeometryLoader = BufferGeometryLoader;",
    "  exports.ByteType = ByteType;",
    "  exports.Cache = Cache;",
    "  exports.Camera = Camera;",
    "  exports.CameraHelper = CameraHelper;",
    "  exports.CanvasTexture = CanvasTexture;",
    "  exports.CapsuleBufferGeometry = CapsuleBufferGeometry;",
    "  exports.CapsuleGeometry = CapsuleGeometry;",
    "  exports.CatmullRomCurve3 = CatmullRomCurve3;",
    "  exports.CineonToneMapping = CineonToneMapping;",
    "  exports.CircleBufferGeometry = CircleBufferGeometry;",
    "  exports.CircleGeometry = CircleGeometry;",
    "  exports.ClampToEdgeWrapping = ClampToEdgeWrapping;",
    "  exports.Clock = Clock;",
    "  exports.Color = Color;",
    "  exports.ColorKeyframeTrack = ColorKeyframeTrack;",
    "  exports.ColorManagement = ColorManagement;",
    "  exports.CompressedArrayTexture = CompressedArrayTexture;",
    "  exports.CompressedTexture = CompressedTexture;",
    "  exports.CompressedTextureLoader = CompressedTextureLoader;",
    "  exports.ConeBufferGeometry = ConeBufferGeometry;",
    "  exports.ConeGeometry = ConeGeometry;",
    "  exports.CubeCamera = CubeCamera;",
    "  exports.CubeReflectionMapping = CubeReflectionMapping;",
    "  exports.CubeRefractionMapping = CubeRefractionMapping;",
    "  exports.CubeTexture = CubeTexture;",
    "  exports.CubeTextureLoader = CubeTextureLoader;",
    "  exports.CubeUVReflectionMapping = CubeUVReflectionMapping;",
    "  exports.CubicBezierCurve = CubicBezierCurve;",
    "  exports.CubicBezierCurve3 = CubicBezierCurve3;",
    "  exports.CubicInterpolant = CubicInterpolant;",
    "  exports.CullFaceBack = CullFaceBack;",
    "  exports.CullFaceFront = CullFaceFront;",
    "  exports.CullFaceFrontBack = CullFaceFrontBack;",
    "  exports.CullFaceNone = CullFaceNone;",
    "  exports.Curve = Curve;",
    "  exports.CurvePath = CurvePath;",
    "  exports.CustomBlending = CustomBlending;",
    "  exports.CustomToneMapping = CustomToneMapping;",
    "  exports.CylinderBufferGeometry = CylinderBufferGeometry;",
    "  exports.CylinderGeometry = CylinderGeometry;",
    "  exports.Cylindrical = Cylindrical;",
    "  exports.Data3DTexture = Data3DTexture;",
    "  exports.DataArrayTexture = DataArrayTexture;",
    "  exports.DataTexture = DataTexture;",
    "  exports.DataTextureLoader = DataTextureLoader;",
    "  exports.DataUtils = DataUtils;",
    "  exports.DecrementStencilOp = DecrementStencilOp;",
    "  exports.DecrementWrapStencilOp = DecrementWrapStencilOp;",
    "  exports.DefaultLoadingManager = DefaultLoadingManager;",
    "  exports.DepthFormat = DepthFormat;",
    "  exports.DepthStencilFormat = DepthStencilFormat;",
    "  exports.DepthTexture = DepthTexture;",
    "  exports.DirectionalLight = DirectionalLight;",
    "  exports.DirectionalLightHelper = DirectionalLightHelper;",
    "  exports.DiscreteInterpolant = DiscreteInterpolant;",
    "  exports.DodecahedronBufferGeometry = DodecahedronBufferGeometry;",
    "  exports.DodecahedronGeometry = DodecahedronGeometry;",
    "  exports.DoubleSide = DoubleSide;",
    "  exports.DstAlphaFactor = DstAlphaFactor;",
    "  exports.DstColorFactor = DstColorFactor;",
    "  exports.DynamicCopyUsage = DynamicCopyUsage;",
    "  exports.DynamicDrawUsage = DynamicDrawUsage;",
    "  exports.DynamicReadUsage = DynamicReadUsage;",
    "  exports.EdgesGeometry = EdgesGeometry;",
    "  exports.EllipseCurve = EllipseCurve;",
    "  exports.EqualDepth = EqualDepth;",
    "  exports.EqualStencilFunc = EqualStencilFunc;",
    "  exports.EquirectangularReflectionMapping = EquirectangularReflectionMapping;",
    "  exports.EquirectangularRefractionMapping = EquirectangularRefractionMapping;",
    "  exports.Euler = Euler;",
    "  exports.EventDispatcher = EventDispatcher;",
    "  exports.ExtrudeBufferGeometry = ExtrudeBufferGeometry;",
    "  exports.ExtrudeGeometry = ExtrudeGeometry;",
    "  exports.FileLoader = FileLoader;",
    "  exports.Float16BufferAttribute = Float16BufferAttribute;",
    "  exports.Float32BufferAttribute = Float32BufferAttribute;",
    "  exports.Float64BufferAttribute = Float64BufferAttribute;",
    "  exports.FloatType = FloatType;",
    "  exports.Fog = Fog;",
    "  exports.FogExp2 = FogExp2;",
    "  exports.FramebufferTexture = FramebufferTexture;",
    "  exports.FrontSide = FrontSide;",
    "  exports.Frustum = Frustum;",
    "  exports.GLBufferAttribute = GLBufferAttribute;",
    "  exports.GLSL1 = GLSL1;",
    "  exports.GLSL3 = GLSL3;",
    "  exports.GreaterDepth = GreaterDepth;",
    "  exports.GreaterEqualDepth = GreaterEqualDepth;",
    "  exports.GreaterEqualStencilFunc = GreaterEqualStencilFunc;",
    "  exports.GreaterStencilFunc = GreaterStencilFunc;",
    "  exports.GridHelper = GridHelper;",
    "  exports.Group = Group;",
    "  exports.HalfFloatType = HalfFloatType;",
    "  exports.HemisphereLight = HemisphereLight;",
    "  exports.HemisphereLightHelper = HemisphereLightHelper;",
    "  exports.HemisphereLightProbe = HemisphereLightProbe;",
    "  exports.IcosahedronBufferGeometry = IcosahedronBufferGeometry;",
    "  exports.IcosahedronGeometry = IcosahedronGeometry;",
    "  exports.ImageBitmapLoader = ImageBitmapLoader;",
    "  exports.ImageLoader = ImageLoader;",
    "  exports.ImageUtils = ImageUtils;",
    "  exports.IncrementStencilOp = IncrementStencilOp;",
    "  exports.IncrementWrapStencilOp = IncrementWrapStencilOp;",
    "  exports.InstancedBufferAttribute = InstancedBufferAttribute;",
    "  exports.InstancedBufferGeometry = InstancedBufferGeometry;",
    "  exports.InstancedInterleavedBuffer = InstancedInterleavedBuffer;",
    "  exports.InstancedMesh = InstancedMesh;",
    "  exports.Int16BufferAttribute = Int16BufferAttribute;",
    "  exports.Int32BufferAttribute = Int32BufferAttribute;",
    "  exports.Int8BufferAttribute = Int8BufferAttribute;",
    "  exports.IntType = IntType;",
    "  exports.InterleavedBuffer = InterleavedBuffer;",
    "  exports.InterleavedBufferAttribute = InterleavedBufferAttribute;",
    "  exports.Interpolant = Interpolant;",
    "  exports.InterpolateDiscrete = InterpolateDiscrete;",
    "  exports.InterpolateLinear = InterpolateLinear;",
    "  exports.InterpolateSmooth = InterpolateSmooth;",
    "  exports.InvertStencilOp = InvertStencilOp;",
    "  exports.KeepStencilOp = KeepStencilOp;",
    "  exports.KeyframeTrack = KeyframeTrack;",
    "  exports.LOD = LOD;",
    "  exports.LatheBufferGeometry = LatheBufferGeometry;",
    "  exports.LatheGeometry = LatheGeometry;",
    "  exports.Layers = Layers;",
    "  exports.LessDepth = LessDepth;",
    "  exports.LessEqualDepth = LessEqualDepth;",
    "  exports.LessEqualStencilFunc = LessEqualStencilFunc;",
    "  exports.LessStencilFunc = LessStencilFunc;",
    "  exports.Light = Light;",
    "  exports.LightProbe = LightProbe;",
    "  exports.Line = Line;",
    "  exports.Line3 = Line3;",
    "  exports.LineBasicMaterial = LineBasicMaterial;",
    "  exports.LineCurve = LineCurve;",
    "  exports.LineCurve3 = LineCurve3;",
    "  exports.LineDashedMaterial = LineDashedMaterial;",
    "  exports.LineLoop = LineLoop;",
    "  exports.LineSegments = LineSegments;",
    "  exports.LinearEncoding = LinearEncoding;",
    "  exports.LinearFilter = LinearFilter;",
    "  exports.LinearInterpolant = LinearInterpolant;",
    "  exports.LinearMipMapLinearFilter = LinearMipMapLinearFilter;",
    "  exports.LinearMipMapNearestFilter = LinearMipMapNearestFilter;",
    "  exports.LinearMipmapLinearFilter = LinearMipmapLinearFilter;",
    "  exports.LinearMipmapNearestFilter = LinearMipmapNearestFilter;",
    "  exports.LinearSRGBColorSpace = LinearSRGBColorSpace;",
    "  exports.LinearToneMapping = LinearToneMapping;",
    "  exports.Loader = Loader;",
    "  exports.LoaderUtils = LoaderUtils;",
    "  exports.LoadingManager = LoadingManager;",
    "  exports.LoopOnce = LoopOnce;",
    "  exports.LoopPingPong = LoopPingPong;",
    "  exports.LoopRepeat = LoopRepeat;",
    "  exports.LuminanceAlphaFormat = LuminanceAlphaFormat;",
    "  exports.LuminanceFormat = LuminanceFormat;",
    "  exports.MOUSE = MOUSE;",
    "  exports.Material = Material;",
    "  exports.MaterialLoader = MaterialLoader;",
    "  exports.MathUtils = MathUtils;",
    "  exports.Matrix3 = Matrix3;",
    "  exports.Matrix4 = Matrix4;",
    "  exports.MaxEquation = MaxEquation;",
    "  exports.Mesh = Mesh;",
    "  exports.MeshBasicMaterial = MeshBasicMaterial;",
    "  exports.MeshDepthMaterial = MeshDepthMaterial;",
    "  exports.MeshDistanceMaterial = MeshDistanceMaterial;",
    "  exports.MeshLambertMaterial = MeshLambertMaterial;",
    "  exports.MeshMatcapMaterial = MeshMatcapMaterial;",
    "  exports.MeshNormalMaterial = MeshNormalMaterial;",
    "  exports.MeshPhongMaterial = MeshPhongMaterial;",
    "  exports.MeshPhysicalMaterial = MeshPhysicalMaterial;",
    "  exports.MeshStandardMaterial = MeshStandardMaterial;",
    "  exports.MeshToonMaterial = MeshToonMaterial;",
    "  exports.MinEquation = MinEquation;",
    "  exports.MirroredRepeatWrapping = MirroredRepeatWrapping;",
    "  exports.MixOperation = MixOperation;",
    "  exports.MultiplyBlending = MultiplyBlending;",
    "  exports.MultiplyOperation = MultiplyOperation;",
    "  exports.NearestFilter = NearestFilter;",
    "  exports.NearestMipMapLinearFilter = NearestMipMapLinearFilter;",
    "  exports.NearestMipMapNearestFilter = NearestMipMapNearestFilter;",
    "  exports.NearestMipmapLinearFilter = NearestMipmapLinearFilter;",
    "  exports.NearestMipmapNearestFilter = NearestMipmapNearestFilter;",
    "  exports.NeverDepth = NeverDepth;",
    "  exports.NeverStencilFunc = NeverStencilFunc;",
    "  exports.NoBlending = NoBlending;",
    "  exports.NoColorSpace = NoColorSpace;",
    "  exports.NoToneMapping = NoToneMapping;",
    "  exports.NormalAnimationBlendMode = NormalAnimationBlendMode;",
    "  exports.NormalBlending = NormalBlending;",
    "  exports.NotEqualDepth = NotEqualDepth;",
    "  exports.NotEqualStencilFunc = NotEqualStencilFunc;",
    "  exports.NumberKeyframeTrack = NumberKeyframeTrack;",
    "  exports.Object3D = Object3D;",
    "  exports.ObjectLoader = ObjectLoader;",
    "  exports.ObjectSpaceNormalMap = ObjectSpaceNormalMap;",
    "  exports.OctahedronBufferGeometry = OctahedronBufferGeometry;",
    "  exports.OctahedronGeometry = OctahedronGeometry;",
    "  exports.OneFactor = OneFactor;",
    "  exports.OneMinusDstAlphaFactor = OneMinusDstAlphaFactor;",
    "  exports.OneMinusDstColorFactor = OneMinusDstColorFactor;",
    "  exports.OneMinusSrcAlphaFactor = OneMinusSrcAlphaFactor;",
    "  exports.OneMinusSrcColorFactor = OneMinusSrcColorFactor;",
    "  exports.OrthographicCamera = OrthographicCamera;",
    "  exports.PCFShadowMap = PCFShadowMap;",
    "  exports.PCFSoftShadowMap = PCFSoftShadowMap;",
    "  exports.PMREMGenerator = PMREMGenerator;",
    "  exports.Path = Path;",
    "  exports.PerspectiveCamera = PerspectiveCamera;",
    "  exports.Plane = Plane;",
    "  exports.PlaneBufferGeometry = PlaneBufferGeometry;",
    "  exports.PlaneGeometry = PlaneGeometry;",
    "  exports.PlaneHelper = PlaneHelper;",
    "  exports.PointLight = PointLight;",
    "  exports.PointLightHelper = PointLightHelper;",
    "  exports.Points = Points;",
    "  exports.PointsMaterial = PointsMaterial;",
    "  exports.PolarGridHelper = PolarGridHelper;",
    "  exports.PolyhedronBufferGeometry = PolyhedronBufferGeometry;",
    "  exports.PolyhedronGeometry = PolyhedronGeometry;",
    "  exports.PositionalAudio = PositionalAudio;",
    "  exports.PropertyBinding = PropertyBinding;",
    "  exports.PropertyMixer = PropertyMixer;",
    "  exports.QuadraticBezierCurve = QuadraticBezierCurve;",
    "  exports.QuadraticBezierCurve3 = QuadraticBezierCurve3;",
    "  exports.Quaternion = Quaternion;",
    "  exports.QuaternionKeyframeTrack = QuaternionKeyframeTrack;",
    "  exports.QuaternionLinearInterpolant = QuaternionLinearInterpolant;",
    "  exports.RED_GREEN_RGTC2_Format = RED_GREEN_RGTC2_Format;",
    "  exports.RED_RGTC1_Format = RED_RGTC1_Format;",
    "  exports.REVISION = REVISION;",
    "  exports.RGBADepthPacking = RGBADepthPacking;",
    "  exports.RGBAFormat = RGBAFormat;",
    "  exports.RGBAIntegerFormat = RGBAIntegerFormat;",
    "  exports.RGBA_ASTC_10x10_Format = RGBA_ASTC_10x10_Format;",
    "  exports.RGBA_ASTC_10x5_Format = RGBA_ASTC_10x5_Format;",
    "  exports.RGBA_ASTC_10x6_Format = RGBA_ASTC_10x6_Format;",
    "  exports.RGBA_ASTC_10x8_Format = RGBA_ASTC_10x8_Format;",
    "  exports.RGBA_ASTC_12x10_Format = RGBA_ASTC_12x10_Format;",
    "  exports.RGBA_ASTC_12x12_Format = RGBA_ASTC_12x12_Format;",
    "  exports.RGBA_ASTC_4x4_Format = RGBA_ASTC_4x4_Format;",
    "  exports.RGBA_ASTC_5x4_Format = RGBA_ASTC_5x4_Format;",
    "  exports.RGBA_ASTC_5x5_Format = RGBA_ASTC_5x5_Format;",
    "  exports.RGBA_ASTC_6x5_Format = RGBA_ASTC_6x5_Format;",
    "  exports.RGBA_ASTC_6x6_Format = RGBA_ASTC_6x6_Format;",
    "  exports.RGBA_ASTC_8x5_Format = RGBA_ASTC_8x5_Format;",
    "  exports.RGBA_ASTC_8x6_Format = RGBA_ASTC_8x6_Format;",
    "  exports.RGBA_ASTC_8x8_Format = RGBA_ASTC_8x8_Format;",
    "  exports.RGBA_BPTC_Format = RGBA_BPTC_Format;",
    "  exports.RGBA_ETC2_EAC_Format = RGBA_ETC2_EAC_Format;",
    "  exports.RGBA_PVRTC_2BPPV1_Format = RGBA_PVRTC_2BPPV1_Format;",
    "  exports.RGBA_PVRTC_4BPPV1_Format = RGBA_PVRTC_4BPPV1_Format;",
    "  exports.RGBA_S3TC_DXT1_Format = RGBA_S3TC_DXT1_Format;",
    "  exports.RGBA_S3TC_DXT3_Format = RGBA_S3TC_DXT3_Format;",
    "  exports.RGBA_S3TC_DXT5_Format = RGBA_S3TC_DXT5_Format;",
    "  exports.RGB_ETC1_Format = RGB_ETC1_Format;",
    "  exports.RGB_ETC2_Format = RGB_ETC2_Format;",
    "  exports.RGB_PVRTC_2BPPV1_Format = RGB_PVRTC_2BPPV1_Format;",
    "  exports.RGB_PVRTC_4BPPV1_Format = RGB_PVRTC_4BPPV1_Format;",
    "  exports.RGB_S3TC_DXT1_Format = RGB_S3TC_DXT1_Format;",
    "  exports.RGFormat = RGFormat;",
    "  exports.RGIntegerFormat = RGIntegerFormat;",
    "  exports.RawShaderMaterial = RawShaderMaterial;",
    "  exports.Ray = Ray;",
    "  exports.Raycaster = Raycaster;",
    "  exports.RectAreaLight = RectAreaLight;",
    "  exports.RedFormat = RedFormat;",
    "  exports.RedIntegerFormat = RedIntegerFormat;",
    "  exports.ReinhardToneMapping = ReinhardToneMapping;",
    "  exports.RepeatWrapping = RepeatWrapping;",
    "  exports.ReplaceStencilOp = ReplaceStencilOp;",
    "  exports.ReverseSubtractEquation = ReverseSubtractEquation;",
    "  exports.RingBufferGeometry = RingBufferGeometry;",
    "  exports.RingGeometry = RingGeometry;",
    "  exports.SIGNED_RED_GREEN_RGTC2_Format = SIGNED_RED_GREEN_RGTC2_Format;",
    "  exports.SIGNED_RED_RGTC1_Format = SIGNED_RED_RGTC1_Format;",
    "  exports.SRGBColorSpace = SRGBColorSpace;",
    "  exports.Scene = Scene;",
    "  exports.ShaderChunk = ShaderChunk;",
    "  exports.ShaderLib = ShaderLib;",
    "  exports.ShaderMaterial = ShaderMaterial;",
    "  exports.ShadowMaterial = ShadowMaterial;",
    "  exports.Shape = Shape;",
    "  exports.ShapeBufferGeometry = ShapeBufferGeometry;",
    "  exports.ShapeGeometry = ShapeGeometry;",
    "  exports.ShapePath = ShapePath;",
    "  exports.ShapeUtils = ShapeUtils;",
    "  exports.ShortType = ShortType;",
    "  exports.Skeleton = Skeleton;",
    "  exports.SkeletonHelper = SkeletonHelper;",
    "  exports.SkinnedMesh = SkinnedMesh;",
    "  exports.Source = Source;",
    "  exports.Sphere = Sphere;",
    "  exports.SphereBufferGeometry = SphereBufferGeometry;",
    "  exports.SphereGeometry = SphereGeometry;",
    "  exports.Spherical = Spherical;",
    "  exports.SphericalHarmonics3 = SphericalHarmonics3;",
    "  exports.SplineCurve = SplineCurve;",
    "  exports.SpotLight = SpotLight;",
    "  exports.SpotLightHelper = SpotLightHelper;",
    "  exports.Sprite = Sprite;",
    "  exports.SpriteMaterial = SpriteMaterial;",
    "  exports.SrcAlphaFactor = SrcAlphaFactor;",
    "  exports.SrcAlphaSaturateFactor = SrcAlphaSaturateFactor;",
    "  exports.SrcColorFactor = SrcColorFactor;",
    "  exports.StaticCopyUsage = StaticCopyUsage;",
    "  exports.StaticDrawUsage = StaticDrawUsage;",
    "  exports.StaticReadUsage = StaticReadUsage;",
    "  exports.StereoCamera = StereoCamera;",
    "  exports.StreamCopyUsage = StreamCopyUsage;",
    "  exports.StreamDrawUsage = StreamDrawUsage;",
    "  exports.StreamReadUsage = StreamReadUsage;",
    "  exports.StringKeyframeTrack = StringKeyframeTrack;",
    "  exports.SubtractEquation = SubtractEquation;",
    "  exports.SubtractiveBlending = SubtractiveBlending;",
    "  exports.TOUCH = TOUCH;",
    "  exports.TangentSpaceNormalMap = TangentSpaceNormalMap;",
    "  exports.TetrahedronBufferGeometry = TetrahedronBufferGeometry;",
    "  exports.TetrahedronGeometry = TetrahedronGeometry;",
    "  exports.Texture = Texture;",
    "  exports.TextureLoader = TextureLoader;",
    "  exports.TorusBufferGeometry = TorusBufferGeometry;",
    "  exports.TorusGeometry = TorusGeometry;",
    "  exports.TorusKnotBufferGeometry = TorusKnotBufferGeometry;",
    "  exports.TorusKnotGeometry = TorusKnotGeometry;",
    "  exports.Triangle = Triangle;",
    "  exports.TriangleFanDrawMode = TriangleFanDrawMode;",
    "  exports.TriangleStripDrawMode = TriangleStripDrawMode;",
    "  exports.TrianglesDrawMode = TrianglesDrawMode;",
    "  exports.TubeBufferGeometry = TubeBufferGeometry;",
    "  exports.TubeGeometry = TubeGeometry;",
    "  exports.TwoPassDoubleSide = TwoPassDoubleSide;",
    "  exports.UVMapping = UVMapping;",
    "  exports.Uint16BufferAttribute = Uint16BufferAttribute;",
    "  exports.Uint32BufferAttribute = Uint32BufferAttribute;",
    "  exports.Uint8BufferAttribute = Uint8BufferAttribute;",
    "  exports.Uint8ClampedBufferAttribute = Uint8ClampedBufferAttribute;",
    "  exports.Uniform = Uniform;",
    "  exports.UniformsGroup = UniformsGroup;",
    "  exports.UniformsLib = UniformsLib;",
    "  exports.UniformsUtils = UniformsUtils;",
    "  exports.UnsignedByteType = UnsignedByteType;",
    "  exports.UnsignedInt248Type = UnsignedInt248Type;",
    "  exports.UnsignedIntType = UnsignedIntType;",
    "  exports.UnsignedShort4444Type = UnsignedShort4444Type;",
    "  exports.UnsignedShort5551Type = UnsignedShort5551Type;",
    "  exports.UnsignedShortType = UnsignedShortType;",
    "  exports.VSMShadowMap = VSMShadowMap;",
    "  exports.Vector2 = Vector2;",
    "  exports.Vector3 = Vector3;",
    "  exports.Vector4 = Vector4;",
    "  exports.VectorKeyframeTrack = VectorKeyframeTrack;",
    "  exports.VideoTexture = VideoTexture;",
    "  exports.WebGL1Renderer = WebGL1Renderer;",
    "  exports.WebGL3DRenderTarget = WebGL3DRenderTarget;",
    "  exports.WebGLArrayRenderTarget = WebGLArrayRenderTarget;",
    "  exports.WebGLCubeRenderTarget = WebGLCubeRenderTarget;",
    "  exports.WebGLMultipleRenderTargets = WebGLMultipleRenderTargets;",
    "  exports.WebGLRenderTarget = WebGLRenderTarget;",
    "  exports.WebGLRenderer = WebGLRenderer;",
    "  exports.WebGLUtils = WebGLUtils;",
    "  exports.WireframeGeometry = WireframeGeometry;",
    "  exports.WrapAroundEnding = WrapAroundEnding;",
    "  exports.ZeroCurvatureEnding = ZeroCurvatureEnding;",
    "  exports.ZeroFactor = ZeroFactor;",
    "  exports.ZeroSlopeEnding = ZeroSlopeEnding;",
    "  exports.ZeroStencilOp = ZeroStencilOp;",
    "  exports._SRGBAFormat = _SRGBAFormat;",
    "  exports.sRGBEncoding = sRGBEncoding;",
    "});",
  ];
  const printOut = () => {
    if (code[codeIndex] != "") {
      timeOutSpeed = code[codeIndex].length;
      generateMessage(code[codeIndex]);
      if (index >= lines) {
        removeMessage(index - lines);
      }
      index++;
    }
    codeIndex++;
    setTimeout(printOut, timeOutSpeed * typeSpeed + 250);
  };
  const creatPromptLine = (id) => {
    return `<div id="${id}" class="typing"></div>`;
  };
  const generateMessage = (msg) => {
    const id = "dii-" + index;
    // Create a message container based on the type
    const container = creatPromptLine(id);
    // Get the messages element
    const messagesElement = $("#output");
    // Append the container to the messages element
    messagesElement.append(container);
    let i = 0;
    function typeLoop() {
      setTimeout(function () {
        let temp = msg[i];
        typing(temp, id);
        i++;
        if (i < msg.length) {
          typeLoop();
        }
      }, typeSpeed);
    }
    typeLoop();
  };
  const typing = (msg, id) => {
    element = document.getElementById(id);
    element.append(msg);
  };
  const removeMessage = (msg) => {
    let id = "dii-" + msg;
    // Get the messages element
    const element = document.getElementById(id);
    element.remove();
  };
  printOut();
});
